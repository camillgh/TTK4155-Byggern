
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000cc  00800100  00001448  000014dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001448  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  008001cc  008001cc  000015a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002530  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013e7  00000000  00000000  00003de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001646  00000000  00000000  000051c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000598  00000000  00000000  00006810  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008dd  00000000  00000000  00006da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000109d  00000000  00000000  00007685  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00008722  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_3>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <USART_transmit+0x4>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	11 e0       	ldi	r17, 0x01	; 1
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e8 e4       	ldi	r30, 0x48	; 72
     37c:	f4 e1       	ldi	r31, 0x14	; 20
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ac 3c       	cpi	r26, 0xCC	; 204
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	ac ec       	ldi	r26, 0xCC	; 204
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a4 3f       	cpi	r26, 0xF4	; 244
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <main>
     39e:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <adc_init>:
void adc_write(uint8_t data, uint16_t addr)
{
	// Pointer starting at the adress for adc

	volatile char *ext_ram = (char *) 0x1400;
	ext_ram[addr] = data;
     3a6:	85 b7       	in	r24, 0x35	; 53
     3a8:	80 68       	ori	r24, 0x80	; 128
     3aa:	85 bf       	out	0x35, r24	; 53
     3ac:	80 b7       	in	r24, 0x30	; 48
     3ae:	80 62       	ori	r24, 0x20	; 32
     3b0:	80 bf       	out	0x30, r24	; 48
     3b2:	30 98       	cbi	0x06, 0	; 6
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	08 95       	ret

000003ba <adc_clock_signal>:
     3ba:	b8 9a       	sbi	0x17, 0	; 23
     3bc:	83 b7       	in	r24, 0x33	; 51
     3be:	88 60       	ori	r24, 0x08	; 8
     3c0:	83 bf       	out	0x33, r24	; 51
     3c2:	83 b7       	in	r24, 0x33	; 51
     3c4:	8f 7b       	andi	r24, 0xBF	; 191
     3c6:	83 bf       	out	0x33, r24	; 51
     3c8:	83 b7       	in	r24, 0x33	; 51
     3ca:	80 61       	ori	r24, 0x10	; 16
     3cc:	83 bf       	out	0x33, r24	; 51
     3ce:	83 b7       	in	r24, 0x33	; 51
     3d0:	81 60       	ori	r24, 0x01	; 1
     3d2:	83 bf       	out	0x33, r24	; 51
     3d4:	8a e0       	ldi	r24, 0x0A	; 10
     3d6:	81 bf       	out	0x31, r24	; 49
     3d8:	08 95       	ret

000003da <adc_read>:
	volatile char *adc = (char *) 0x1400;
	
	uint8_t data;
	
	// Select channel
	adc[0] = 0b10000000 | channel;
     3da:	80 68       	ori	r24, 0x80	; 128
     3dc:	e0 e0       	ldi	r30, 0x00	; 0
     3de:	f4 e1       	ldi	r31, 0x14	; 20
     3e0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3e2:	84 ea       	ldi	r24, 0xA4	; 164
     3e4:	8a 95       	dec	r24
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <adc_read+0xa>

	_delay_us(100);
	
	// Get data from channel
	data = adc[0];
     3e8:	80 81       	ld	r24, Z
	
	return data;
}
     3ea:	08 95       	ret

000003ec <can_init>:
		
	}

	// Reset interrupt
	mcp2515_bit_modify(MCP_CANINTF, 0xff, 0);
}
     3ec:	0e 94 f7 02 	call	0x5ee	; 0x5ee <mcp2515_driver_init>
     3f0:	f8 94       	cli
     3f2:	38 9a       	sbi	0x07, 0	; 7
     3f4:	86 b7       	in	r24, 0x36	; 54
     3f6:	81 60       	ori	r24, 0x01	; 1
     3f8:	86 bf       	out	0x36, r24	; 54
     3fa:	8b b7       	in	r24, 0x3b	; 59
     3fc:	80 62       	ori	r24, 0x20	; 32
     3fe:	8b bf       	out	0x3b, r24	; 59
     400:	43 e0       	ldi	r20, 0x03	; 3
     402:	6f ef       	ldi	r22, 0xFF	; 255
     404:	8b e2       	ldi	r24, 0x2B	; 43
     406:	0e 94 d5 02 	call	0x5aa	; 0x5aa <mcp2515_bit_modify>
     40a:	40 e0       	ldi	r20, 0x00	; 0
     40c:	6f ef       	ldi	r22, 0xFF	; 255
     40e:	8c e2       	ldi	r24, 0x2C	; 44
     410:	0e 94 d5 02 	call	0x5aa	; 0x5aa <mcp2515_bit_modify>
     414:	30 98       	cbi	0x06, 0	; 6
     416:	78 94       	sei
     418:	8e e0       	ldi	r24, 0x0E	; 14
     41a:	0e 94 a4 02 	call	0x548	; 0x548 <mcp2515_read>
     41e:	80 7e       	andi	r24, 0xE0	; 224
     420:	80 34       	cpi	r24, 0x40	; 64
     422:	41 f0       	breq	.+16     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     424:	8a e0       	ldi	r24, 0x0A	; 10
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	9f 93       	push	r25
     42a:	8f 93       	push	r24
     42c:	0e 94 00 06 	call	0xc00	; 0xc00 <printf>
     430:	0f 90       	pop	r0
     432:	0f 90       	pop	r0
     434:	08 95       	ret

00000436 <can_transmission_completed>:

uint8_t can_transmission_completed(){
	
	// Checks if TX buffer has a pending transmission, if no then return 1
	if (test_bit(mcp2515_read(MCP_TXB0CTRL), 3)){
     436:	80 e3       	ldi	r24, 0x30	; 48
     438:	0e 94 a4 02 	call	0x548	; 0x548 <mcp2515_read>
     43c:	83 fb       	bst	r24, 3
     43e:	88 27       	eor	r24, r24
     440:	80 f9       	bld	r24, 0
		return 0;
	}
	else{
		return 1;
	}
}
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	89 27       	eor	r24, r25
     446:	08 95       	ret

00000448 <can_send>:
		return 1;
	}
	
}

void can_send(can_message *message){
     448:	cf 92       	push	r12
     44a:	df 92       	push	r13
     44c:	ef 92       	push	r14
     44e:	ff 92       	push	r15
     450:	1f 93       	push	r17
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	6c 01       	movw	r12, r24

	if (can_transmission_completed()){
     458:	0e 94 1b 02 	call	0x436	; 0x436 <can_transmission_completed>
     45c:	88 23       	and	r24, r24
     45e:	91 f1       	breq	.+100    	; 0x4c4 <can_send+0x7c>
		
		// Id
		mcp2515_write(message->id >> 3, MCP_TXB1SIDH);
     460:	f6 01       	movw	r30, r12
     462:	80 81       	ld	r24, Z
     464:	91 81       	ldd	r25, Z+1	; 0x01
     466:	96 95       	lsr	r25
     468:	87 95       	ror	r24
     46a:	96 95       	lsr	r25
     46c:	87 95       	ror	r24
     46e:	96 95       	lsr	r25
     470:	87 95       	ror	r24
     472:	61 e4       	ldi	r22, 0x41	; 65
     474:	0e 94 b6 02 	call	0x56c	; 0x56c <mcp2515_write>
		mcp2515_write(message->id << 5, MCP_TXB1SIDL);
     478:	f6 01       	movw	r30, r12
     47a:	80 81       	ld	r24, Z
     47c:	62 e4       	ldi	r22, 0x42	; 66
     47e:	82 95       	swap	r24
     480:	88 0f       	add	r24, r24
     482:	80 7e       	andi	r24, 0xE0	; 224
     484:	0e 94 b6 02 	call	0x56c	; 0x56c <mcp2515_write>
		
		// Data length
		mcp2515_write(message->length, MCP_TXB1DLC);
     488:	65 e4       	ldi	r22, 0x45	; 69
     48a:	f6 01       	movw	r30, r12
     48c:	82 81       	ldd	r24, Z+2	; 0x02
     48e:	0e 94 b6 02 	call	0x56c	; 0x56c <mcp2515_write>
		
		// Data
		for (int i = 0; i < message->length; i++){
     492:	f6 01       	movw	r30, r12
     494:	82 81       	ldd	r24, Z+2	; 0x02
     496:	88 23       	and	r24, r24
     498:	a9 f0       	breq	.+42     	; 0x4c4 <can_send+0x7c>
     49a:	76 01       	movw	r14, r12
     49c:	f3 e0       	ldi	r31, 0x03	; 3
     49e:	ef 0e       	add	r14, r31
     4a0:	f1 1c       	adc	r15, r1
     4a2:	16 e4       	ldi	r17, 0x46	; 70
     4a4:	c0 e0       	ldi	r28, 0x00	; 0
     4a6:	d0 e0       	ldi	r29, 0x00	; 0
			mcp2515_write(message->data[i], MCP_TXB1D0  + i);
     4a8:	61 2f       	mov	r22, r17
     4aa:	f7 01       	movw	r30, r14
     4ac:	81 91       	ld	r24, Z+
     4ae:	7f 01       	movw	r14, r30
     4b0:	0e 94 b6 02 	call	0x56c	; 0x56c <mcp2515_write>
		
		// Data length
		mcp2515_write(message->length, MCP_TXB1DLC);
		
		// Data
		for (int i = 0; i < message->length; i++){
     4b4:	21 96       	adiw	r28, 0x01	; 1
     4b6:	1f 5f       	subi	r17, 0xFF	; 255
     4b8:	f6 01       	movw	r30, r12
     4ba:	82 81       	ldd	r24, Z+2	; 0x02
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	c8 17       	cp	r28, r24
     4c0:	d9 07       	cpc	r29, r25
     4c2:	94 f3       	brlt	.-28     	; 0x4a8 <can_send+0x60>
		}

	}

	// Request to send command
	mcp2515_request_to_send(MCP_RTS_TX1);
     4c4:	82 e8       	ldi	r24, 0x82	; 130
     4c6:	0e 94 ca 02 	call	0x594	; 0x594 <mcp2515_request_to_send>
	
}
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	1f 91       	pop	r17
     4d0:	ff 90       	pop	r15
     4d2:	ef 90       	pop	r14
     4d4:	df 90       	pop	r13
     4d6:	cf 90       	pop	r12
     4d8:	08 95       	ret

000004da <can_interrupt>:

uint8_t can_interrupt(){

	// If CAN interrupt service is activated, then clear interrupt flag and set can flag
	// such that we can read message
	mcp2515_bit_modify(MCP_CANINTF, 0x01, 0);
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	61 e0       	ldi	r22, 0x01	; 1
     4de:	8c e2       	ldi	r24, 0x2C	; 44
     4e0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <mcp2515_bit_modify>
	can_flag = 1;
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <__data_end>
}
     4ea:	08 95       	ret

000004ec <__vector_3>:

// Interrupt service for CAN
ISR(INT2_vect){
     4ec:	1f 92       	push	r1
     4ee:	0f 92       	push	r0
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	0f 92       	push	r0
     4f4:	11 24       	eor	r1, r1
     4f6:	2f 93       	push	r18
     4f8:	3f 93       	push	r19
     4fa:	4f 93       	push	r20
     4fc:	5f 93       	push	r21
     4fe:	6f 93       	push	r22
     500:	7f 93       	push	r23
     502:	8f 93       	push	r24
     504:	9f 93       	push	r25
     506:	af 93       	push	r26
     508:	bf 93       	push	r27
     50a:	ef 93       	push	r30
     50c:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     50e:	8f ef       	ldi	r24, 0xFF	; 255
     510:	9f e2       	ldi	r25, 0x2F	; 47
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	f1 f7       	brne	.-4      	; 0x512 <__stack+0x13>
     516:	00 c0       	rjmp	.+0      	; 0x518 <__stack+0x19>
     518:	00 00       	nop
	_delay_ms(10);
	
	can_interrupt();
     51a:	0e 94 6d 02 	call	0x4da	; 0x4da <can_interrupt>
     51e:	ff 91       	pop	r31
     520:	ef 91       	pop	r30
     522:	bf 91       	pop	r27
     524:	af 91       	pop	r26
     526:	9f 91       	pop	r25
     528:	8f 91       	pop	r24
     52a:	7f 91       	pop	r23
     52c:	6f 91       	pop	r22
     52e:	5f 91       	pop	r21
     530:	4f 91       	pop	r20
     532:	3f 91       	pop	r19
     534:	2f 91       	pop	r18
     536:	0f 90       	pop	r0
     538:	0f be       	out	0x3f, r0	; 63
     53a:	0f 90       	pop	r0
     53c:	1f 90       	pop	r1
     53e:	18 95       	reti

00000540 <slave_select>:
	// Deselect CAN
	slave_deselect();
	
	return result;
	
}
     540:	c4 98       	cbi	0x18, 4	; 24
     542:	08 95       	ret

00000544 <slave_deselect>:
     544:	c4 9a       	sbi	0x18, 4	; 24
     546:	08 95       	ret

00000548 <mcp2515_read>:
     548:	cf 93       	push	r28
     54a:	c8 2f       	mov	r28, r24
     54c:	0e 94 a0 02 	call	0x540	; 0x540 <slave_select>
     550:	83 e0       	ldi	r24, 0x03	; 3
     552:	0e 94 2d 03 	call	0x65a	; 0x65a <spi_send>
     556:	8c 2f       	mov	r24, r28
     558:	0e 94 2d 03 	call	0x65a	; 0x65a <spi_send>
     55c:	0e 94 31 03 	call	0x662	; 0x662 <spi_receive>
     560:	c8 2f       	mov	r28, r24
     562:	0e 94 a2 02 	call	0x544	; 0x544 <slave_deselect>
     566:	8c 2f       	mov	r24, r28
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <mcp2515_write>:
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	c8 2f       	mov	r28, r24
     572:	d6 2f       	mov	r29, r22
     574:	0e 94 a0 02 	call	0x540	; 0x540 <slave_select>
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	0e 94 2d 03 	call	0x65a	; 0x65a <spi_send>
     57e:	8d 2f       	mov	r24, r29
     580:	0e 94 2d 03 	call	0x65a	; 0x65a <spi_send>
     584:	8c 2f       	mov	r24, r28
     586:	0e 94 2d 03 	call	0x65a	; 0x65a <spi_send>
     58a:	0e 94 a2 02 	call	0x544	; 0x544 <slave_deselect>
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	08 95       	ret

00000594 <mcp2515_request_to_send>:
     594:	cf 93       	push	r28
     596:	c8 2f       	mov	r28, r24
     598:	0e 94 a0 02 	call	0x540	; 0x540 <slave_select>
     59c:	8c 2f       	mov	r24, r28
     59e:	0e 94 2d 03 	call	0x65a	; 0x65a <spi_send>
     5a2:	0e 94 a2 02 	call	0x544	; 0x544 <slave_deselect>
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	18 2f       	mov	r17, r24
     5b2:	d6 2f       	mov	r29, r22
     5b4:	c4 2f       	mov	r28, r20
	
	// Select CAN
	slave_select();
     5b6:	0e 94 a0 02 	call	0x540	; 0x540 <slave_select>
	
	// Send bit modify command
	spi_send(MCP_BITMOD);
     5ba:	85 e0       	ldi	r24, 0x05	; 5
     5bc:	0e 94 2d 03 	call	0x65a	; 0x65a <spi_send>
	
	// Address we want to modify
	spi_send(address);
     5c0:	81 2f       	mov	r24, r17
     5c2:	0e 94 2d 03 	call	0x65a	; 0x65a <spi_send>
	
	// Bit mask
	spi_send(mask);
     5c6:	8d 2f       	mov	r24, r29
     5c8:	0e 94 2d 03 	call	0x65a	; 0x65a <spi_send>
	
	// Modifying data
	spi_send(data);
     5cc:	8c 2f       	mov	r24, r28
     5ce:	0e 94 2d 03 	call	0x65a	; 0x65a <spi_send>
	
	// Deselct CAN
	slave_deselect();
     5d2:	0e 94 a2 02 	call	0x544	; 0x544 <slave_deselect>
	
}
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	08 95       	ret

000005de <mcp2515_reset>:

void mcp2515_reset(){
	
	// Select CAN
	slave_select();
     5de:	0e 94 a0 02 	call	0x540	; 0x540 <slave_select>
	
	// Send reset command
	spi_send(MCP_RESET);
     5e2:	80 ec       	ldi	r24, 0xC0	; 192
     5e4:	0e 94 2d 03 	call	0x65a	; 0x65a <spi_send>
	
	// Deselect can controller
	slave_deselect();
     5e8:	0e 94 a2 02 	call	0x544	; 0x544 <slave_deselect>
     5ec:	08 95       	ret

000005ee <mcp2515_driver_init>:

uint8_t mcp2515_driver_init(){
	uint8_t value;
	
	// Initialize spi
	spi_init();
     5ee:	0e 94 25 03 	call	0x64a	; 0x64a <spi_init>
	
	// Send reset command
	mcp2515_reset();
     5f2:	0e 94 ef 02 	call	0x5de	; 0x5de <mcp2515_reset>


	// Turn mask filters off, receive any messages
	mcp2515_write(MCP_RXB0CTRL,0x60);
     5f6:	60 e6       	ldi	r22, 0x60	; 96
     5f8:	80 e6       	ldi	r24, 0x60	; 96
     5fa:	0e 94 b6 02 	call	0x56c	; 0x56c <mcp2515_write>
	mcp2515_write(MCP_RXB1CTRL,0x70);
     5fe:	60 e7       	ldi	r22, 0x70	; 112
     600:	80 e7       	ldi	r24, 0x70	; 112
     602:	0e 94 b6 02 	call	0x56c	; 0x56c <mcp2515_write>
	
	// Set can bus timing 
	mcp2515_write(0x01, MCP_CNF3);
     606:	68 e2       	ldi	r22, 0x28	; 40
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	0e 94 b6 02 	call	0x56c	; 0x56c <mcp2515_write>
	mcp2515_write(0xb5, MCP_CNF2);
     60e:	69 e2       	ldi	r22, 0x29	; 41
     610:	85 eb       	ldi	r24, 0xB5	; 181
     612:	0e 94 b6 02 	call	0x56c	; 0x56c <mcp2515_write>
	mcp2515_write(0x43, MCP_CNF1);  //CAN BR NODE 2 0x290561
     616:	6a e2       	ldi	r22, 0x2A	; 42
     618:	83 e4       	ldi	r24, 0x43	; 67
     61a:	0e 94 b6 02 	call	0x56c	; 0x56c <mcp2515_write>
	
	// Configuration mode test
	value = mcp2515_read(MCP_CANSTAT);
     61e:	8e e0       	ldi	r24, 0x0E	; 14
     620:	0e 94 a4 02 	call	0x548	; 0x548 <mcp2515_read>
	if ((value & MODE_MASK) != MODE_CONFIG){
     624:	80 7e       	andi	r24, 0xE0	; 224
     626:	80 38       	cpi	r24, 0x80	; 128
     628:	51 f0       	breq	.+20     	; 0x63e <mcp2515_driver_init+0x50>
		printf("MCP2515 is NOT in configuration mode after reset!\n\r");
     62a:	8c e2       	ldi	r24, 0x2C	; 44
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	9f 93       	push	r25
     630:	8f 93       	push	r24
     632:	0e 94 00 06 	call	0xc00	; 0xc00 <printf>
		return 1;
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	08 95       	ret
	}
	
	
	// Set normal mode
	mcp2515_write(MODE_NORMAL, MCP_CANCTRL);
     63e:	6f e0       	ldi	r22, 0x0F	; 15
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	0e 94 b6 02 	call	0x56c	; 0x56c <mcp2515_write>
	
	return 0;
     646:	80 e0       	ldi	r24, 0x00	; 0
}
     648:	08 95       	ret

0000064a <spi_init>:
 #include "../can/mcp2515.h"

void spi_init(void){
	
	// Set MOSI, SCK and SS as output
	DDRB |= (1<<PB5)|(1<<PB7)|(1<<PB4);
     64a:	87 b3       	in	r24, 0x17	; 23
     64c:	80 6b       	ori	r24, 0xB0	; 176
     64e:	87 bb       	out	0x17, r24	; 23
	
	// Set MISO as input
	DDRB &= ~(1<<PB6);
     650:	be 98       	cbi	0x17, 6	; 23
	
	// Enable SPI, Master, set clock rate fck/16 
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     652:	8d b1       	in	r24, 0x0d	; 13
     654:	81 65       	ori	r24, 0x51	; 81
     656:	8d b9       	out	0x0d, r24	; 13
     658:	08 95       	ret

0000065a <spi_send>:

void spi_send(char cData){
	
	
	/* Start transmission */
	SPDR = cData;
     65a:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for the transmission complete */
	while (!(SPSR & (1<<SPIF))){
     65c:	77 9b       	sbis	0x0e, 7	; 14
     65e:	fe cf       	rjmp	.-4      	; 0x65c <spi_send+0x2>
		;}
}
     660:	08 95       	ret

00000662 <spi_receive>:

char spi_receive(void)
{
	// Send dummy byte
	spi_send(0);
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	0e 94 2d 03 	call	0x65a	; 0x65a <spi_send>
	
	// Wait for reception complete 
	while (!(SPSR & (1<<SPIF))){
     668:	77 9b       	sbis	0x0e, 7	; 14
     66a:	fe cf       	rjmp	.-4      	; 0x668 <spi_receive+0x6>
		;
	}
	
	// Return data register 
	return SPDR;
     66c:	8f b1       	in	r24, 0x0f	; 15
}
     66e:	08 95       	ret

00000670 <joystick_button>:
	if (abs(position.position_x) <= deadzone && abs(position.position_y) <= deadzone){
		position.dir = 'N';
	}
	return position;
	
};
     670:	81 30       	cpi	r24, 0x01	; 1
     672:	91 05       	cpc	r25, r1
     674:	39 f0       	breq	.+14     	; 0x684 <joystick_button+0x14>
     676:	82 30       	cpi	r24, 0x02	; 2
     678:	91 05       	cpc	r25, r1
     67a:	31 f0       	breq	.+12     	; 0x688 <joystick_button+0x18>
     67c:	89 2b       	or	r24, r25
     67e:	69 f4       	brne	.+26     	; 0x69a <joystick_button+0x2a>
     680:	b1 99       	sbic	0x16, 1	; 22
     682:	0e c0       	rjmp	.+28     	; 0x6a0 <joystick_button+0x30>
     684:	b2 99       	sbic	0x16, 2	; 22
     686:	0f c0       	rjmp	.+30     	; 0x6a6 <joystick_button+0x36>
     688:	86 b3       	in	r24, 0x16	; 22
     68a:	86 95       	lsr	r24
     68c:	86 95       	lsr	r24
     68e:	86 95       	lsr	r24
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	89 27       	eor	r24, r25
     694:	81 70       	andi	r24, 0x01	; 1
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	08 95       	ret
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	08 95       	ret
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	08 95       	ret
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	08 95       	ret

000006ac <joystick_calibration>:

void joystick_calibration(void){
     6ac:	cf 93       	push	r28
	
	uint8_t x,y;
	
	// Get x, y start value for joystick
	x = adc_read(0);
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 ed 01 	call	0x3da	; 0x3da <adc_read>
     6b6:	c8 2f       	mov	r28, r24
	y = adc_read(1);
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	0e 94 ed 01 	call	0x3da	; 0x3da <adc_read>
     6c0:	e9 ef       	ldi	r30, 0xF9	; 249
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	31 97       	sbiw	r30, 0x01	; 1
     6c6:	f1 f7       	brne	.-4      	; 0x6c4 <joystick_calibration+0x18>
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <joystick_calibration+0x1e>
     6ca:	00 00       	nop
	
	_delay_ms(1);
	
	// Set start value for joystick to the global variables: x_mid, y_mid
	x_mid = x;
     6cc:	c0 93 ce 01 	sts	0x01CE, r28	; 0x8001ce <x_mid>
	y_mid = y;
     6d0:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <y_mid>
	
}
     6d4:	cf 91       	pop	r28
     6d6:	08 95       	ret

000006d8 <joystick_init>:


void joystick_init(void){
	
	// Set PINB1, PINB2 and PINB3 as inputs
	DDRB &= ~(1<<PINB1) & ~(1<<PINB2) & ~(1<<PINB3);
     6d8:	87 b3       	in	r24, 0x17	; 23
     6da:	81 7f       	andi	r24, 0xF1	; 241
     6dc:	87 bb       	out	0x17, r24	; 23
	
	// Calibrate joystick
	joystick_calibration();
     6de:	0e 94 56 03 	call	0x6ac	; 0x6ac <joystick_calibration>
     6e2:	08 95       	ret

000006e4 <main>:
#include "can/mcp2515.h"
#include "can/can.h"
#include "can/mcp2515_driver.h"


void main(void){
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	2b 97       	sbiw	r28, 0x0b	; 11
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	de bf       	out	0x3e, r29	; 62
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	cd bf       	out	0x3d, r28	; 61
	
	// Init: Assignent 1
	USART_init(MYUBRR);
     6f8:	8f e1       	ldi	r24, 0x1F	; 31
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 a8 05 	call	0xb50	; 0xb50 <USART_init>
	
	// Init: Assignent 2
	SRAM_init();
     700:	0e 94 98 05 	call	0xb30	; 0xb30 <SRAM_init>

	// Init: Assignent 3
	adc_init();
     704:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <adc_init>
	adc_clock_signal();
     708:	0e 94 dd 01 	call	0x3ba	; 0x3ba <adc_clock_signal>
	joystick_init();
     70c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <joystick_init>
	
	joystick_position j_position;
	slider_position s_position;
	
	// Init: Assignent 4
	oled_init();
     710:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <oled_init>
	oled_reset();
     714:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <oled_reset>
	oled_pos(0,0);
     718:	60 e0       	ldi	r22, 0x00	; 0
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	0e 94 7f 05 	call	0xafe	; 0xafe <oled_pos>
	
	menu_init();
     720:	0e 94 f5 03 	call	0x7ea	; 0x7ea <menu_init>
	update_currentmenu();
     724:	0e 94 1a 04 	call	0x834	; 0x834 <update_currentmenu>
	
	
	// Init: Assignent 5
	can_init();
     728:	0e 94 f6 01 	call	0x3ec	; 0x3ec <can_init>

	can_message send_message, receive_message, test_message;
	send_message.id = 0;
     72c:	1a 82       	std	Y+2, r1	; 0x02
     72e:	19 82       	std	Y+1, r1	; 0x01
	send_message.length = 6;
     730:	86 e0       	ldi	r24, 0x06	; 6
     732:	8b 83       	std	Y+3, r24	; 0x03
	
	// Init: Assignent 8
	int highscore = 0;

	// Start message for the game
	oled_print("Welcome to this");
     734:	80 e6       	ldi	r24, 0x60	; 96
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	0e 94 63 04 	call	0x8c6	; 0x8c6 <oled_print>
	oled_pos(1,0);
     73c:	60 e0       	ldi	r22, 0x00	; 0
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	0e 94 7f 05 	call	0xafe	; 0xafe <oled_pos>

	oled_print("fabulous game by");
     744:	80 e7       	ldi	r24, 0x70	; 112
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	0e 94 63 04 	call	0x8c6	; 0x8c6 <oled_print>
	oled_pos(2,0);
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	82 e0       	ldi	r24, 0x02	; 2
     750:	0e 94 7f 05 	call	0xafe	; 0xafe <oled_pos>

	oled_print("group 17! :)");
     754:	81 e8       	ldi	r24, 0x81	; 129
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	0e 94 63 04 	call	0x8c6	; 0x8c6 <oled_print>
     75c:	2f e3       	ldi	r18, 0x3F	; 63
     75e:	8b e4       	ldi	r24, 0x4B	; 75
     760:	9c e4       	ldi	r25, 0x4C	; 76
     762:	21 50       	subi	r18, 0x01	; 1
     764:	80 40       	sbci	r24, 0x00	; 0
     766:	90 40       	sbci	r25, 0x00	; 0
     768:	e1 f7       	brne	.-8      	; 0x762 <main+0x7e>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <main+0x88>
     76c:	00 00       	nop
			_delay_ms(100);
		}
	*/
	
	// Reset oled display	
	oled_reset();
     76e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <oled_reset>
	adc_clock_signal();
	joystick_init();
	
	int button_l = 0;
	int button_r = 0;
	int button_joy = 0;
     772:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (joystick_button(1)==0){
			button_r = 0;
		}
		if (joystick_button(2)){
			button_joy = 1;
     774:	ff 24       	eor	r15, r15
     776:	f3 94       	inc	r15
		}
		if (joystick_button(2)==0){
			button_joy = 0;
     778:	00 e0       	ldi	r16, 0x00	; 0
		
		*/
		
		// Assignment 6, 8 and main game
		
		if (joystick_button(0)){
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 38 03 	call	0x670	; 0x670 <joystick_button>
			button_l = 1;
		}
		if (joystick_button(0)==0){
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 38 03 	call	0x670	; 0x670 <joystick_button>
			button_l = 0;
		}
		if (joystick_button(1)){
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 38 03 	call	0x670	; 0x670 <joystick_button>
			button_r = 1;
		}
		if (joystick_button(1)==0){
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 38 03 	call	0x670	; 0x670 <joystick_button>
			button_r = 0;
		}
		if (joystick_button(2)){
     79a:	82 e0       	ldi	r24, 0x02	; 2
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	0e 94 38 03 	call	0x670	; 0x670 <joystick_button>
     7a2:	89 2b       	or	r24, r25
     7a4:	09 f0       	breq	.+2      	; 0x7a8 <main+0xc4>
			button_joy = 1;
     7a6:	1f 2d       	mov	r17, r15
		}
		if (joystick_button(2)==0){
     7a8:	82 e0       	ldi	r24, 0x02	; 2
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0e 94 38 03 	call	0x670	; 0x670 <joystick_button>
     7b0:	89 2b       	or	r24, r25
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <main+0xd2>
			button_joy = 0;
     7b4:	10 2f       	mov	r17, r16
		}
	
		send_message.data[0] = adc_read(0);
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 ed 01 	call	0x3da	; 0x3da <adc_read>
     7be:	8c 83       	std	Y+4, r24	; 0x04
		send_message.data[1] = adc_read(1);
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 ed 01 	call	0x3da	; 0x3da <adc_read>
     7c8:	8d 83       	std	Y+5, r24	; 0x05
		send_message.data[2] = adc_read(3);
     7ca:	83 e0       	ldi	r24, 0x03	; 3
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 ed 01 	call	0x3da	; 0x3da <adc_read>
     7d2:	8e 83       	std	Y+6, r24	; 0x06
		send_message.data[3] = adc_read(2);
     7d4:	82 e0       	ldi	r24, 0x02	; 2
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 ed 01 	call	0x3da	; 0x3da <adc_read>
     7dc:	8f 83       	std	Y+7, r24	; 0x07
		send_message.data[4] = button_joy;
     7de:	18 87       	std	Y+8, r17	; 0x08
		
		can_send(&send_message);
     7e0:	ce 01       	movw	r24, r28
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	0e 94 24 02 	call	0x448	; 0x448 <can_send>
	
		
		
	
	}
     7e8:	c8 cf       	rjmp	.-112    	; 0x77a <main+0x96>

000007ea <menu_init>:
	if ((button_l) && (cursor_page != 2)){
		cursor_page--;
		_delay_ms(1000);
		
	}
	if ((button_r) && (cursor_page != 4)){
     7ea:	a4 ee       	ldi	r26, 0xE4	; 228
     7ec:	b6 e0       	ldi	r27, 0x06	; 6
     7ee:	8e e8       	ldi	r24, 0x8E	; 142
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	11 96       	adiw	r26, 0x01	; 1
     7f4:	9c 93       	st	X, r25
     7f6:	8e 93       	st	-X, r24
     7f8:	13 96       	adiw	r26, 0x03	; 3
     7fa:	1c 92       	st	X, r1
     7fc:	1e 92       	st	-X, r1
     7fe:	12 97       	sbiw	r26, 0x02	; 2
     800:	eb ed       	ldi	r30, 0xDB	; 219
     802:	f1 e0       	ldi	r31, 0x01	; 1
     804:	15 96       	adiw	r26, 0x05	; 5
     806:	fc 93       	st	X, r31
     808:	ee 93       	st	-X, r30
     80a:	14 97       	sbiw	r26, 0x04	; 4
     80c:	88 e9       	ldi	r24, 0x98	; 152
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	91 83       	std	Z+1, r25	; 0x01
     812:	80 83       	st	Z, r24
     814:	b3 83       	std	Z+3, r27	; 0x03
     816:	a2 83       	std	Z+2, r26	; 0x02
     818:	15 82       	std	Z+5, r1	; 0x05
     81a:	14 82       	std	Z+4, r1	; 0x04
     81c:	8c e0       	ldi	r24, 0x0C	; 12
     81e:	fd 01       	movw	r30, r26
     820:	af ec       	ldi	r26, 0xCF	; 207
     822:	b1 e0       	ldi	r27, 0x01	; 1
     824:	01 90       	ld	r0, Z+
     826:	0d 92       	st	X+, r0
     828:	8a 95       	dec	r24
     82a:	e1 f7       	brne	.-8      	; 0x824 <menu_init+0x3a>
     82c:	82 e0       	ldi	r24, 0x02	; 2
     82e:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <cursor_page>
     832:	08 95       	ret

00000834 <update_currentmenu>:

//Function that updates currentmenu from buttonpresses
void update_currentmenu(void){
	
	// Go into submenu
	if (!test_bit(PINB, PINB3) && current_menu.children[cursor_page-2] != NULL){
     834:	b3 99       	sbic	0x16, 3	; 22
     836:	26 c0       	rjmp	.+76     	; 0x884 <update_currentmenu+0x50>
     838:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <cursor_page>
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	ee 0f       	add	r30, r30
     840:	ff 1f       	adc	r31, r31
     842:	e1 53       	subi	r30, 0x31	; 49
     844:	fe 4f       	sbci	r31, 0xFE	; 254
     846:	01 90       	ld	r0, Z+
     848:	f0 81       	ld	r31, Z
     84a:	e0 2d       	mov	r30, r0
     84c:	30 97       	sbiw	r30, 0x00	; 0
     84e:	d1 f0       	breq	.+52     	; 0x884 <update_currentmenu+0x50>
		current_menu = *current_menu.children[cursor_page-2]; //The two first pages are the header and a whitespace
     850:	8c e0       	ldi	r24, 0x0C	; 12
     852:	af ec       	ldi	r26, 0xCF	; 207
     854:	b1 e0       	ldi	r27, 0x01	; 1
     856:	01 90       	ld	r0, Z+
     858:	0d 92       	st	X+, r0
     85a:	8a 95       	dec	r24
     85c:	e1 f7       	brne	.-8      	; 0x856 <update_currentmenu+0x22>
		cursor_page = 2;
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <cursor_page>
		printf("We are entering the submenu: %s \n\r", current_menu.name);
     864:	ef ec       	ldi	r30, 0xCF	; 207
     866:	f1 e0       	ldi	r31, 0x01	; 1
     868:	81 81       	ldd	r24, Z+1	; 0x01
     86a:	8f 93       	push	r24
     86c:	80 81       	ld	r24, Z
     86e:	8f 93       	push	r24
     870:	88 ea       	ldi	r24, 0xA8	; 168
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	9f 93       	push	r25
     876:	8f 93       	push	r24
     878:	0e 94 00 06 	call	0xc00	; 0xc00 <printf>
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	08 95       	ret

00000886 <oled_print_char>:
	
	
}

// Function to print a char
int oled_print_char(char c){
     886:	28 2f       	mov	r18, r24
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	f9 01       	movw	r30, r18
     88c:	ee 0f       	add	r30, r30
     88e:	ff 1f       	adc	r31, r31
     890:	ee 0f       	add	r30, r30
     892:	ff 1f       	adc	r31, r31
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	e0 59       	subi	r30, 0x90	; 144
     89a:	f0 40       	sbci	r31, 0x00	; 0
     89c:	22 0f       	add	r18, r18
     89e:	33 1f       	adc	r19, r19
     8a0:	22 0f       	add	r18, r18
     8a2:	33 1f       	adc	r19, r19
     8a4:	22 0f       	add	r18, r18
     8a6:	33 1f       	adc	r19, r19
     8a8:	28 58       	subi	r18, 0x88	; 136
     8aa:	30 40       	sbci	r19, 0x00	; 0
	// Convert char
	int print_char = c-' ';
	
	// Print char on oled screen
	for (int i = 0; i < FONTWIDTH; i++){
		*oled_data = pgm_read_byte(&font8[print_char][i]);
     8ac:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <oled_data>
     8b0:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <oled_data+0x1>
     8b4:	94 91       	lpm	r25, Z
     8b6:	9c 93       	st	X, r25
     8b8:	31 96       	adiw	r30, 0x01	; 1
	
	// Convert char
	int print_char = c-' ';
	
	// Print char on oled screen
	for (int i = 0; i < FONTWIDTH; i++){
     8ba:	e2 17       	cp	r30, r18
     8bc:	f3 07       	cpc	r31, r19
     8be:	b1 f7       	brne	.-20     	; 0x8ac <oled_print_char+0x26>
		*oled_data = pgm_read_byte(&font8[print_char][i]);
	}
	return 0;
}
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	08 95       	ret

000008c6 <oled_print>:

// Function to print a string on oled
void oled_print(char *c){
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	8c 01       	movw	r16, r24
     8d4:	7c 01       	movw	r14, r24
	
 	int i = 0;
     8d6:	c0 e0       	ldi	r28, 0x00	; 0
     8d8:	d0 e0       	ldi	r29, 0x00	; 0
 	
	// Print string on oled screen
 	while (i < strlen(c)){
     8da:	06 c0       	rjmp	.+12     	; 0x8e8 <oled_print+0x22>
 		oled_print_char(c[i]);
     8dc:	f7 01       	movw	r30, r14
     8de:	81 91       	ld	r24, Z+
     8e0:	7f 01       	movw	r14, r30
     8e2:	0e 94 43 04 	call	0x886	; 0x886 <oled_print_char>
 		i++;
     8e6:	21 96       	adiw	r28, 0x01	; 1
void oled_print(char *c){
	
 	int i = 0;
 	
	// Print string on oled screen
 	while (i < strlen(c)){
     8e8:	f8 01       	movw	r30, r16
     8ea:	01 90       	ld	r0, Z+
     8ec:	00 20       	and	r0, r0
     8ee:	e9 f7       	brne	.-6      	; 0x8ea <oled_print+0x24>
     8f0:	31 97       	sbiw	r30, 0x01	; 1
     8f2:	e0 1b       	sub	r30, r16
     8f4:	f1 0b       	sbc	r31, r17
     8f6:	ce 17       	cp	r28, r30
     8f8:	df 07       	cpc	r29, r31
     8fa:	80 f3       	brcs	.-32     	; 0x8dc <oled_print+0x16>
 		oled_print_char(c[i]);
 		i++;

 	}	
}
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	ff 90       	pop	r15
     906:	ef 90       	pop	r14
     908:	08 95       	ret

0000090a <oled_home>:

int oled_home(void) {

	//Reset the global variables page and column
	page = 0;
     90a:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <page>
	col = 0;
     90e:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <col>
	
	//Set the cursor to the start of the oled display:

	//Setup column start and end address
	*oled_command = 0x21;
     912:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     916:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     91a:	81 e2       	ldi	r24, 0x21	; 33
     91c:	80 83       	st	Z, r24
	*oled_command = 0x00;
     91e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     922:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     926:	10 82       	st	Z, r1
	*oled_command = 0x7F;
     928:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     92c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     930:	8f e7       	ldi	r24, 0x7F	; 127
     932:	80 83       	st	Z, r24
	
	// Setup page start and end address
	*oled_command = 0x22;
     934:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     938:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     93c:	82 e2       	ldi	r24, 0x22	; 34
     93e:	80 83       	st	Z, r24
	*oled_command = 0x00;
     940:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     944:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     948:	10 82       	st	Z, r1
	*oled_command = 0x7;
     94a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     94e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     952:	87 e0       	ldi	r24, 0x07	; 7
     954:	80 83       	st	Z, r24
	
	return 0;
	
}
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	08 95       	ret

0000095c <oled_goto_line>:


int oled_goto_line(uint8_t line) {
	
	//Set the global variable page 
	page = line;
     95c:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <page>

	//Set lower column address
	*oled_command = 0x00;
     960:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     964:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     968:	10 82       	st	Z, r1
	
	//Set higher column address
	*oled_command = 0x10;
     96a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     96e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     972:	90 e1       	ldi	r25, 0x10	; 16
     974:	90 83       	st	Z, r25
	
	//Set page address
	*oled_command = 0xB0 + line;
     976:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     97a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     97e:	80 55       	subi	r24, 0x50	; 80
     980:	80 83       	st	Z, r24

	return 0;
}
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	08 95       	ret

00000988 <oled_clear_line>:

// Function to clear a line on oled
int oled_clear_line(uint8_t line) {

	// Go to line to be cleared
	oled_goto_line(line);
     988:	0e 94 ae 04 	call	0x95c	; 0x95c <oled_goto_line>
     98c:	80 e8       	ldi	r24, 0x80	; 128
     98e:	90 e0       	ldi	r25, 0x00	; 0
	
	//Clear the line
	for (int i = 0; i < 128; i++) {
		*oled_data=0x00;
     990:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_data>
     994:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_data+0x1>
     998:	10 82       	st	Z, r1
     99a:	01 97       	sbiw	r24, 0x01	; 1

	// Go to line to be cleared
	oled_goto_line(line);
	
	//Clear the line
	for (int i = 0; i < 128; i++) {
     99c:	c9 f7       	brne	.-14     	; 0x990 <oled_clear_line+0x8>
		*oled_data=0x00;
	}
	
	// Set cursor to the start of the screen
	oled_home();
     99e:	0e 94 85 04 	call	0x90a	; 0x90a <oled_home>

	return 0;

}
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	08 95       	ret

000009a8 <oled_reset>:
	return 0;
	
}

// Function to reset every line
int oled_reset(void) {
     9a8:	cf 93       	push	r28
     9aa:	c0 e0       	ldi	r28, 0x00	; 0

	int line = 8;
	
	// Clear every line
	for (uint8_t i = 0; i < line; i++) {
		oled_clear_line(i);
     9ac:	8c 2f       	mov	r24, r28
     9ae:	0e 94 c4 04 	call	0x988	; 0x988 <oled_clear_line>
int oled_reset(void) {

	int line = 8;
	
	// Clear every line
	for (uint8_t i = 0; i < line; i++) {
     9b2:	cf 5f       	subi	r28, 0xFF	; 255
     9b4:	c8 30       	cpi	r28, 0x08	; 8
     9b6:	d1 f7       	brne	.-12     	; 0x9ac <oled_reset+0x4>
		oled_clear_line(i);
	}
	return 0;
}
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	cf 91       	pop	r28
     9be:	08 95       	ret

000009c0 <oled_init>:


void oled_init(void){
	
	// Enable external memory
	MCUCR |= (1 << SRE);
     9c0:	85 b7       	in	r24, 0x35	; 53
     9c2:	80 68       	ori	r24, 0x80	; 128
     9c4:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     9c6:	80 b7       	in	r24, 0x30	; 48
     9c8:	80 62       	ori	r24, 0x20	; 32
     9ca:	80 bf       	out	0x30, r24	; 48
	
	// Display off
	*oled_command = 0xAE;
     9cc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     9d0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     9d4:	8e ea       	ldi	r24, 0xAE	; 174
     9d6:	80 83       	st	Z, r24
	
	//Segment remap
	*oled_command = 0xA1;
     9d8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     9dc:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     9e0:	81 ea       	ldi	r24, 0xA1	; 161
     9e2:	80 83       	st	Z, r24
	
	//Common pads hardware: alternative
	*oled_command = 0xDA;
     9e4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     9e8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     9ec:	8a ed       	ldi	r24, 0xDA	; 218
     9ee:	80 83       	st	Z, r24
	*oled_command = 0x12;
     9f0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     9f4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     9f8:	82 e1       	ldi	r24, 0x12	; 18
     9fa:	80 83       	st	Z, r24
	
	// Common output scan direction: com63~com0
	*oled_command = 0xC8;
     9fc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     a00:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     a04:	88 ec       	ldi	r24, 0xC8	; 200
     a06:	80 83       	st	Z, r24
	
	// Mulitplex ration mode: 63
	*oled_command = 0xA8;
     a08:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     a0c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     a10:	88 ea       	ldi	r24, 0xA8	; 168
     a12:	80 83       	st	Z, r24
	*oled_command = 0x3F;
     a14:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     a18:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     a1c:	8f e3       	ldi	r24, 0x3F	; 63
     a1e:	80 83       	st	Z, r24
	
	// Display divide ratio/osc. freq. mode
	*oled_command = 0xD5;
     a20:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     a24:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     a28:	85 ed       	ldi	r24, 0xD5	; 213
     a2a:	80 83       	st	Z, r24
	*oled_command = 0x80;
     a2c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     a30:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     a34:	80 e8       	ldi	r24, 0x80	; 128
     a36:	80 83       	st	Z, r24
	
	// Contrast control
	*oled_command = 0x81;
     a38:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     a3c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     a40:	81 e8       	ldi	r24, 0x81	; 129
     a42:	80 83       	st	Z, r24
	*oled_command = 0x50;
     a44:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     a48:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     a4c:	80 e5       	ldi	r24, 0x50	; 80
     a4e:	80 83       	st	Z, r24
	
	// Set pre-charged period
	*oled_command = 0xD9;
     a50:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     a54:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     a58:	89 ed       	ldi	r24, 0xD9	; 217
     a5a:	80 83       	st	Z, r24
	*oled_command = 0x21;
     a5c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     a60:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     a64:	81 e2       	ldi	r24, 0x21	; 33
     a66:	80 83       	st	Z, r24
	
	// Set Memory Adressing mode
	*oled_command = 0x20;
     a68:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     a6c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     a70:	80 e2       	ldi	r24, 0x20	; 32
     a72:	80 83       	st	Z, r24
	*oled_command = 0x02;
     a74:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     a78:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	80 83       	st	Z, r24
	
	// VCOM deselect level mode
	*oled_command = 0xDB;
     a80:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     a84:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     a88:	8b ed       	ldi	r24, 0xDB	; 219
     a8a:	80 83       	st	Z, r24
	*oled_command = 0x30;
     a8c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     a90:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     a94:	80 e3       	ldi	r24, 0x30	; 48
     a96:	80 83       	st	Z, r24
	
	// Master configuration 
	*oled_command = 0xAD;
     a98:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     a9c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     aa0:	8d ea       	ldi	r24, 0xAD	; 173
     aa2:	80 83       	st	Z, r24
	*oled_command = 0x00;
     aa4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     aa8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     aac:	10 82       	st	Z, r1
	
	// Out follows RAM content
	*oled_command = 0xA4;
     aae:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     ab2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     ab6:	84 ea       	ldi	r24, 0xA4	; 164
     ab8:	80 83       	st	Z, r24
	
	// Set normal display 
	*oled_command = 0xA6;
     aba:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     abe:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     ac2:	86 ea       	ldi	r24, 0xA6	; 166
     ac4:	80 83       	st	Z, r24
	
	// Display On
	*oled_command = 0xAF;
     ac6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     aca:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     ace:	8f ea       	ldi	r24, 0xAF	; 175
     ad0:	80 83       	st	Z, r24
	
	//Set page start address
	*oled_command = 0xB0;
     ad2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     ad6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     ada:	80 eb       	ldi	r24, 0xB0	; 176
     adc:	80 83       	st	Z, r24
	
	//Set lower column start address
	*oled_command = 0x00;
     ade:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     ae2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     ae6:	10 82       	st	Z, r1
	
	//Set higher column start address
	*oled_command = 0x10;
     ae8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     aec:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     af0:	80 e1       	ldi	r24, 0x10	; 16
     af2:	80 83       	st	Z, r24
	
	// Clear screen
	oled_reset();
     af4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <oled_reset>

	// Set cursor to the start of the screen
	oled_home();
     af8:	0e 94 85 04 	call	0x90a	; 0x90a <oled_home>
     afc:	08 95       	ret

00000afe <oled_pos>:
	*oled_command = 0xB0 + line;

	return 0;
}

int oled_pos(uint8_t line, uint8_t column) {
     afe:	cf 93       	push	r28
     b00:	c6 2f       	mov	r28, r22
	
	// Go to line
	oled_goto_line(line);
     b02:	0e 94 ae 04 	call	0x95c	; 0x95c <oled_goto_line>
	
	//Set the global variable col
	col = column;
     b06:	c0 93 e8 01 	sts	0x01E8, r28	; 0x8001e8 <col>

	//Set lower column start address
	*oled_command = 0x00 + ((column*FONTWIDTH)>>4);
     b0a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     b0e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     b12:	6c 2f       	mov	r22, r28
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	76 95       	lsr	r23
     b18:	67 95       	ror	r22
     b1a:	60 83       	st	Z, r22
		
	//Set higher column start address
	*oled_command = 0x10 + ((column*FONTWIDTH)>>4);
     b1c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     b20:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     b24:	60 5f       	subi	r22, 0xF0	; 240
     b26:	60 83       	st	Z, r22
	
	return 0;
}
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	cf 91       	pop	r28
     b2e:	08 95       	ret

00000b30 <SRAM_init>:
#include <stdint.h>

void SRAM_init(void){
	
	// Enable external memoy
	MCUCR |= (1 << SRE);
     b30:	85 b7       	in	r24, 0x35	; 53
     b32:	80 68       	ori	r24, 0x80	; 128
     b34:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     b36:	80 b7       	in	r24, 0x30	; 48
     b38:	80 62       	ori	r24, 0x20	; 32
     b3a:	80 bf       	out	0x30, r24	; 48
     b3c:	08 95       	ret

00000b3e <USART_transmit>:
}

void USART_transmit(unsigned char data){
	
	// Wait for empty transmit buffer 
	while(!(UCSR0A & (1<<UDRE0)));
     b3e:	5d 9b       	sbis	0x0b, 5	; 11
     b40:	fe cf       	rjmp	.-4      	; 0xb3e <USART_transmit>
	
	// Put data in buffer
	UDR0 = data;
     b42:	8c b9       	out	0x0c, r24	; 12
     b44:	08 95       	ret

00000b46 <USART_receive>:
}

int USART_receive(void){
	
	// Wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));
     b46:	5f 9b       	sbis	0x0b, 7	; 11
     b48:	fe cf       	rjmp	.-4      	; 0xb46 <USART_receive>

	// Return data
	return UDR0;
     b4a:	8c b1       	in	r24, 0x0c	; 12
}
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	08 95       	ret

00000b50 <USART_init>:
#define set_bit(reg, bit) (reg |= (1<< bit))

void USART_init(unsigned int ubrr){
	
	// Set baud rate 
	UBRR0H = (unsigned char)(ubrr>>8);
     b50:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;			
     b52:	89 b9       	out	0x09, r24	; 9
	
	// Enable RX0 and TX0
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     b54:	88 e1       	ldi	r24, 0x18	; 24
     b56:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format: 8data, 2stop bit 
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     b58:	8e e8       	ldi	r24, 0x8E	; 142
     b5a:	80 bd       	out	0x20, r24	; 32

	// Connect printf to putty
	fdevopen(USART_transmit, USART_receive);
     b5c:	63 ea       	ldi	r22, 0xA3	; 163
     b5e:	75 e0       	ldi	r23, 0x05	; 5
     b60:	8f e9       	ldi	r24, 0x9F	; 159
     b62:	95 e0       	ldi	r25, 0x05	; 5
     b64:	0e 94 b5 05 	call	0xb6a	; 0xb6a <fdevopen>
     b68:	08 95       	ret

00000b6a <fdevopen>:
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	00 97       	sbiw	r24, 0x00	; 0
     b74:	31 f4       	brne	.+12     	; 0xb82 <fdevopen+0x18>
     b76:	61 15       	cp	r22, r1
     b78:	71 05       	cpc	r23, r1
     b7a:	19 f4       	brne	.+6      	; 0xb82 <fdevopen+0x18>
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	3a c0       	rjmp	.+116    	; 0xbf6 <fdevopen+0x8c>
     b82:	8b 01       	movw	r16, r22
     b84:	ec 01       	movw	r28, r24
     b86:	6e e0       	ldi	r22, 0x0E	; 14
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 f7 07 	call	0xfee	; 0xfee <calloc>
     b92:	fc 01       	movw	r30, r24
     b94:	89 2b       	or	r24, r25
     b96:	91 f3       	breq	.-28     	; 0xb7c <fdevopen+0x12>
     b98:	80 e8       	ldi	r24, 0x80	; 128
     b9a:	83 83       	std	Z+3, r24	; 0x03
     b9c:	01 15       	cp	r16, r1
     b9e:	11 05       	cpc	r17, r1
     ba0:	71 f0       	breq	.+28     	; 0xbbe <fdevopen+0x54>
     ba2:	13 87       	std	Z+11, r17	; 0x0b
     ba4:	02 87       	std	Z+10, r16	; 0x0a
     ba6:	81 e8       	ldi	r24, 0x81	; 129
     ba8:	83 83       	std	Z+3, r24	; 0x03
     baa:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <__iob>
     bae:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <__iob+0x1>
     bb2:	89 2b       	or	r24, r25
     bb4:	21 f4       	brne	.+8      	; 0xbbe <fdevopen+0x54>
     bb6:	f0 93 eb 01 	sts	0x01EB, r31	; 0x8001eb <__iob+0x1>
     bba:	e0 93 ea 01 	sts	0x01EA, r30	; 0x8001ea <__iob>
     bbe:	20 97       	sbiw	r28, 0x00	; 0
     bc0:	c9 f0       	breq	.+50     	; 0xbf4 <fdevopen+0x8a>
     bc2:	d1 87       	std	Z+9, r29	; 0x09
     bc4:	c0 87       	std	Z+8, r28	; 0x08
     bc6:	83 81       	ldd	r24, Z+3	; 0x03
     bc8:	82 60       	ori	r24, 0x02	; 2
     bca:	83 83       	std	Z+3, r24	; 0x03
     bcc:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__iob+0x2>
     bd0:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <__iob+0x3>
     bd4:	89 2b       	or	r24, r25
     bd6:	71 f4       	brne	.+28     	; 0xbf4 <fdevopen+0x8a>
     bd8:	f0 93 ed 01 	sts	0x01ED, r31	; 0x8001ed <__iob+0x3>
     bdc:	e0 93 ec 01 	sts	0x01EC, r30	; 0x8001ec <__iob+0x2>
     be0:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <__iob+0x4>
     be4:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <__iob+0x5>
     be8:	89 2b       	or	r24, r25
     bea:	21 f4       	brne	.+8      	; 0xbf4 <fdevopen+0x8a>
     bec:	f0 93 ef 01 	sts	0x01EF, r31	; 0x8001ef <__iob+0x5>
     bf0:	e0 93 ee 01 	sts	0x01EE, r30	; 0x8001ee <__iob+0x4>
     bf4:	cf 01       	movw	r24, r30
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	08 95       	ret

00000c00 <printf>:
     c00:	a0 e0       	ldi	r26, 0x00	; 0
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e6 e0       	ldi	r30, 0x06	; 6
     c06:	f6 e0       	ldi	r31, 0x06	; 6
     c08:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__prologue_saves__+0x20>
     c0c:	ae 01       	movw	r20, r28
     c0e:	4b 5f       	subi	r20, 0xFB	; 251
     c10:	5f 4f       	sbci	r21, 0xFF	; 255
     c12:	fa 01       	movw	r30, r20
     c14:	61 91       	ld	r22, Z+
     c16:	71 91       	ld	r23, Z+
     c18:	af 01       	movw	r20, r30
     c1a:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__iob+0x2>
     c1e:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <__iob+0x3>
     c22:	0e 94 16 06 	call	0xc2c	; 0xc2c <vfprintf>
     c26:	e2 e0       	ldi	r30, 0x02	; 2
     c28:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__epilogue_restores__+0x20>

00000c2c <vfprintf>:
     c2c:	ab e0       	ldi	r26, 0x0B	; 11
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	ec e1       	ldi	r30, 0x1C	; 28
     c32:	f6 e0       	ldi	r31, 0x06	; 6
     c34:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__prologue_saves__>
     c38:	6c 01       	movw	r12, r24
     c3a:	7b 01       	movw	r14, r22
     c3c:	8a 01       	movw	r16, r20
     c3e:	fc 01       	movw	r30, r24
     c40:	17 82       	std	Z+7, r1	; 0x07
     c42:	16 82       	std	Z+6, r1	; 0x06
     c44:	83 81       	ldd	r24, Z+3	; 0x03
     c46:	81 ff       	sbrs	r24, 1
     c48:	cc c1       	rjmp	.+920    	; 0xfe2 <vfprintf+0x3b6>
     c4a:	ce 01       	movw	r24, r28
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	3c 01       	movw	r6, r24
     c50:	f6 01       	movw	r30, r12
     c52:	93 81       	ldd	r25, Z+3	; 0x03
     c54:	f7 01       	movw	r30, r14
     c56:	93 fd       	sbrc	r25, 3
     c58:	85 91       	lpm	r24, Z+
     c5a:	93 ff       	sbrs	r25, 3
     c5c:	81 91       	ld	r24, Z+
     c5e:	7f 01       	movw	r14, r30
     c60:	88 23       	and	r24, r24
     c62:	09 f4       	brne	.+2      	; 0xc66 <vfprintf+0x3a>
     c64:	ba c1       	rjmp	.+884    	; 0xfda <vfprintf+0x3ae>
     c66:	85 32       	cpi	r24, 0x25	; 37
     c68:	39 f4       	brne	.+14     	; 0xc78 <vfprintf+0x4c>
     c6a:	93 fd       	sbrc	r25, 3
     c6c:	85 91       	lpm	r24, Z+
     c6e:	93 ff       	sbrs	r25, 3
     c70:	81 91       	ld	r24, Z+
     c72:	7f 01       	movw	r14, r30
     c74:	85 32       	cpi	r24, 0x25	; 37
     c76:	29 f4       	brne	.+10     	; 0xc82 <vfprintf+0x56>
     c78:	b6 01       	movw	r22, r12
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <fputc>
     c80:	e7 cf       	rjmp	.-50     	; 0xc50 <vfprintf+0x24>
     c82:	91 2c       	mov	r9, r1
     c84:	21 2c       	mov	r2, r1
     c86:	31 2c       	mov	r3, r1
     c88:	ff e1       	ldi	r31, 0x1F	; 31
     c8a:	f3 15       	cp	r31, r3
     c8c:	d8 f0       	brcs	.+54     	; 0xcc4 <vfprintf+0x98>
     c8e:	8b 32       	cpi	r24, 0x2B	; 43
     c90:	79 f0       	breq	.+30     	; 0xcb0 <vfprintf+0x84>
     c92:	38 f4       	brcc	.+14     	; 0xca2 <vfprintf+0x76>
     c94:	80 32       	cpi	r24, 0x20	; 32
     c96:	79 f0       	breq	.+30     	; 0xcb6 <vfprintf+0x8a>
     c98:	83 32       	cpi	r24, 0x23	; 35
     c9a:	a1 f4       	brne	.+40     	; 0xcc4 <vfprintf+0x98>
     c9c:	23 2d       	mov	r18, r3
     c9e:	20 61       	ori	r18, 0x10	; 16
     ca0:	1d c0       	rjmp	.+58     	; 0xcdc <vfprintf+0xb0>
     ca2:	8d 32       	cpi	r24, 0x2D	; 45
     ca4:	61 f0       	breq	.+24     	; 0xcbe <vfprintf+0x92>
     ca6:	80 33       	cpi	r24, 0x30	; 48
     ca8:	69 f4       	brne	.+26     	; 0xcc4 <vfprintf+0x98>
     caa:	23 2d       	mov	r18, r3
     cac:	21 60       	ori	r18, 0x01	; 1
     cae:	16 c0       	rjmp	.+44     	; 0xcdc <vfprintf+0xb0>
     cb0:	83 2d       	mov	r24, r3
     cb2:	82 60       	ori	r24, 0x02	; 2
     cb4:	38 2e       	mov	r3, r24
     cb6:	e3 2d       	mov	r30, r3
     cb8:	e4 60       	ori	r30, 0x04	; 4
     cba:	3e 2e       	mov	r3, r30
     cbc:	2a c0       	rjmp	.+84     	; 0xd12 <vfprintf+0xe6>
     cbe:	f3 2d       	mov	r31, r3
     cc0:	f8 60       	ori	r31, 0x08	; 8
     cc2:	1d c0       	rjmp	.+58     	; 0xcfe <vfprintf+0xd2>
     cc4:	37 fc       	sbrc	r3, 7
     cc6:	2d c0       	rjmp	.+90     	; 0xd22 <vfprintf+0xf6>
     cc8:	20 ed       	ldi	r18, 0xD0	; 208
     cca:	28 0f       	add	r18, r24
     ccc:	2a 30       	cpi	r18, 0x0A	; 10
     cce:	40 f0       	brcs	.+16     	; 0xce0 <vfprintf+0xb4>
     cd0:	8e 32       	cpi	r24, 0x2E	; 46
     cd2:	b9 f4       	brne	.+46     	; 0xd02 <vfprintf+0xd6>
     cd4:	36 fc       	sbrc	r3, 6
     cd6:	81 c1       	rjmp	.+770    	; 0xfda <vfprintf+0x3ae>
     cd8:	23 2d       	mov	r18, r3
     cda:	20 64       	ori	r18, 0x40	; 64
     cdc:	32 2e       	mov	r3, r18
     cde:	19 c0       	rjmp	.+50     	; 0xd12 <vfprintf+0xe6>
     ce0:	36 fe       	sbrs	r3, 6
     ce2:	06 c0       	rjmp	.+12     	; 0xcf0 <vfprintf+0xc4>
     ce4:	8a e0       	ldi	r24, 0x0A	; 10
     ce6:	98 9e       	mul	r9, r24
     ce8:	20 0d       	add	r18, r0
     cea:	11 24       	eor	r1, r1
     cec:	92 2e       	mov	r9, r18
     cee:	11 c0       	rjmp	.+34     	; 0xd12 <vfprintf+0xe6>
     cf0:	ea e0       	ldi	r30, 0x0A	; 10
     cf2:	2e 9e       	mul	r2, r30
     cf4:	20 0d       	add	r18, r0
     cf6:	11 24       	eor	r1, r1
     cf8:	22 2e       	mov	r2, r18
     cfa:	f3 2d       	mov	r31, r3
     cfc:	f0 62       	ori	r31, 0x20	; 32
     cfe:	3f 2e       	mov	r3, r31
     d00:	08 c0       	rjmp	.+16     	; 0xd12 <vfprintf+0xe6>
     d02:	8c 36       	cpi	r24, 0x6C	; 108
     d04:	21 f4       	brne	.+8      	; 0xd0e <vfprintf+0xe2>
     d06:	83 2d       	mov	r24, r3
     d08:	80 68       	ori	r24, 0x80	; 128
     d0a:	38 2e       	mov	r3, r24
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <vfprintf+0xe6>
     d0e:	88 36       	cpi	r24, 0x68	; 104
     d10:	41 f4       	brne	.+16     	; 0xd22 <vfprintf+0xf6>
     d12:	f7 01       	movw	r30, r14
     d14:	93 fd       	sbrc	r25, 3
     d16:	85 91       	lpm	r24, Z+
     d18:	93 ff       	sbrs	r25, 3
     d1a:	81 91       	ld	r24, Z+
     d1c:	7f 01       	movw	r14, r30
     d1e:	81 11       	cpse	r24, r1
     d20:	b3 cf       	rjmp	.-154    	; 0xc88 <vfprintf+0x5c>
     d22:	98 2f       	mov	r25, r24
     d24:	9f 7d       	andi	r25, 0xDF	; 223
     d26:	95 54       	subi	r25, 0x45	; 69
     d28:	93 30       	cpi	r25, 0x03	; 3
     d2a:	28 f4       	brcc	.+10     	; 0xd36 <vfprintf+0x10a>
     d2c:	0c 5f       	subi	r16, 0xFC	; 252
     d2e:	1f 4f       	sbci	r17, 0xFF	; 255
     d30:	9f e3       	ldi	r25, 0x3F	; 63
     d32:	99 83       	std	Y+1, r25	; 0x01
     d34:	0d c0       	rjmp	.+26     	; 0xd50 <vfprintf+0x124>
     d36:	83 36       	cpi	r24, 0x63	; 99
     d38:	31 f0       	breq	.+12     	; 0xd46 <vfprintf+0x11a>
     d3a:	83 37       	cpi	r24, 0x73	; 115
     d3c:	71 f0       	breq	.+28     	; 0xd5a <vfprintf+0x12e>
     d3e:	83 35       	cpi	r24, 0x53	; 83
     d40:	09 f0       	breq	.+2      	; 0xd44 <vfprintf+0x118>
     d42:	59 c0       	rjmp	.+178    	; 0xdf6 <vfprintf+0x1ca>
     d44:	21 c0       	rjmp	.+66     	; 0xd88 <vfprintf+0x15c>
     d46:	f8 01       	movw	r30, r16
     d48:	80 81       	ld	r24, Z
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	0e 5f       	subi	r16, 0xFE	; 254
     d4e:	1f 4f       	sbci	r17, 0xFF	; 255
     d50:	88 24       	eor	r8, r8
     d52:	83 94       	inc	r8
     d54:	91 2c       	mov	r9, r1
     d56:	53 01       	movw	r10, r6
     d58:	13 c0       	rjmp	.+38     	; 0xd80 <vfprintf+0x154>
     d5a:	28 01       	movw	r4, r16
     d5c:	f2 e0       	ldi	r31, 0x02	; 2
     d5e:	4f 0e       	add	r4, r31
     d60:	51 1c       	adc	r5, r1
     d62:	f8 01       	movw	r30, r16
     d64:	a0 80       	ld	r10, Z
     d66:	b1 80       	ldd	r11, Z+1	; 0x01
     d68:	36 fe       	sbrs	r3, 6
     d6a:	03 c0       	rjmp	.+6      	; 0xd72 <vfprintf+0x146>
     d6c:	69 2d       	mov	r22, r9
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <vfprintf+0x14a>
     d72:	6f ef       	ldi	r22, 0xFF	; 255
     d74:	7f ef       	ldi	r23, 0xFF	; 255
     d76:	c5 01       	movw	r24, r10
     d78:	0e 94 46 09 	call	0x128c	; 0x128c <strnlen>
     d7c:	4c 01       	movw	r8, r24
     d7e:	82 01       	movw	r16, r4
     d80:	f3 2d       	mov	r31, r3
     d82:	ff 77       	andi	r31, 0x7F	; 127
     d84:	3f 2e       	mov	r3, r31
     d86:	16 c0       	rjmp	.+44     	; 0xdb4 <vfprintf+0x188>
     d88:	28 01       	movw	r4, r16
     d8a:	22 e0       	ldi	r18, 0x02	; 2
     d8c:	42 0e       	add	r4, r18
     d8e:	51 1c       	adc	r5, r1
     d90:	f8 01       	movw	r30, r16
     d92:	a0 80       	ld	r10, Z
     d94:	b1 80       	ldd	r11, Z+1	; 0x01
     d96:	36 fe       	sbrs	r3, 6
     d98:	03 c0       	rjmp	.+6      	; 0xda0 <vfprintf+0x174>
     d9a:	69 2d       	mov	r22, r9
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <vfprintf+0x178>
     da0:	6f ef       	ldi	r22, 0xFF	; 255
     da2:	7f ef       	ldi	r23, 0xFF	; 255
     da4:	c5 01       	movw	r24, r10
     da6:	0e 94 34 09 	call	0x1268	; 0x1268 <strnlen_P>
     daa:	4c 01       	movw	r8, r24
     dac:	f3 2d       	mov	r31, r3
     dae:	f0 68       	ori	r31, 0x80	; 128
     db0:	3f 2e       	mov	r3, r31
     db2:	82 01       	movw	r16, r4
     db4:	33 fc       	sbrc	r3, 3
     db6:	1b c0       	rjmp	.+54     	; 0xdee <vfprintf+0x1c2>
     db8:	82 2d       	mov	r24, r2
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	88 16       	cp	r8, r24
     dbe:	99 06       	cpc	r9, r25
     dc0:	b0 f4       	brcc	.+44     	; 0xdee <vfprintf+0x1c2>
     dc2:	b6 01       	movw	r22, r12
     dc4:	80 e2       	ldi	r24, 0x20	; 32
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <fputc>
     dcc:	2a 94       	dec	r2
     dce:	f4 cf       	rjmp	.-24     	; 0xdb8 <vfprintf+0x18c>
     dd0:	f5 01       	movw	r30, r10
     dd2:	37 fc       	sbrc	r3, 7
     dd4:	85 91       	lpm	r24, Z+
     dd6:	37 fe       	sbrs	r3, 7
     dd8:	81 91       	ld	r24, Z+
     dda:	5f 01       	movw	r10, r30
     ddc:	b6 01       	movw	r22, r12
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <fputc>
     de4:	21 10       	cpse	r2, r1
     de6:	2a 94       	dec	r2
     de8:	21 e0       	ldi	r18, 0x01	; 1
     dea:	82 1a       	sub	r8, r18
     dec:	91 08       	sbc	r9, r1
     dee:	81 14       	cp	r8, r1
     df0:	91 04       	cpc	r9, r1
     df2:	71 f7       	brne	.-36     	; 0xdd0 <vfprintf+0x1a4>
     df4:	e8 c0       	rjmp	.+464    	; 0xfc6 <vfprintf+0x39a>
     df6:	84 36       	cpi	r24, 0x64	; 100
     df8:	11 f0       	breq	.+4      	; 0xdfe <vfprintf+0x1d2>
     dfa:	89 36       	cpi	r24, 0x69	; 105
     dfc:	41 f5       	brne	.+80     	; 0xe4e <vfprintf+0x222>
     dfe:	f8 01       	movw	r30, r16
     e00:	37 fe       	sbrs	r3, 7
     e02:	07 c0       	rjmp	.+14     	; 0xe12 <vfprintf+0x1e6>
     e04:	60 81       	ld	r22, Z
     e06:	71 81       	ldd	r23, Z+1	; 0x01
     e08:	82 81       	ldd	r24, Z+2	; 0x02
     e0a:	93 81       	ldd	r25, Z+3	; 0x03
     e0c:	0c 5f       	subi	r16, 0xFC	; 252
     e0e:	1f 4f       	sbci	r17, 0xFF	; 255
     e10:	08 c0       	rjmp	.+16     	; 0xe22 <vfprintf+0x1f6>
     e12:	60 81       	ld	r22, Z
     e14:	71 81       	ldd	r23, Z+1	; 0x01
     e16:	07 2e       	mov	r0, r23
     e18:	00 0c       	add	r0, r0
     e1a:	88 0b       	sbc	r24, r24
     e1c:	99 0b       	sbc	r25, r25
     e1e:	0e 5f       	subi	r16, 0xFE	; 254
     e20:	1f 4f       	sbci	r17, 0xFF	; 255
     e22:	f3 2d       	mov	r31, r3
     e24:	ff 76       	andi	r31, 0x6F	; 111
     e26:	3f 2e       	mov	r3, r31
     e28:	97 ff       	sbrs	r25, 7
     e2a:	09 c0       	rjmp	.+18     	; 0xe3e <vfprintf+0x212>
     e2c:	90 95       	com	r25
     e2e:	80 95       	com	r24
     e30:	70 95       	com	r23
     e32:	61 95       	neg	r22
     e34:	7f 4f       	sbci	r23, 0xFF	; 255
     e36:	8f 4f       	sbci	r24, 0xFF	; 255
     e38:	9f 4f       	sbci	r25, 0xFF	; 255
     e3a:	f0 68       	ori	r31, 0x80	; 128
     e3c:	3f 2e       	mov	r3, r31
     e3e:	2a e0       	ldi	r18, 0x0A	; 10
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	a3 01       	movw	r20, r6
     e44:	0e 94 8d 09 	call	0x131a	; 0x131a <__ultoa_invert>
     e48:	88 2e       	mov	r8, r24
     e4a:	86 18       	sub	r8, r6
     e4c:	45 c0       	rjmp	.+138    	; 0xed8 <vfprintf+0x2ac>
     e4e:	85 37       	cpi	r24, 0x75	; 117
     e50:	31 f4       	brne	.+12     	; 0xe5e <vfprintf+0x232>
     e52:	23 2d       	mov	r18, r3
     e54:	2f 7e       	andi	r18, 0xEF	; 239
     e56:	b2 2e       	mov	r11, r18
     e58:	2a e0       	ldi	r18, 0x0A	; 10
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	25 c0       	rjmp	.+74     	; 0xea8 <vfprintf+0x27c>
     e5e:	93 2d       	mov	r25, r3
     e60:	99 7f       	andi	r25, 0xF9	; 249
     e62:	b9 2e       	mov	r11, r25
     e64:	8f 36       	cpi	r24, 0x6F	; 111
     e66:	c1 f0       	breq	.+48     	; 0xe98 <vfprintf+0x26c>
     e68:	18 f4       	brcc	.+6      	; 0xe70 <vfprintf+0x244>
     e6a:	88 35       	cpi	r24, 0x58	; 88
     e6c:	79 f0       	breq	.+30     	; 0xe8c <vfprintf+0x260>
     e6e:	b5 c0       	rjmp	.+362    	; 0xfda <vfprintf+0x3ae>
     e70:	80 37       	cpi	r24, 0x70	; 112
     e72:	19 f0       	breq	.+6      	; 0xe7a <vfprintf+0x24e>
     e74:	88 37       	cpi	r24, 0x78	; 120
     e76:	21 f0       	breq	.+8      	; 0xe80 <vfprintf+0x254>
     e78:	b0 c0       	rjmp	.+352    	; 0xfda <vfprintf+0x3ae>
     e7a:	e9 2f       	mov	r30, r25
     e7c:	e0 61       	ori	r30, 0x10	; 16
     e7e:	be 2e       	mov	r11, r30
     e80:	b4 fe       	sbrs	r11, 4
     e82:	0d c0       	rjmp	.+26     	; 0xe9e <vfprintf+0x272>
     e84:	fb 2d       	mov	r31, r11
     e86:	f4 60       	ori	r31, 0x04	; 4
     e88:	bf 2e       	mov	r11, r31
     e8a:	09 c0       	rjmp	.+18     	; 0xe9e <vfprintf+0x272>
     e8c:	34 fe       	sbrs	r3, 4
     e8e:	0a c0       	rjmp	.+20     	; 0xea4 <vfprintf+0x278>
     e90:	29 2f       	mov	r18, r25
     e92:	26 60       	ori	r18, 0x06	; 6
     e94:	b2 2e       	mov	r11, r18
     e96:	06 c0       	rjmp	.+12     	; 0xea4 <vfprintf+0x278>
     e98:	28 e0       	ldi	r18, 0x08	; 8
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	05 c0       	rjmp	.+10     	; 0xea8 <vfprintf+0x27c>
     e9e:	20 e1       	ldi	r18, 0x10	; 16
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <vfprintf+0x27c>
     ea4:	20 e1       	ldi	r18, 0x10	; 16
     ea6:	32 e0       	ldi	r19, 0x02	; 2
     ea8:	f8 01       	movw	r30, r16
     eaa:	b7 fe       	sbrs	r11, 7
     eac:	07 c0       	rjmp	.+14     	; 0xebc <vfprintf+0x290>
     eae:	60 81       	ld	r22, Z
     eb0:	71 81       	ldd	r23, Z+1	; 0x01
     eb2:	82 81       	ldd	r24, Z+2	; 0x02
     eb4:	93 81       	ldd	r25, Z+3	; 0x03
     eb6:	0c 5f       	subi	r16, 0xFC	; 252
     eb8:	1f 4f       	sbci	r17, 0xFF	; 255
     eba:	06 c0       	rjmp	.+12     	; 0xec8 <vfprintf+0x29c>
     ebc:	60 81       	ld	r22, Z
     ebe:	71 81       	ldd	r23, Z+1	; 0x01
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 5f       	subi	r16, 0xFE	; 254
     ec6:	1f 4f       	sbci	r17, 0xFF	; 255
     ec8:	a3 01       	movw	r20, r6
     eca:	0e 94 8d 09 	call	0x131a	; 0x131a <__ultoa_invert>
     ece:	88 2e       	mov	r8, r24
     ed0:	86 18       	sub	r8, r6
     ed2:	fb 2d       	mov	r31, r11
     ed4:	ff 77       	andi	r31, 0x7F	; 127
     ed6:	3f 2e       	mov	r3, r31
     ed8:	36 fe       	sbrs	r3, 6
     eda:	0d c0       	rjmp	.+26     	; 0xef6 <vfprintf+0x2ca>
     edc:	23 2d       	mov	r18, r3
     ede:	2e 7f       	andi	r18, 0xFE	; 254
     ee0:	a2 2e       	mov	r10, r18
     ee2:	89 14       	cp	r8, r9
     ee4:	58 f4       	brcc	.+22     	; 0xefc <vfprintf+0x2d0>
     ee6:	34 fe       	sbrs	r3, 4
     ee8:	0b c0       	rjmp	.+22     	; 0xf00 <vfprintf+0x2d4>
     eea:	32 fc       	sbrc	r3, 2
     eec:	09 c0       	rjmp	.+18     	; 0xf00 <vfprintf+0x2d4>
     eee:	83 2d       	mov	r24, r3
     ef0:	8e 7e       	andi	r24, 0xEE	; 238
     ef2:	a8 2e       	mov	r10, r24
     ef4:	05 c0       	rjmp	.+10     	; 0xf00 <vfprintf+0x2d4>
     ef6:	b8 2c       	mov	r11, r8
     ef8:	a3 2c       	mov	r10, r3
     efa:	03 c0       	rjmp	.+6      	; 0xf02 <vfprintf+0x2d6>
     efc:	b8 2c       	mov	r11, r8
     efe:	01 c0       	rjmp	.+2      	; 0xf02 <vfprintf+0x2d6>
     f00:	b9 2c       	mov	r11, r9
     f02:	a4 fe       	sbrs	r10, 4
     f04:	0f c0       	rjmp	.+30     	; 0xf24 <vfprintf+0x2f8>
     f06:	fe 01       	movw	r30, r28
     f08:	e8 0d       	add	r30, r8
     f0a:	f1 1d       	adc	r31, r1
     f0c:	80 81       	ld	r24, Z
     f0e:	80 33       	cpi	r24, 0x30	; 48
     f10:	21 f4       	brne	.+8      	; 0xf1a <vfprintf+0x2ee>
     f12:	9a 2d       	mov	r25, r10
     f14:	99 7e       	andi	r25, 0xE9	; 233
     f16:	a9 2e       	mov	r10, r25
     f18:	09 c0       	rjmp	.+18     	; 0xf2c <vfprintf+0x300>
     f1a:	a2 fe       	sbrs	r10, 2
     f1c:	06 c0       	rjmp	.+12     	; 0xf2a <vfprintf+0x2fe>
     f1e:	b3 94       	inc	r11
     f20:	b3 94       	inc	r11
     f22:	04 c0       	rjmp	.+8      	; 0xf2c <vfprintf+0x300>
     f24:	8a 2d       	mov	r24, r10
     f26:	86 78       	andi	r24, 0x86	; 134
     f28:	09 f0       	breq	.+2      	; 0xf2c <vfprintf+0x300>
     f2a:	b3 94       	inc	r11
     f2c:	a3 fc       	sbrc	r10, 3
     f2e:	11 c0       	rjmp	.+34     	; 0xf52 <vfprintf+0x326>
     f30:	a0 fe       	sbrs	r10, 0
     f32:	06 c0       	rjmp	.+12     	; 0xf40 <vfprintf+0x314>
     f34:	b2 14       	cp	r11, r2
     f36:	88 f4       	brcc	.+34     	; 0xf5a <vfprintf+0x32e>
     f38:	28 0c       	add	r2, r8
     f3a:	92 2c       	mov	r9, r2
     f3c:	9b 18       	sub	r9, r11
     f3e:	0e c0       	rjmp	.+28     	; 0xf5c <vfprintf+0x330>
     f40:	b2 14       	cp	r11, r2
     f42:	60 f4       	brcc	.+24     	; 0xf5c <vfprintf+0x330>
     f44:	b6 01       	movw	r22, r12
     f46:	80 e2       	ldi	r24, 0x20	; 32
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <fputc>
     f4e:	b3 94       	inc	r11
     f50:	f7 cf       	rjmp	.-18     	; 0xf40 <vfprintf+0x314>
     f52:	b2 14       	cp	r11, r2
     f54:	18 f4       	brcc	.+6      	; 0xf5c <vfprintf+0x330>
     f56:	2b 18       	sub	r2, r11
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <vfprintf+0x332>
     f5a:	98 2c       	mov	r9, r8
     f5c:	21 2c       	mov	r2, r1
     f5e:	a4 fe       	sbrs	r10, 4
     f60:	10 c0       	rjmp	.+32     	; 0xf82 <vfprintf+0x356>
     f62:	b6 01       	movw	r22, r12
     f64:	80 e3       	ldi	r24, 0x30	; 48
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 51 09 	call	0x12a2	; 0x12a2 <fputc>
     f6c:	a2 fe       	sbrs	r10, 2
     f6e:	17 c0       	rjmp	.+46     	; 0xf9e <vfprintf+0x372>
     f70:	a1 fc       	sbrc	r10, 1
     f72:	03 c0       	rjmp	.+6      	; 0xf7a <vfprintf+0x34e>
     f74:	88 e7       	ldi	r24, 0x78	; 120
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <vfprintf+0x352>
     f7a:	88 e5       	ldi	r24, 0x58	; 88
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	b6 01       	movw	r22, r12
     f80:	0c c0       	rjmp	.+24     	; 0xf9a <vfprintf+0x36e>
     f82:	8a 2d       	mov	r24, r10
     f84:	86 78       	andi	r24, 0x86	; 134
     f86:	59 f0       	breq	.+22     	; 0xf9e <vfprintf+0x372>
     f88:	a1 fe       	sbrs	r10, 1
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <vfprintf+0x364>
     f8c:	8b e2       	ldi	r24, 0x2B	; 43
     f8e:	01 c0       	rjmp	.+2      	; 0xf92 <vfprintf+0x366>
     f90:	80 e2       	ldi	r24, 0x20	; 32
     f92:	a7 fc       	sbrc	r10, 7
     f94:	8d e2       	ldi	r24, 0x2D	; 45
     f96:	b6 01       	movw	r22, r12
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <fputc>
     f9e:	89 14       	cp	r8, r9
     fa0:	38 f4       	brcc	.+14     	; 0xfb0 <vfprintf+0x384>
     fa2:	b6 01       	movw	r22, r12
     fa4:	80 e3       	ldi	r24, 0x30	; 48
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <fputc>
     fac:	9a 94       	dec	r9
     fae:	f7 cf       	rjmp	.-18     	; 0xf9e <vfprintf+0x372>
     fb0:	8a 94       	dec	r8
     fb2:	f3 01       	movw	r30, r6
     fb4:	e8 0d       	add	r30, r8
     fb6:	f1 1d       	adc	r31, r1
     fb8:	80 81       	ld	r24, Z
     fba:	b6 01       	movw	r22, r12
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 51 09 	call	0x12a2	; 0x12a2 <fputc>
     fc2:	81 10       	cpse	r8, r1
     fc4:	f5 cf       	rjmp	.-22     	; 0xfb0 <vfprintf+0x384>
     fc6:	22 20       	and	r2, r2
     fc8:	09 f4       	brne	.+2      	; 0xfcc <vfprintf+0x3a0>
     fca:	42 ce       	rjmp	.-892    	; 0xc50 <vfprintf+0x24>
     fcc:	b6 01       	movw	r22, r12
     fce:	80 e2       	ldi	r24, 0x20	; 32
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	0e 94 51 09 	call	0x12a2	; 0x12a2 <fputc>
     fd6:	2a 94       	dec	r2
     fd8:	f6 cf       	rjmp	.-20     	; 0xfc6 <vfprintf+0x39a>
     fda:	f6 01       	movw	r30, r12
     fdc:	86 81       	ldd	r24, Z+6	; 0x06
     fde:	97 81       	ldd	r25, Z+7	; 0x07
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <vfprintf+0x3ba>
     fe2:	8f ef       	ldi	r24, 0xFF	; 255
     fe4:	9f ef       	ldi	r25, 0xFF	; 255
     fe6:	2b 96       	adiw	r28, 0x0b	; 11
     fe8:	e2 e1       	ldi	r30, 0x12	; 18
     fea:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__epilogue_restores__>

00000fee <calloc>:
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	86 9f       	mul	r24, r22
     ff8:	80 01       	movw	r16, r0
     ffa:	87 9f       	mul	r24, r23
     ffc:	10 0d       	add	r17, r0
     ffe:	96 9f       	mul	r25, r22
    1000:	10 0d       	add	r17, r0
    1002:	11 24       	eor	r1, r1
    1004:	c8 01       	movw	r24, r16
    1006:	0e 94 13 08 	call	0x1026	; 0x1026 <malloc>
    100a:	ec 01       	movw	r28, r24
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	29 f0       	breq	.+10     	; 0x101a <calloc+0x2c>
    1010:	a8 01       	movw	r20, r16
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	0e 94 3f 09 	call	0x127e	; 0x127e <memset>
    101a:	ce 01       	movw	r24, r28
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	08 95       	ret

00001026 <malloc>:
    1026:	0f 93       	push	r16
    1028:	1f 93       	push	r17
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	82 30       	cpi	r24, 0x02	; 2
    1030:	91 05       	cpc	r25, r1
    1032:	10 f4       	brcc	.+4      	; 0x1038 <malloc+0x12>
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <__flp>
    103c:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <__flp+0x1>
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	a0 e0       	ldi	r26, 0x00	; 0
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	30 97       	sbiw	r30, 0x00	; 0
    104a:	19 f1       	breq	.+70     	; 0x1092 <malloc+0x6c>
    104c:	40 81       	ld	r20, Z
    104e:	51 81       	ldd	r21, Z+1	; 0x01
    1050:	02 81       	ldd	r16, Z+2	; 0x02
    1052:	13 81       	ldd	r17, Z+3	; 0x03
    1054:	48 17       	cp	r20, r24
    1056:	59 07       	cpc	r21, r25
    1058:	c8 f0       	brcs	.+50     	; 0x108c <malloc+0x66>
    105a:	84 17       	cp	r24, r20
    105c:	95 07       	cpc	r25, r21
    105e:	69 f4       	brne	.+26     	; 0x107a <malloc+0x54>
    1060:	10 97       	sbiw	r26, 0x00	; 0
    1062:	31 f0       	breq	.+12     	; 0x1070 <malloc+0x4a>
    1064:	12 96       	adiw	r26, 0x02	; 2
    1066:	0c 93       	st	X, r16
    1068:	12 97       	sbiw	r26, 0x02	; 2
    106a:	13 96       	adiw	r26, 0x03	; 3
    106c:	1c 93       	st	X, r17
    106e:	27 c0       	rjmp	.+78     	; 0x10be <malloc+0x98>
    1070:	00 93 f2 01 	sts	0x01F2, r16	; 0x8001f2 <__flp>
    1074:	10 93 f3 01 	sts	0x01F3, r17	; 0x8001f3 <__flp+0x1>
    1078:	22 c0       	rjmp	.+68     	; 0x10be <malloc+0x98>
    107a:	21 15       	cp	r18, r1
    107c:	31 05       	cpc	r19, r1
    107e:	19 f0       	breq	.+6      	; 0x1086 <malloc+0x60>
    1080:	42 17       	cp	r20, r18
    1082:	53 07       	cpc	r21, r19
    1084:	18 f4       	brcc	.+6      	; 0x108c <malloc+0x66>
    1086:	9a 01       	movw	r18, r20
    1088:	bd 01       	movw	r22, r26
    108a:	ef 01       	movw	r28, r30
    108c:	df 01       	movw	r26, r30
    108e:	f8 01       	movw	r30, r16
    1090:	db cf       	rjmp	.-74     	; 0x1048 <malloc+0x22>
    1092:	21 15       	cp	r18, r1
    1094:	31 05       	cpc	r19, r1
    1096:	f9 f0       	breq	.+62     	; 0x10d6 <malloc+0xb0>
    1098:	28 1b       	sub	r18, r24
    109a:	39 0b       	sbc	r19, r25
    109c:	24 30       	cpi	r18, 0x04	; 4
    109e:	31 05       	cpc	r19, r1
    10a0:	80 f4       	brcc	.+32     	; 0x10c2 <malloc+0x9c>
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	9b 81       	ldd	r25, Y+3	; 0x03
    10a6:	61 15       	cp	r22, r1
    10a8:	71 05       	cpc	r23, r1
    10aa:	21 f0       	breq	.+8      	; 0x10b4 <malloc+0x8e>
    10ac:	fb 01       	movw	r30, r22
    10ae:	93 83       	std	Z+3, r25	; 0x03
    10b0:	82 83       	std	Z+2, r24	; 0x02
    10b2:	04 c0       	rjmp	.+8      	; 0x10bc <malloc+0x96>
    10b4:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <__flp+0x1>
    10b8:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <__flp>
    10bc:	fe 01       	movw	r30, r28
    10be:	32 96       	adiw	r30, 0x02	; 2
    10c0:	44 c0       	rjmp	.+136    	; 0x114a <malloc+0x124>
    10c2:	fe 01       	movw	r30, r28
    10c4:	e2 0f       	add	r30, r18
    10c6:	f3 1f       	adc	r31, r19
    10c8:	81 93       	st	Z+, r24
    10ca:	91 93       	st	Z+, r25
    10cc:	22 50       	subi	r18, 0x02	; 2
    10ce:	31 09       	sbc	r19, r1
    10d0:	39 83       	std	Y+1, r19	; 0x01
    10d2:	28 83       	st	Y, r18
    10d4:	3a c0       	rjmp	.+116    	; 0x114a <malloc+0x124>
    10d6:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <__brkval>
    10da:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <__brkval+0x1>
    10de:	23 2b       	or	r18, r19
    10e0:	41 f4       	brne	.+16     	; 0x10f2 <malloc+0xcc>
    10e2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    10e6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    10ea:	30 93 f1 01 	sts	0x01F1, r19	; 0x8001f1 <__brkval+0x1>
    10ee:	20 93 f0 01 	sts	0x01F0, r18	; 0x8001f0 <__brkval>
    10f2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    10f6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    10fa:	21 15       	cp	r18, r1
    10fc:	31 05       	cpc	r19, r1
    10fe:	41 f4       	brne	.+16     	; 0x1110 <malloc+0xea>
    1100:	2d b7       	in	r18, 0x3d	; 61
    1102:	3e b7       	in	r19, 0x3e	; 62
    1104:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1108:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    110c:	24 1b       	sub	r18, r20
    110e:	35 0b       	sbc	r19, r21
    1110:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <__brkval>
    1114:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <__brkval+0x1>
    1118:	e2 17       	cp	r30, r18
    111a:	f3 07       	cpc	r31, r19
    111c:	a0 f4       	brcc	.+40     	; 0x1146 <malloc+0x120>
    111e:	2e 1b       	sub	r18, r30
    1120:	3f 0b       	sbc	r19, r31
    1122:	28 17       	cp	r18, r24
    1124:	39 07       	cpc	r19, r25
    1126:	78 f0       	brcs	.+30     	; 0x1146 <malloc+0x120>
    1128:	ac 01       	movw	r20, r24
    112a:	4e 5f       	subi	r20, 0xFE	; 254
    112c:	5f 4f       	sbci	r21, 0xFF	; 255
    112e:	24 17       	cp	r18, r20
    1130:	35 07       	cpc	r19, r21
    1132:	48 f0       	brcs	.+18     	; 0x1146 <malloc+0x120>
    1134:	4e 0f       	add	r20, r30
    1136:	5f 1f       	adc	r21, r31
    1138:	50 93 f1 01 	sts	0x01F1, r21	; 0x8001f1 <__brkval+0x1>
    113c:	40 93 f0 01 	sts	0x01F0, r20	; 0x8001f0 <__brkval>
    1140:	81 93       	st	Z+, r24
    1142:	91 93       	st	Z+, r25
    1144:	02 c0       	rjmp	.+4      	; 0x114a <malloc+0x124>
    1146:	e0 e0       	ldi	r30, 0x00	; 0
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	cf 01       	movw	r24, r30
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	08 95       	ret

00001156 <free>:
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	00 97       	sbiw	r24, 0x00	; 0
    115c:	09 f4       	brne	.+2      	; 0x1160 <free+0xa>
    115e:	81 c0       	rjmp	.+258    	; 0x1262 <free+0x10c>
    1160:	fc 01       	movw	r30, r24
    1162:	32 97       	sbiw	r30, 0x02	; 2
    1164:	13 82       	std	Z+3, r1	; 0x03
    1166:	12 82       	std	Z+2, r1	; 0x02
    1168:	a0 91 f2 01 	lds	r26, 0x01F2	; 0x8001f2 <__flp>
    116c:	b0 91 f3 01 	lds	r27, 0x01F3	; 0x8001f3 <__flp+0x1>
    1170:	10 97       	sbiw	r26, 0x00	; 0
    1172:	81 f4       	brne	.+32     	; 0x1194 <free+0x3e>
    1174:	20 81       	ld	r18, Z
    1176:	31 81       	ldd	r19, Z+1	; 0x01
    1178:	82 0f       	add	r24, r18
    117a:	93 1f       	adc	r25, r19
    117c:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <__brkval>
    1180:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <__brkval+0x1>
    1184:	28 17       	cp	r18, r24
    1186:	39 07       	cpc	r19, r25
    1188:	51 f5       	brne	.+84     	; 0x11de <free+0x88>
    118a:	f0 93 f1 01 	sts	0x01F1, r31	; 0x8001f1 <__brkval+0x1>
    118e:	e0 93 f0 01 	sts	0x01F0, r30	; 0x8001f0 <__brkval>
    1192:	67 c0       	rjmp	.+206    	; 0x1262 <free+0x10c>
    1194:	ed 01       	movw	r28, r26
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	ce 17       	cp	r28, r30
    119c:	df 07       	cpc	r29, r31
    119e:	40 f4       	brcc	.+16     	; 0x11b0 <free+0x5a>
    11a0:	4a 81       	ldd	r20, Y+2	; 0x02
    11a2:	5b 81       	ldd	r21, Y+3	; 0x03
    11a4:	9e 01       	movw	r18, r28
    11a6:	41 15       	cp	r20, r1
    11a8:	51 05       	cpc	r21, r1
    11aa:	f1 f0       	breq	.+60     	; 0x11e8 <free+0x92>
    11ac:	ea 01       	movw	r28, r20
    11ae:	f5 cf       	rjmp	.-22     	; 0x119a <free+0x44>
    11b0:	d3 83       	std	Z+3, r29	; 0x03
    11b2:	c2 83       	std	Z+2, r28	; 0x02
    11b4:	40 81       	ld	r20, Z
    11b6:	51 81       	ldd	r21, Z+1	; 0x01
    11b8:	84 0f       	add	r24, r20
    11ba:	95 1f       	adc	r25, r21
    11bc:	c8 17       	cp	r28, r24
    11be:	d9 07       	cpc	r29, r25
    11c0:	59 f4       	brne	.+22     	; 0x11d8 <free+0x82>
    11c2:	88 81       	ld	r24, Y
    11c4:	99 81       	ldd	r25, Y+1	; 0x01
    11c6:	84 0f       	add	r24, r20
    11c8:	95 1f       	adc	r25, r21
    11ca:	02 96       	adiw	r24, 0x02	; 2
    11cc:	91 83       	std	Z+1, r25	; 0x01
    11ce:	80 83       	st	Z, r24
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	9b 81       	ldd	r25, Y+3	; 0x03
    11d4:	93 83       	std	Z+3, r25	; 0x03
    11d6:	82 83       	std	Z+2, r24	; 0x02
    11d8:	21 15       	cp	r18, r1
    11da:	31 05       	cpc	r19, r1
    11dc:	29 f4       	brne	.+10     	; 0x11e8 <free+0x92>
    11de:	f0 93 f3 01 	sts	0x01F3, r31	; 0x8001f3 <__flp+0x1>
    11e2:	e0 93 f2 01 	sts	0x01F2, r30	; 0x8001f2 <__flp>
    11e6:	3d c0       	rjmp	.+122    	; 0x1262 <free+0x10c>
    11e8:	e9 01       	movw	r28, r18
    11ea:	fb 83       	std	Y+3, r31	; 0x03
    11ec:	ea 83       	std	Y+2, r30	; 0x02
    11ee:	49 91       	ld	r20, Y+
    11f0:	59 91       	ld	r21, Y+
    11f2:	c4 0f       	add	r28, r20
    11f4:	d5 1f       	adc	r29, r21
    11f6:	ec 17       	cp	r30, r28
    11f8:	fd 07       	cpc	r31, r29
    11fa:	61 f4       	brne	.+24     	; 0x1214 <free+0xbe>
    11fc:	80 81       	ld	r24, Z
    11fe:	91 81       	ldd	r25, Z+1	; 0x01
    1200:	84 0f       	add	r24, r20
    1202:	95 1f       	adc	r25, r21
    1204:	02 96       	adiw	r24, 0x02	; 2
    1206:	e9 01       	movw	r28, r18
    1208:	99 83       	std	Y+1, r25	; 0x01
    120a:	88 83       	st	Y, r24
    120c:	82 81       	ldd	r24, Z+2	; 0x02
    120e:	93 81       	ldd	r25, Z+3	; 0x03
    1210:	9b 83       	std	Y+3, r25	; 0x03
    1212:	8a 83       	std	Y+2, r24	; 0x02
    1214:	e0 e0       	ldi	r30, 0x00	; 0
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	12 96       	adiw	r26, 0x02	; 2
    121a:	8d 91       	ld	r24, X+
    121c:	9c 91       	ld	r25, X
    121e:	13 97       	sbiw	r26, 0x03	; 3
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	19 f0       	breq	.+6      	; 0x122a <free+0xd4>
    1224:	fd 01       	movw	r30, r26
    1226:	dc 01       	movw	r26, r24
    1228:	f7 cf       	rjmp	.-18     	; 0x1218 <free+0xc2>
    122a:	8d 91       	ld	r24, X+
    122c:	9c 91       	ld	r25, X
    122e:	11 97       	sbiw	r26, 0x01	; 1
    1230:	9d 01       	movw	r18, r26
    1232:	2e 5f       	subi	r18, 0xFE	; 254
    1234:	3f 4f       	sbci	r19, 0xFF	; 255
    1236:	82 0f       	add	r24, r18
    1238:	93 1f       	adc	r25, r19
    123a:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <__brkval>
    123e:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <__brkval+0x1>
    1242:	28 17       	cp	r18, r24
    1244:	39 07       	cpc	r19, r25
    1246:	69 f4       	brne	.+26     	; 0x1262 <free+0x10c>
    1248:	30 97       	sbiw	r30, 0x00	; 0
    124a:	29 f4       	brne	.+10     	; 0x1256 <free+0x100>
    124c:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <__flp+0x1>
    1250:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <__flp>
    1254:	02 c0       	rjmp	.+4      	; 0x125a <free+0x104>
    1256:	13 82       	std	Z+3, r1	; 0x03
    1258:	12 82       	std	Z+2, r1	; 0x02
    125a:	b0 93 f1 01 	sts	0x01F1, r27	; 0x8001f1 <__brkval+0x1>
    125e:	a0 93 f0 01 	sts	0x01F0, r26	; 0x8001f0 <__brkval>
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	08 95       	ret

00001268 <strnlen_P>:
    1268:	fc 01       	movw	r30, r24
    126a:	05 90       	lpm	r0, Z+
    126c:	61 50       	subi	r22, 0x01	; 1
    126e:	70 40       	sbci	r23, 0x00	; 0
    1270:	01 10       	cpse	r0, r1
    1272:	d8 f7       	brcc	.-10     	; 0x126a <strnlen_P+0x2>
    1274:	80 95       	com	r24
    1276:	90 95       	com	r25
    1278:	8e 0f       	add	r24, r30
    127a:	9f 1f       	adc	r25, r31
    127c:	08 95       	ret

0000127e <memset>:
    127e:	dc 01       	movw	r26, r24
    1280:	01 c0       	rjmp	.+2      	; 0x1284 <memset+0x6>
    1282:	6d 93       	st	X+, r22
    1284:	41 50       	subi	r20, 0x01	; 1
    1286:	50 40       	sbci	r21, 0x00	; 0
    1288:	e0 f7       	brcc	.-8      	; 0x1282 <memset+0x4>
    128a:	08 95       	ret

0000128c <strnlen>:
    128c:	fc 01       	movw	r30, r24
    128e:	61 50       	subi	r22, 0x01	; 1
    1290:	70 40       	sbci	r23, 0x00	; 0
    1292:	01 90       	ld	r0, Z+
    1294:	01 10       	cpse	r0, r1
    1296:	d8 f7       	brcc	.-10     	; 0x128e <strnlen+0x2>
    1298:	80 95       	com	r24
    129a:	90 95       	com	r25
    129c:	8e 0f       	add	r24, r30
    129e:	9f 1f       	adc	r25, r31
    12a0:	08 95       	ret

000012a2 <fputc>:
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	fb 01       	movw	r30, r22
    12ac:	23 81       	ldd	r18, Z+3	; 0x03
    12ae:	21 fd       	sbrc	r18, 1
    12b0:	03 c0       	rjmp	.+6      	; 0x12b8 <fputc+0x16>
    12b2:	8f ef       	ldi	r24, 0xFF	; 255
    12b4:	9f ef       	ldi	r25, 0xFF	; 255
    12b6:	2c c0       	rjmp	.+88     	; 0x1310 <fputc+0x6e>
    12b8:	22 ff       	sbrs	r18, 2
    12ba:	16 c0       	rjmp	.+44     	; 0x12e8 <fputc+0x46>
    12bc:	46 81       	ldd	r20, Z+6	; 0x06
    12be:	57 81       	ldd	r21, Z+7	; 0x07
    12c0:	24 81       	ldd	r18, Z+4	; 0x04
    12c2:	35 81       	ldd	r19, Z+5	; 0x05
    12c4:	42 17       	cp	r20, r18
    12c6:	53 07       	cpc	r21, r19
    12c8:	44 f4       	brge	.+16     	; 0x12da <fputc+0x38>
    12ca:	a0 81       	ld	r26, Z
    12cc:	b1 81       	ldd	r27, Z+1	; 0x01
    12ce:	9d 01       	movw	r18, r26
    12d0:	2f 5f       	subi	r18, 0xFF	; 255
    12d2:	3f 4f       	sbci	r19, 0xFF	; 255
    12d4:	31 83       	std	Z+1, r19	; 0x01
    12d6:	20 83       	st	Z, r18
    12d8:	8c 93       	st	X, r24
    12da:	26 81       	ldd	r18, Z+6	; 0x06
    12dc:	37 81       	ldd	r19, Z+7	; 0x07
    12de:	2f 5f       	subi	r18, 0xFF	; 255
    12e0:	3f 4f       	sbci	r19, 0xFF	; 255
    12e2:	37 83       	std	Z+7, r19	; 0x07
    12e4:	26 83       	std	Z+6, r18	; 0x06
    12e6:	14 c0       	rjmp	.+40     	; 0x1310 <fputc+0x6e>
    12e8:	8b 01       	movw	r16, r22
    12ea:	ec 01       	movw	r28, r24
    12ec:	fb 01       	movw	r30, r22
    12ee:	00 84       	ldd	r0, Z+8	; 0x08
    12f0:	f1 85       	ldd	r31, Z+9	; 0x09
    12f2:	e0 2d       	mov	r30, r0
    12f4:	09 95       	icall
    12f6:	89 2b       	or	r24, r25
    12f8:	e1 f6       	brne	.-72     	; 0x12b2 <fputc+0x10>
    12fa:	d8 01       	movw	r26, r16
    12fc:	16 96       	adiw	r26, 0x06	; 6
    12fe:	8d 91       	ld	r24, X+
    1300:	9c 91       	ld	r25, X
    1302:	17 97       	sbiw	r26, 0x07	; 7
    1304:	01 96       	adiw	r24, 0x01	; 1
    1306:	17 96       	adiw	r26, 0x07	; 7
    1308:	9c 93       	st	X, r25
    130a:	8e 93       	st	-X, r24
    130c:	16 97       	sbiw	r26, 0x06	; 6
    130e:	ce 01       	movw	r24, r28
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	1f 91       	pop	r17
    1316:	0f 91       	pop	r16
    1318:	08 95       	ret

0000131a <__ultoa_invert>:
    131a:	fa 01       	movw	r30, r20
    131c:	aa 27       	eor	r26, r26
    131e:	28 30       	cpi	r18, 0x08	; 8
    1320:	51 f1       	breq	.+84     	; 0x1376 <__ultoa_invert+0x5c>
    1322:	20 31       	cpi	r18, 0x10	; 16
    1324:	81 f1       	breq	.+96     	; 0x1386 <__ultoa_invert+0x6c>
    1326:	e8 94       	clt
    1328:	6f 93       	push	r22
    132a:	6e 7f       	andi	r22, 0xFE	; 254
    132c:	6e 5f       	subi	r22, 0xFE	; 254
    132e:	7f 4f       	sbci	r23, 0xFF	; 255
    1330:	8f 4f       	sbci	r24, 0xFF	; 255
    1332:	9f 4f       	sbci	r25, 0xFF	; 255
    1334:	af 4f       	sbci	r26, 0xFF	; 255
    1336:	b1 e0       	ldi	r27, 0x01	; 1
    1338:	3e d0       	rcall	.+124    	; 0x13b6 <__ultoa_invert+0x9c>
    133a:	b4 e0       	ldi	r27, 0x04	; 4
    133c:	3c d0       	rcall	.+120    	; 0x13b6 <__ultoa_invert+0x9c>
    133e:	67 0f       	add	r22, r23
    1340:	78 1f       	adc	r23, r24
    1342:	89 1f       	adc	r24, r25
    1344:	9a 1f       	adc	r25, r26
    1346:	a1 1d       	adc	r26, r1
    1348:	68 0f       	add	r22, r24
    134a:	79 1f       	adc	r23, r25
    134c:	8a 1f       	adc	r24, r26
    134e:	91 1d       	adc	r25, r1
    1350:	a1 1d       	adc	r26, r1
    1352:	6a 0f       	add	r22, r26
    1354:	71 1d       	adc	r23, r1
    1356:	81 1d       	adc	r24, r1
    1358:	91 1d       	adc	r25, r1
    135a:	a1 1d       	adc	r26, r1
    135c:	20 d0       	rcall	.+64     	; 0x139e <__ultoa_invert+0x84>
    135e:	09 f4       	brne	.+2      	; 0x1362 <__ultoa_invert+0x48>
    1360:	68 94       	set
    1362:	3f 91       	pop	r19
    1364:	2a e0       	ldi	r18, 0x0A	; 10
    1366:	26 9f       	mul	r18, r22
    1368:	11 24       	eor	r1, r1
    136a:	30 19       	sub	r19, r0
    136c:	30 5d       	subi	r19, 0xD0	; 208
    136e:	31 93       	st	Z+, r19
    1370:	de f6       	brtc	.-74     	; 0x1328 <__ultoa_invert+0xe>
    1372:	cf 01       	movw	r24, r30
    1374:	08 95       	ret
    1376:	46 2f       	mov	r20, r22
    1378:	47 70       	andi	r20, 0x07	; 7
    137a:	40 5d       	subi	r20, 0xD0	; 208
    137c:	41 93       	st	Z+, r20
    137e:	b3 e0       	ldi	r27, 0x03	; 3
    1380:	0f d0       	rcall	.+30     	; 0x13a0 <__ultoa_invert+0x86>
    1382:	c9 f7       	brne	.-14     	; 0x1376 <__ultoa_invert+0x5c>
    1384:	f6 cf       	rjmp	.-20     	; 0x1372 <__ultoa_invert+0x58>
    1386:	46 2f       	mov	r20, r22
    1388:	4f 70       	andi	r20, 0x0F	; 15
    138a:	40 5d       	subi	r20, 0xD0	; 208
    138c:	4a 33       	cpi	r20, 0x3A	; 58
    138e:	18 f0       	brcs	.+6      	; 0x1396 <__ultoa_invert+0x7c>
    1390:	49 5d       	subi	r20, 0xD9	; 217
    1392:	31 fd       	sbrc	r19, 1
    1394:	40 52       	subi	r20, 0x20	; 32
    1396:	41 93       	st	Z+, r20
    1398:	02 d0       	rcall	.+4      	; 0x139e <__ultoa_invert+0x84>
    139a:	a9 f7       	brne	.-22     	; 0x1386 <__ultoa_invert+0x6c>
    139c:	ea cf       	rjmp	.-44     	; 0x1372 <__ultoa_invert+0x58>
    139e:	b4 e0       	ldi	r27, 0x04	; 4
    13a0:	a6 95       	lsr	r26
    13a2:	97 95       	ror	r25
    13a4:	87 95       	ror	r24
    13a6:	77 95       	ror	r23
    13a8:	67 95       	ror	r22
    13aa:	ba 95       	dec	r27
    13ac:	c9 f7       	brne	.-14     	; 0x13a0 <__ultoa_invert+0x86>
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	61 05       	cpc	r22, r1
    13b2:	71 05       	cpc	r23, r1
    13b4:	08 95       	ret
    13b6:	9b 01       	movw	r18, r22
    13b8:	ac 01       	movw	r20, r24
    13ba:	0a 2e       	mov	r0, r26
    13bc:	06 94       	lsr	r0
    13be:	57 95       	ror	r21
    13c0:	47 95       	ror	r20
    13c2:	37 95       	ror	r19
    13c4:	27 95       	ror	r18
    13c6:	ba 95       	dec	r27
    13c8:	c9 f7       	brne	.-14     	; 0x13bc <__ultoa_invert+0xa2>
    13ca:	62 0f       	add	r22, r18
    13cc:	73 1f       	adc	r23, r19
    13ce:	84 1f       	adc	r24, r20
    13d0:	95 1f       	adc	r25, r21
    13d2:	a0 1d       	adc	r26, r0
    13d4:	08 95       	ret

000013d6 <__prologue_saves__>:
    13d6:	2f 92       	push	r2
    13d8:	3f 92       	push	r3
    13da:	4f 92       	push	r4
    13dc:	5f 92       	push	r5
    13de:	6f 92       	push	r6
    13e0:	7f 92       	push	r7
    13e2:	8f 92       	push	r8
    13e4:	9f 92       	push	r9
    13e6:	af 92       	push	r10
    13e8:	bf 92       	push	r11
    13ea:	cf 92       	push	r12
    13ec:	df 92       	push	r13
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	ca 1b       	sub	r28, r26
    1400:	db 0b       	sbc	r29, r27
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	cd bf       	out	0x3d, r28	; 61
    140c:	09 94       	ijmp

0000140e <__epilogue_restores__>:
    140e:	2a 88       	ldd	r2, Y+18	; 0x12
    1410:	39 88       	ldd	r3, Y+17	; 0x11
    1412:	48 88       	ldd	r4, Y+16	; 0x10
    1414:	5f 84       	ldd	r5, Y+15	; 0x0f
    1416:	6e 84       	ldd	r6, Y+14	; 0x0e
    1418:	7d 84       	ldd	r7, Y+13	; 0x0d
    141a:	8c 84       	ldd	r8, Y+12	; 0x0c
    141c:	9b 84       	ldd	r9, Y+11	; 0x0b
    141e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1420:	b9 84       	ldd	r11, Y+9	; 0x09
    1422:	c8 84       	ldd	r12, Y+8	; 0x08
    1424:	df 80       	ldd	r13, Y+7	; 0x07
    1426:	ee 80       	ldd	r14, Y+6	; 0x06
    1428:	fd 80       	ldd	r15, Y+5	; 0x05
    142a:	0c 81       	ldd	r16, Y+4	; 0x04
    142c:	1b 81       	ldd	r17, Y+3	; 0x03
    142e:	aa 81       	ldd	r26, Y+2	; 0x02
    1430:	b9 81       	ldd	r27, Y+1	; 0x01
    1432:	ce 0f       	add	r28, r30
    1434:	d1 1d       	adc	r29, r1
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	ed 01       	movw	r28, r26
    1442:	08 95       	ret

00001444 <_exit>:
    1444:	f8 94       	cli

00001446 <__stop_program>:
    1446:	ff cf       	rjmp	.-2      	; 0x1446 <__stop_program>
