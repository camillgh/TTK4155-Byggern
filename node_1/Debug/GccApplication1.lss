
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000006d8  0000076c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080010a  0080010a  00000776  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000776  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dd0  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ea  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a4  00000000  00000000  00002076  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  0000281c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055e  00000000  00000000  00002974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a9  00000000  00000000  00002ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000317b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 ed       	ldi	r30, 0xD8	; 216
  84:	f6 e0       	ldi	r31, 0x06	; 6
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	aa 30       	cpi	r26, 0x0A	; 10
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	aa e0       	ldi	r26, 0x0A	; 10
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a6 31       	cpi	r26, 0x16	; 22
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 67 00 	call	0xce	; 0xce <main>
  a6:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_clock_signal>:



void adc_clock_signal(void){
	
	DDRB |= (1<< PB0);
  ae:	b8 9a       	sbi	0x17, 0	; 23
	
	TCCR0 |= (1<< WGM01);
  b0:	83 b7       	in	r24, 0x33	; 51
  b2:	88 60       	ori	r24, 0x08	; 8
  b4:	83 bf       	out	0x33, r24	; 51
	//TCCR0 = 0X11;
	TCCR0 &= ~(1<< WGM00);
  b6:	83 b7       	in	r24, 0x33	; 51
  b8:	8f 7b       	andi	r24, 0xBF	; 191
  ba:	83 bf       	out	0x33, r24	; 51
	
	TCCR0 |= (1<<COM00);
  bc:	83 b7       	in	r24, 0x33	; 51
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	83 bf       	out	0x33, r24	; 51
	//TCCR0 |= (1<<COM01);
	
	TCCR0 |= (1<<CS00);
  c2:	83 b7       	in	r24, 0x33	; 51
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	83 bf       	out	0x33, r24	; 51
	//TCCR0 |= (1<<CS01);
	//TCCR0 |= (1<<CS02);

	
	OCR0 = 10;
  c8:	8a e0       	ldi	r24, 0x0A	; 10
  ca:	81 bf       	out	0x31, r24	; 49
  cc:	08 95       	ret

000000ce <main>:

void main(void){
	joystick_position j_position;
	slider_position s_position;
	
	USART_init(MYUBRR);
  ce:	8f e1       	ldi	r24, 0x1F	; 31
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 ce 01 	call	0x39c	; 0x39c <USART_init>
	adc_clock_signal();
  d6:	0e 94 57 00 	call	0xae	; 0xae <adc_clock_signal>
	//joystick_init();
	oled_init();
  da:	0e 94 06 01 	call	0x20c	; 0x20c <oled_init>
	oled_clear();
  de:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <oled_clear>
	oled_pos(0,0);
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 a5 01 	call	0x34a	; 0x34a <oled_pos>
	oled_write();
  ea:	0e 94 78 00 	call	0xf0	; 0xf0 <oled_write>
  ee:	ff cf       	rjmp	.-2      	; 0xee <main+0x20>

000000f0 <oled_write>:
int oled_write_char(char c){
	for (int i = 0; i < FONTWIDTH; i++){
		*oled_data = pgm_read_byte(&font4[c-' '][i]);
	}
	return 0;
}
  f0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_data>
  f4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_data+0x1>
  f8:	82 e4       	ldi	r24, 0x42	; 66
  fa:	80 83       	st	Z, r24
  fc:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_data>
 100:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_data+0x1>
 104:	80 83       	st	Z, r24
 106:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_data>
 10a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_data+0x1>
 10e:	8f e7       	ldi	r24, 0x7F	; 127
 110:	80 83       	st	Z, r24
 112:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_data>
 116:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_data+0x1>
 11a:	80 83       	st	Z, r24
 11c:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_data>
 120:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_data+0x1>
 124:	80 e4       	ldi	r24, 0x40	; 64
 126:	80 83       	st	Z, r24
 128:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_data>
 12c:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_data+0x1>
 130:	80 83       	st	Z, r24
 132:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_data>
 136:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_data+0x1>
 13a:	10 82       	st	Z, r1
 13c:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_data>
 140:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_data+0x1>
 144:	10 82       	st	Z, r1
 146:	08 95       	ret

00000148 <oled_home>:
// 	return 0;	
// };

int oled_home(void) {
	//Reset the page and column
	page = 0;
 148:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <page>
	col = 0;
 14c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
	
	//Set the cursor to the start of the screen
	*oled_command = 0x21;
 150:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 154:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 158:	81 e2       	ldi	r24, 0x21	; 33
 15a:	80 83       	st	Z, r24
	*oled_command = 0x00;
 15c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 160:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 164:	10 82       	st	Z, r1
	*oled_command = 0x7F;
 166:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 16a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 16e:	8f e7       	ldi	r24, 0x7F	; 127
 170:	80 83       	st	Z, r24
	
	*oled_command = 0x22;
 172:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 176:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 17a:	82 e2       	ldi	r24, 0x22	; 34
 17c:	80 83       	st	Z, r24
	*oled_command = 0x00;
 17e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 182:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 186:	10 82       	st	Z, r1
	*oled_command = 0x7;
 188:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 18c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 190:	87 e0       	ldi	r24, 0x07	; 7
 192:	80 83       	st	Z, r24
	
	return 0;
	
}
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	08 95       	ret

0000019a <oled_goto_line>:
	return 0;
}



int oled_goto_line(uint8_t line) {
 19a:	cf 93       	push	r28
 19c:	c8 2f       	mov	r28, r24
	oled_home();
 19e:	0e 94 a4 00 	call	0x148	; 0x148 <oled_home>
	
	//Check if it's a valid page
	if (line < 8) {
 1a2:	c8 30       	cpi	r28, 0x08	; 8
 1a4:	98 f4       	brcc	.+38     	; 0x1cc <oled_goto_line+0x32>
		//Save the page we are moving to
		page = line;
 1a6:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <page>
		//Set lower column address
		*oled_command = 0x00;
 1aa:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 1ae:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 1b2:	10 82       	st	Z, r1
		//Set higher column address
		*oled_command = 0x10;
 1b4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 1b8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 1bc:	80 e1       	ldi	r24, 0x10	; 16
 1be:	80 83       	st	Z, r24
		//Set page address
		*oled_command = 0xB0 | line;
 1c0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 1c4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 1c8:	c0 6b       	ori	r28, 0xB0	; 176
 1ca:	c0 83       	st	Z, r28
	}

	return 0;
}
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <oled_clear_line>:
	
	return 0;
}

int oled_clear_line(uint8_t line) {
	oled_goto_line(line);
 1d4:	0e 94 cd 00 	call	0x19a	; 0x19a <oled_goto_line>
 1d8:	80 e8       	ldi	r24, 0x80	; 128
 1da:	90 e0       	ldi	r25, 0x00	; 0
	
	//Clear the page
	for (int i = 0; i < 128; i++) {
		*oled_data=0x00;
 1dc:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_data>
 1e0:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_data+0x1>
 1e4:	10 82       	st	Z, r1
 1e6:	01 97       	sbiw	r24, 0x01	; 1

int oled_clear_line(uint8_t line) {
	oled_goto_line(line);
	
	//Clear the page
	for (int i = 0; i < 128; i++) {
 1e8:	c9 f7       	brne	.-14     	; 0x1dc <oled_clear_line+0x8>
		*oled_data=0x00;
	}
	
	oled_home();
 1ea:	0e 94 a4 00 	call	0x148	; 0x148 <oled_home>
	
	return 0;
}
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	08 95       	ret

000001f4 <oled_clear>:
	
	return 0;
	
}

int oled_clear(void) {
 1f4:	cf 93       	push	r28
	//Clear every page
	for (uint8_t k = 0; k < 8; k++) {
 1f6:	c0 e0       	ldi	r28, 0x00	; 0
		oled_clear_line(k);
 1f8:	8c 2f       	mov	r24, r28
 1fa:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <oled_clear_line>
	
}

int oled_clear(void) {
	//Clear every page
	for (uint8_t k = 0; k < 8; k++) {
 1fe:	cf 5f       	subi	r28, 0xFF	; 255
 200:	c8 30       	cpi	r28, 0x08	; 8
 202:	d1 f7       	brne	.-12     	; 0x1f8 <oled_clear+0x4>
		oled_clear_line(k);
	}
	
	return 0;
}
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <oled_init>:
uint8_t col, page;


void oled_init(void){
	// Enable external memory
	MCUCR |= (1 << SRE);
 20c:	85 b7       	in	r24, 0x35	; 53
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
 212:	80 b7       	in	r24, 0x30	; 48
 214:	80 62       	ori	r24, 0x20	; 32
 216:	80 bf       	out	0x30, r24	; 48
	
	// Display off
	*oled_command = 0xAE;
 218:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 21c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 220:	8e ea       	ldi	r24, 0xAE	; 174
 222:	80 83       	st	Z, r24
	
	//Segment remap
	*oled_command = 0xA1;
 224:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 228:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 22c:	81 ea       	ldi	r24, 0xA1	; 161
 22e:	80 83       	st	Z, r24
	
	//Common pads hardware: alternative
	*oled_command = 0xDA;
 230:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 234:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 238:	8a ed       	ldi	r24, 0xDA	; 218
 23a:	80 83       	st	Z, r24
	*oled_command = 0x12;
 23c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 240:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 244:	82 e1       	ldi	r24, 0x12	; 18
 246:	80 83       	st	Z, r24
	
	// Common output scan direction: com63~com0
	*oled_command = 0xC8;
 248:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 24c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 250:	88 ec       	ldi	r24, 0xC8	; 200
 252:	80 83       	st	Z, r24
	
	// Mulitplex ration mode: 63
	*oled_command = 0xA8;
 254:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 258:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 25c:	88 ea       	ldi	r24, 0xA8	; 168
 25e:	80 83       	st	Z, r24
	*oled_command = 0x3F;
 260:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 264:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 268:	8f e3       	ldi	r24, 0x3F	; 63
 26a:	80 83       	st	Z, r24
	
	// Display divide ratio/osc. freq. mode
	*oled_command = 0xD5;
 26c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 270:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 274:	85 ed       	ldi	r24, 0xD5	; 213
 276:	80 83       	st	Z, r24
	*oled_command = 0x80;
 278:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 27c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 280:	80 e8       	ldi	r24, 0x80	; 128
 282:	80 83       	st	Z, r24
	
	// Contrast control
	*oled_command = 0x81;
 284:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 288:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 28c:	81 e8       	ldi	r24, 0x81	; 129
 28e:	80 83       	st	Z, r24
	*oled_command = 0x50;
 290:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 294:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 298:	80 e5       	ldi	r24, 0x50	; 80
 29a:	80 83       	st	Z, r24
	
	// Set pre-charged period
	*oled_command = 0xD9;
 29c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 2a0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 2a4:	89 ed       	ldi	r24, 0xD9	; 217
 2a6:	80 83       	st	Z, r24
	*oled_command = 0x21;
 2a8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 2ac:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 2b0:	81 e2       	ldi	r24, 0x21	; 33
 2b2:	80 83       	st	Z, r24
	
	// Set Memory Adressing mode
	*oled_command = 0x20;
 2b4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 2b8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 2bc:	80 e2       	ldi	r24, 0x20	; 32
 2be:	80 83       	st	Z, r24
	*oled_command = 0x02;
 2c0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 2c4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	80 83       	st	Z, r24
	
	// VCOM deselect level mode
	*oled_command = 0xDB;
 2cc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 2d0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 2d4:	8b ed       	ldi	r24, 0xDB	; 219
 2d6:	80 83       	st	Z, r24
	*oled_command = 0x30;
 2d8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 2dc:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 2e0:	80 e3       	ldi	r24, 0x30	; 48
 2e2:	80 83       	st	Z, r24
	
	// Master configuration 
	*oled_command = 0xAD;
 2e4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 2e8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 2ec:	8d ea       	ldi	r24, 0xAD	; 173
 2ee:	80 83       	st	Z, r24
	*oled_command = 0x00;
 2f0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 2f4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 2f8:	10 82       	st	Z, r1
	
	// Out follows RAM content
	*oled_command = 0xA4;
 2fa:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 2fe:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 302:	84 ea       	ldi	r24, 0xA4	; 164
 304:	80 83       	st	Z, r24
	
	// Set normal display 
	*oled_command = 0xA6;
 306:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 30a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 30e:	86 ea       	ldi	r24, 0xA6	; 166
 310:	80 83       	st	Z, r24
	
	// Display On
	*oled_command = 0xAF;
 312:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 316:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 31a:	8f ea       	ldi	r24, 0xAF	; 175
 31c:	80 83       	st	Z, r24
	
	//Set page start address
	*oled_command = 0xB0;
 31e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 322:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 326:	80 eb       	ldi	r24, 0xB0	; 176
 328:	80 83       	st	Z, r24
	//Set lower column start address
	*oled_command = 0x00;
 32a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 32e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 332:	10 82       	st	Z, r1
	//Set higher column start address
	*oled_command = 0x10;
 334:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 338:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 33c:	80 e1       	ldi	r24, 0x10	; 16
 33e:	80 83       	st	Z, r24
	
	oled_clear();
 340:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <oled_clear>
	oled_home();
 344:	0e 94 a4 00 	call	0x148	; 0x148 <oled_home>
 348:	08 95       	ret

0000034a <oled_pos>:
	}

	return 0;
}

int oled_pos(uint8_t line, uint8_t column) {
 34a:	cf 93       	push	r28
 34c:	c6 2f       	mov	r28, r22
	
	oled_goto_line(line);
 34e:	0e 94 cd 00 	call	0x19a	; 0x19a <oled_goto_line>
	
	//Check if it's a valid column according to the font
	if (column < (128/FONTWIDTH)) {
 352:	8c 2f       	mov	r24, r28
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	80 32       	cpi	r24, 0x20	; 32
 358:	91 05       	cpc	r25, r1
 35a:	9c f4       	brge	.+38     	; 0x382 <oled_pos+0x38>
		//Save the column we are moving to
		col = column*FONTWIDTH;
 35c:	cc 0f       	add	r28, r28
 35e:	cc 0f       	add	r28, r28
 360:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <__data_end>
		//Set lower column start address
		*oled_command = 0x00 + (column*(FONTWIDTH)>>4);
 364:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 368:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 36c:	96 95       	lsr	r25
 36e:	87 95       	ror	r24
 370:	96 95       	lsr	r25
 372:	87 95       	ror	r24
 374:	80 83       	st	Z, r24
		//Set higher column start address
		*oled_command = 0x10 + (column*(FONTWIDTH)>>4);
 376:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
 37a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
 37e:	80 5f       	subi	r24, 0xF0	; 240
 380:	80 83       	st	Z, r24
	}
	
	return 0;
}
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <USART_transmit>:

	fdevopen(USART_transmit, USART_receive);
}

void USART_transmit(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
 38a:	5d 9b       	sbis	0x0b, 5	; 11
 38c:	fe cf       	rjmp	.-4      	; 0x38a <USART_transmit>
	UDR0 = data;
 38e:	8c b9       	out	0x0c, r24	; 12
 390:	08 95       	ret

00000392 <USART_receive>:
}

int USART_receive(void){
	while(!(UCSR0A & (1<<RXC0)));
 392:	5f 9b       	sbis	0x0b, 7	; 11
 394:	fe cf       	rjmp	.-4      	; 0x392 <USART_receive>

	return UDR0;
 396:	8c b1       	in	r24, 0x0c	; 12
}
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	08 95       	ret

0000039c <USART_init>:
#define set_bit(reg, bit) (reg |= (1<< bit))

void USART_init(unsigned int ubrr){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 39c:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;			
 39e:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 3a0:	88 e1       	ldi	r24, 0x18	; 24
 3a2:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 3a4:	8e e8       	ldi	r24, 0x8E	; 142
 3a6:	80 bd       	out	0x20, r24	; 32

	fdevopen(USART_transmit, USART_receive);
 3a8:	69 ec       	ldi	r22, 0xC9	; 201
 3aa:	71 e0       	ldi	r23, 0x01	; 1
 3ac:	85 ec       	ldi	r24, 0xC5	; 197
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <fdevopen>
 3b4:	08 95       	ret

000003b6 <fdevopen>:
 3b6:	0f 93       	push	r16
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	00 97       	sbiw	r24, 0x00	; 0
 3c0:	31 f4       	brne	.+12     	; 0x3ce <fdevopen+0x18>
 3c2:	61 15       	cp	r22, r1
 3c4:	71 05       	cpc	r23, r1
 3c6:	19 f4       	brne	.+6      	; 0x3ce <fdevopen+0x18>
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	3a c0       	rjmp	.+116    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 3ce:	8b 01       	movw	r16, r22
 3d0:	ec 01       	movw	r28, r24
 3d2:	6e e0       	ldi	r22, 0x0E	; 14
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 26 02 	call	0x44c	; 0x44c <calloc>
 3de:	fc 01       	movw	r30, r24
 3e0:	89 2b       	or	r24, r25
 3e2:	91 f3       	breq	.-28     	; 0x3c8 <fdevopen+0x12>
 3e4:	80 e8       	ldi	r24, 0x80	; 128
 3e6:	83 83       	std	Z+3, r24	; 0x03
 3e8:	01 15       	cp	r16, r1
 3ea:	11 05       	cpc	r17, r1
 3ec:	71 f0       	breq	.+28     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3ee:	13 87       	std	Z+11, r17	; 0x0b
 3f0:	02 87       	std	Z+10, r16	; 0x0a
 3f2:	81 e8       	ldi	r24, 0x81	; 129
 3f4:	83 83       	std	Z+3, r24	; 0x03
 3f6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__iob>
 3fa:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__iob+0x1>
 3fe:	89 2b       	or	r24, r25
 400:	21 f4       	brne	.+8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 402:	f0 93 0d 01 	sts	0x010D, r31	; 0x80010d <__iob+0x1>
 406:	e0 93 0c 01 	sts	0x010C, r30	; 0x80010c <__iob>
 40a:	20 97       	sbiw	r28, 0x00	; 0
 40c:	c9 f0       	breq	.+50     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 40e:	d1 87       	std	Z+9, r29	; 0x09
 410:	c0 87       	std	Z+8, r28	; 0x08
 412:	83 81       	ldd	r24, Z+3	; 0x03
 414:	82 60       	ori	r24, 0x02	; 2
 416:	83 83       	std	Z+3, r24	; 0x03
 418:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__iob+0x2>
 41c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__iob+0x3>
 420:	89 2b       	or	r24, r25
 422:	71 f4       	brne	.+28     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 424:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <__iob+0x3>
 428:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <__iob+0x2>
 42c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__iob+0x4>
 430:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__iob+0x5>
 434:	89 2b       	or	r24, r25
 436:	21 f4       	brne	.+8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 438:	f0 93 11 01 	sts	0x0111, r31	; 0x800111 <__iob+0x5>
 43c:	e0 93 10 01 	sts	0x0110, r30	; 0x800110 <__iob+0x4>
 440:	cf 01       	movw	r24, r30
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	1f 91       	pop	r17
 448:	0f 91       	pop	r16
 44a:	08 95       	ret

0000044c <calloc>:
 44c:	0f 93       	push	r16
 44e:	1f 93       	push	r17
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	86 9f       	mul	r24, r22
 456:	80 01       	movw	r16, r0
 458:	87 9f       	mul	r24, r23
 45a:	10 0d       	add	r17, r0
 45c:	96 9f       	mul	r25, r22
 45e:	10 0d       	add	r17, r0
 460:	11 24       	eor	r1, r1
 462:	c8 01       	movw	r24, r16
 464:	0e 94 42 02 	call	0x484	; 0x484 <malloc>
 468:	ec 01       	movw	r28, r24
 46a:	00 97       	sbiw	r24, 0x00	; 0
 46c:	29 f0       	breq	.+10     	; 0x478 <calloc+0x2c>
 46e:	a8 01       	movw	r20, r16
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	70 e0       	ldi	r23, 0x00	; 0
 474:	0e 94 63 03 	call	0x6c6	; 0x6c6 <memset>
 478:	ce 01       	movw	r24, r28
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	1f 91       	pop	r17
 480:	0f 91       	pop	r16
 482:	08 95       	ret

00000484 <malloc>:
 484:	0f 93       	push	r16
 486:	1f 93       	push	r17
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	82 30       	cpi	r24, 0x02	; 2
 48e:	91 05       	cpc	r25, r1
 490:	10 f4       	brcc	.+4      	; 0x496 <malloc+0x12>
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__flp>
 49a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__flp+0x1>
 49e:	20 e0       	ldi	r18, 0x00	; 0
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	a0 e0       	ldi	r26, 0x00	; 0
 4a4:	b0 e0       	ldi	r27, 0x00	; 0
 4a6:	30 97       	sbiw	r30, 0x00	; 0
 4a8:	19 f1       	breq	.+70     	; 0x4f0 <malloc+0x6c>
 4aa:	40 81       	ld	r20, Z
 4ac:	51 81       	ldd	r21, Z+1	; 0x01
 4ae:	02 81       	ldd	r16, Z+2	; 0x02
 4b0:	13 81       	ldd	r17, Z+3	; 0x03
 4b2:	48 17       	cp	r20, r24
 4b4:	59 07       	cpc	r21, r25
 4b6:	c8 f0       	brcs	.+50     	; 0x4ea <malloc+0x66>
 4b8:	84 17       	cp	r24, r20
 4ba:	95 07       	cpc	r25, r21
 4bc:	69 f4       	brne	.+26     	; 0x4d8 <malloc+0x54>
 4be:	10 97       	sbiw	r26, 0x00	; 0
 4c0:	31 f0       	breq	.+12     	; 0x4ce <malloc+0x4a>
 4c2:	12 96       	adiw	r26, 0x02	; 2
 4c4:	0c 93       	st	X, r16
 4c6:	12 97       	sbiw	r26, 0x02	; 2
 4c8:	13 96       	adiw	r26, 0x03	; 3
 4ca:	1c 93       	st	X, r17
 4cc:	27 c0       	rjmp	.+78     	; 0x51c <__stack+0x1d>
 4ce:	00 93 14 01 	sts	0x0114, r16	; 0x800114 <__flp>
 4d2:	10 93 15 01 	sts	0x0115, r17	; 0x800115 <__flp+0x1>
 4d6:	22 c0       	rjmp	.+68     	; 0x51c <__stack+0x1d>
 4d8:	21 15       	cp	r18, r1
 4da:	31 05       	cpc	r19, r1
 4dc:	19 f0       	breq	.+6      	; 0x4e4 <malloc+0x60>
 4de:	42 17       	cp	r20, r18
 4e0:	53 07       	cpc	r21, r19
 4e2:	18 f4       	brcc	.+6      	; 0x4ea <malloc+0x66>
 4e4:	9a 01       	movw	r18, r20
 4e6:	bd 01       	movw	r22, r26
 4e8:	ef 01       	movw	r28, r30
 4ea:	df 01       	movw	r26, r30
 4ec:	f8 01       	movw	r30, r16
 4ee:	db cf       	rjmp	.-74     	; 0x4a6 <malloc+0x22>
 4f0:	21 15       	cp	r18, r1
 4f2:	31 05       	cpc	r19, r1
 4f4:	f9 f0       	breq	.+62     	; 0x534 <__stack+0x35>
 4f6:	28 1b       	sub	r18, r24
 4f8:	39 0b       	sbc	r19, r25
 4fa:	24 30       	cpi	r18, 0x04	; 4
 4fc:	31 05       	cpc	r19, r1
 4fe:	80 f4       	brcc	.+32     	; 0x520 <__stack+0x21>
 500:	8a 81       	ldd	r24, Y+2	; 0x02
 502:	9b 81       	ldd	r25, Y+3	; 0x03
 504:	61 15       	cp	r22, r1
 506:	71 05       	cpc	r23, r1
 508:	21 f0       	breq	.+8      	; 0x512 <__stack+0x13>
 50a:	fb 01       	movw	r30, r22
 50c:	93 83       	std	Z+3, r25	; 0x03
 50e:	82 83       	std	Z+2, r24	; 0x02
 510:	04 c0       	rjmp	.+8      	; 0x51a <__stack+0x1b>
 512:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__flp+0x1>
 516:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__flp>
 51a:	fe 01       	movw	r30, r28
 51c:	32 96       	adiw	r30, 0x02	; 2
 51e:	44 c0       	rjmp	.+136    	; 0x5a8 <__stack+0xa9>
 520:	fe 01       	movw	r30, r28
 522:	e2 0f       	add	r30, r18
 524:	f3 1f       	adc	r31, r19
 526:	81 93       	st	Z+, r24
 528:	91 93       	st	Z+, r25
 52a:	22 50       	subi	r18, 0x02	; 2
 52c:	31 09       	sbc	r19, r1
 52e:	39 83       	std	Y+1, r19	; 0x01
 530:	28 83       	st	Y, r18
 532:	3a c0       	rjmp	.+116    	; 0x5a8 <__stack+0xa9>
 534:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__brkval>
 538:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__brkval+0x1>
 53c:	23 2b       	or	r18, r19
 53e:	41 f4       	brne	.+16     	; 0x550 <__stack+0x51>
 540:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 544:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 548:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <__brkval+0x1>
 54c:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <__brkval>
 550:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 554:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 558:	21 15       	cp	r18, r1
 55a:	31 05       	cpc	r19, r1
 55c:	41 f4       	brne	.+16     	; 0x56e <__stack+0x6f>
 55e:	2d b7       	in	r18, 0x3d	; 61
 560:	3e b7       	in	r19, 0x3e	; 62
 562:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 566:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 56a:	24 1b       	sub	r18, r20
 56c:	35 0b       	sbc	r19, r21
 56e:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__brkval>
 572:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__brkval+0x1>
 576:	e2 17       	cp	r30, r18
 578:	f3 07       	cpc	r31, r19
 57a:	a0 f4       	brcc	.+40     	; 0x5a4 <__stack+0xa5>
 57c:	2e 1b       	sub	r18, r30
 57e:	3f 0b       	sbc	r19, r31
 580:	28 17       	cp	r18, r24
 582:	39 07       	cpc	r19, r25
 584:	78 f0       	brcs	.+30     	; 0x5a4 <__stack+0xa5>
 586:	ac 01       	movw	r20, r24
 588:	4e 5f       	subi	r20, 0xFE	; 254
 58a:	5f 4f       	sbci	r21, 0xFF	; 255
 58c:	24 17       	cp	r18, r20
 58e:	35 07       	cpc	r19, r21
 590:	48 f0       	brcs	.+18     	; 0x5a4 <__stack+0xa5>
 592:	4e 0f       	add	r20, r30
 594:	5f 1f       	adc	r21, r31
 596:	50 93 13 01 	sts	0x0113, r21	; 0x800113 <__brkval+0x1>
 59a:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <__brkval>
 59e:	81 93       	st	Z+, r24
 5a0:	91 93       	st	Z+, r25
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <__stack+0xa9>
 5a4:	e0 e0       	ldi	r30, 0x00	; 0
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	cf 01       	movw	r24, r30
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	1f 91       	pop	r17
 5b0:	0f 91       	pop	r16
 5b2:	08 95       	ret

000005b4 <free>:
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	00 97       	sbiw	r24, 0x00	; 0
 5ba:	09 f4       	brne	.+2      	; 0x5be <free+0xa>
 5bc:	81 c0       	rjmp	.+258    	; 0x6c0 <free+0x10c>
 5be:	fc 01       	movw	r30, r24
 5c0:	32 97       	sbiw	r30, 0x02	; 2
 5c2:	13 82       	std	Z+3, r1	; 0x03
 5c4:	12 82       	std	Z+2, r1	; 0x02
 5c6:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <__flp>
 5ca:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <__flp+0x1>
 5ce:	10 97       	sbiw	r26, 0x00	; 0
 5d0:	81 f4       	brne	.+32     	; 0x5f2 <free+0x3e>
 5d2:	20 81       	ld	r18, Z
 5d4:	31 81       	ldd	r19, Z+1	; 0x01
 5d6:	82 0f       	add	r24, r18
 5d8:	93 1f       	adc	r25, r19
 5da:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__brkval>
 5de:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__brkval+0x1>
 5e2:	28 17       	cp	r18, r24
 5e4:	39 07       	cpc	r19, r25
 5e6:	51 f5       	brne	.+84     	; 0x63c <free+0x88>
 5e8:	f0 93 13 01 	sts	0x0113, r31	; 0x800113 <__brkval+0x1>
 5ec:	e0 93 12 01 	sts	0x0112, r30	; 0x800112 <__brkval>
 5f0:	67 c0       	rjmp	.+206    	; 0x6c0 <free+0x10c>
 5f2:	ed 01       	movw	r28, r26
 5f4:	20 e0       	ldi	r18, 0x00	; 0
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	ce 17       	cp	r28, r30
 5fa:	df 07       	cpc	r29, r31
 5fc:	40 f4       	brcc	.+16     	; 0x60e <free+0x5a>
 5fe:	4a 81       	ldd	r20, Y+2	; 0x02
 600:	5b 81       	ldd	r21, Y+3	; 0x03
 602:	9e 01       	movw	r18, r28
 604:	41 15       	cp	r20, r1
 606:	51 05       	cpc	r21, r1
 608:	f1 f0       	breq	.+60     	; 0x646 <free+0x92>
 60a:	ea 01       	movw	r28, r20
 60c:	f5 cf       	rjmp	.-22     	; 0x5f8 <free+0x44>
 60e:	d3 83       	std	Z+3, r29	; 0x03
 610:	c2 83       	std	Z+2, r28	; 0x02
 612:	40 81       	ld	r20, Z
 614:	51 81       	ldd	r21, Z+1	; 0x01
 616:	84 0f       	add	r24, r20
 618:	95 1f       	adc	r25, r21
 61a:	c8 17       	cp	r28, r24
 61c:	d9 07       	cpc	r29, r25
 61e:	59 f4       	brne	.+22     	; 0x636 <free+0x82>
 620:	88 81       	ld	r24, Y
 622:	99 81       	ldd	r25, Y+1	; 0x01
 624:	84 0f       	add	r24, r20
 626:	95 1f       	adc	r25, r21
 628:	02 96       	adiw	r24, 0x02	; 2
 62a:	91 83       	std	Z+1, r25	; 0x01
 62c:	80 83       	st	Z, r24
 62e:	8a 81       	ldd	r24, Y+2	; 0x02
 630:	9b 81       	ldd	r25, Y+3	; 0x03
 632:	93 83       	std	Z+3, r25	; 0x03
 634:	82 83       	std	Z+2, r24	; 0x02
 636:	21 15       	cp	r18, r1
 638:	31 05       	cpc	r19, r1
 63a:	29 f4       	brne	.+10     	; 0x646 <free+0x92>
 63c:	f0 93 15 01 	sts	0x0115, r31	; 0x800115 <__flp+0x1>
 640:	e0 93 14 01 	sts	0x0114, r30	; 0x800114 <__flp>
 644:	3d c0       	rjmp	.+122    	; 0x6c0 <free+0x10c>
 646:	e9 01       	movw	r28, r18
 648:	fb 83       	std	Y+3, r31	; 0x03
 64a:	ea 83       	std	Y+2, r30	; 0x02
 64c:	49 91       	ld	r20, Y+
 64e:	59 91       	ld	r21, Y+
 650:	c4 0f       	add	r28, r20
 652:	d5 1f       	adc	r29, r21
 654:	ec 17       	cp	r30, r28
 656:	fd 07       	cpc	r31, r29
 658:	61 f4       	brne	.+24     	; 0x672 <free+0xbe>
 65a:	80 81       	ld	r24, Z
 65c:	91 81       	ldd	r25, Z+1	; 0x01
 65e:	84 0f       	add	r24, r20
 660:	95 1f       	adc	r25, r21
 662:	02 96       	adiw	r24, 0x02	; 2
 664:	e9 01       	movw	r28, r18
 666:	99 83       	std	Y+1, r25	; 0x01
 668:	88 83       	st	Y, r24
 66a:	82 81       	ldd	r24, Z+2	; 0x02
 66c:	93 81       	ldd	r25, Z+3	; 0x03
 66e:	9b 83       	std	Y+3, r25	; 0x03
 670:	8a 83       	std	Y+2, r24	; 0x02
 672:	e0 e0       	ldi	r30, 0x00	; 0
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	12 96       	adiw	r26, 0x02	; 2
 678:	8d 91       	ld	r24, X+
 67a:	9c 91       	ld	r25, X
 67c:	13 97       	sbiw	r26, 0x03	; 3
 67e:	00 97       	sbiw	r24, 0x00	; 0
 680:	19 f0       	breq	.+6      	; 0x688 <free+0xd4>
 682:	fd 01       	movw	r30, r26
 684:	dc 01       	movw	r26, r24
 686:	f7 cf       	rjmp	.-18     	; 0x676 <free+0xc2>
 688:	8d 91       	ld	r24, X+
 68a:	9c 91       	ld	r25, X
 68c:	11 97       	sbiw	r26, 0x01	; 1
 68e:	9d 01       	movw	r18, r26
 690:	2e 5f       	subi	r18, 0xFE	; 254
 692:	3f 4f       	sbci	r19, 0xFF	; 255
 694:	82 0f       	add	r24, r18
 696:	93 1f       	adc	r25, r19
 698:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__brkval>
 69c:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__brkval+0x1>
 6a0:	28 17       	cp	r18, r24
 6a2:	39 07       	cpc	r19, r25
 6a4:	69 f4       	brne	.+26     	; 0x6c0 <free+0x10c>
 6a6:	30 97       	sbiw	r30, 0x00	; 0
 6a8:	29 f4       	brne	.+10     	; 0x6b4 <free+0x100>
 6aa:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__flp+0x1>
 6ae:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__flp>
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <free+0x104>
 6b4:	13 82       	std	Z+3, r1	; 0x03
 6b6:	12 82       	std	Z+2, r1	; 0x02
 6b8:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <__brkval+0x1>
 6bc:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <__brkval>
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	08 95       	ret

000006c6 <memset>:
 6c6:	dc 01       	movw	r26, r24
 6c8:	01 c0       	rjmp	.+2      	; 0x6cc <memset+0x6>
 6ca:	6d 93       	st	X+, r22
 6cc:	41 50       	subi	r20, 0x01	; 1
 6ce:	50 40       	sbci	r21, 0x00	; 0
 6d0:	e0 f7       	brcc	.-8      	; 0x6ca <memset+0x4>
 6d2:	08 95       	ret

000006d4 <_exit>:
 6d4:	f8 94       	cli

000006d6 <__stop_program>:
 6d6:	ff cf       	rjmp	.-2      	; 0x6d6 <__stop_program>
