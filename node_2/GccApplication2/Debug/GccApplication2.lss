
GccApplication2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b54  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080b54  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000090  20000434  00080f88  00020434  2**2
                  ALLOC
  3 .stack        00000404  200004c4  00081018  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008c8  0008141c  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   000043cc  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ca3  00000000  00000000  00024882  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000fb3  00000000  00000000  00025525  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000158  00000000  00000000  000264d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  00026630  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00011a35  00000000  00000000  00026760  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000310d  00000000  00000000  00038195  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005411a  00000000  00000000  0003b2a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000490  00000000  00000000  0008f3bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	c8 08 00 20 a1 03 08 00 9d 03 08 00 9d 03 08 00     ... ............
   80010:	9d 03 08 00 9d 03 08 00 9d 03 08 00 00 00 00 00     ................
	...
   8002c:	9d 03 08 00 9d 03 08 00 00 00 00 00 9d 03 08 00     ................
   8003c:	9d 03 08 00 9d 03 08 00 9d 03 08 00 9d 03 08 00     ................
   8004c:	9d 03 08 00 9d 03 08 00 9d 03 08 00 9d 03 08 00     ................
   8005c:	9d 03 08 00 91 08 08 00 9d 03 08 00 00 00 00 00     ................
   8006c:	9d 03 08 00 9d 03 08 00 9d 03 08 00 9d 03 08 00     ................
	...
   80084:	9d 03 08 00 9d 03 08 00 9d 03 08 00 9d 03 08 00     ................
   80094:	9d 03 08 00 9d 03 08 00 9d 03 08 00 9d 03 08 00     ................
   800a4:	00 00 00 00 9d 03 08 00 9d 03 08 00 9d 03 08 00     ................
   800b4:	9d 03 08 00 9d 03 08 00 9d 03 08 00 9d 03 08 00     ................
   800c4:	9d 03 08 00 9d 03 08 00 9d 03 08 00 9d 03 08 00     ................
   800d4:	9d 03 08 00 9d 03 08 00 9d 03 08 00 9d 03 08 00     ................
   800e4:	9d 03 08 00 9d 03 08 00 d5 02 08 00 9d 03 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080b54 	.word	0x00080b54

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080b54 	.word	0x00080b54
   80154:	20000438 	.word	0x20000438
   80158:	00080b54 	.word	0x00080b54
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80164:	1855      	adds	r5, r2, r1
   80166:	2908      	cmp	r1, #8
   80168:	bf98      	it	ls
   8016a:	2a08      	cmpls	r2, #8
   8016c:	d864      	bhi.n	80238 <can_init+0xd8>
   8016e:	460e      	mov	r6, r1
   80170:	2d08      	cmp	r5, #8
   80172:	dc61      	bgt.n	80238 <can_init+0xd8>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   80174:	4a32      	ldr	r2, [pc, #200]	; (80240 <can_init+0xe0>)
   80176:	6813      	ldr	r3, [r2, #0]
   80178:	f023 0301 	bic.w	r3, r3, #1
   8017c:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   8017e:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80180:	4b30      	ldr	r3, [pc, #192]	; (80244 <can_init+0xe4>)
   80182:	f44f 7440 	mov.w	r4, #768	; 0x300
   80186:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   80188:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   8018a:	f024 0403 	bic.w	r4, r4, #3
   8018e:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80190:	2403      	movs	r4, #3
   80192:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   80194:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   80196:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8019a:	4c2b      	ldr	r4, [pc, #172]	; (80248 <can_init+0xe8>)
   8019c:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a0:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801a4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801a8:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801ac:	6150      	str	r0, [r2, #20]
	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ae:	42a9      	cmp	r1, r5
   801b0:	dc40      	bgt.n	80234 <can_init+0xd4>
   801b2:	460a      	mov	r2, r1
   801b4:	2400      	movs	r4, #0
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b6:	46a1      	mov	r9, r4
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80240 <can_init+0xe0>
   801bc:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801c0:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801c4:	2701      	movs	r7, #1
   801c6:	0153      	lsls	r3, r2, #5
   801c8:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   801cc:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801d0:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801d4:	4443      	add	r3, r8
   801d6:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801da:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801de:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   801e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   801e6:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801ea:	fa07 f302 	lsl.w	r3, r7, r2
   801ee:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801f0:	3201      	adds	r2, #1
   801f2:	4295      	cmp	r5, r2
   801f4:	dae7      	bge.n	801c6 <can_init+0x66>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
   801f6:	b181      	cbz	r1, 8021a <can_init+0xba>
   801f8:	2300      	movs	r3, #0
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801fa:	4911      	ldr	r1, [pc, #68]	; (80240 <can_init+0xe0>)
   801fc:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80200:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80204:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80208:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   8020c:	f103 0210 	add.w	r2, r3, #16
   80210:	0152      	lsls	r2, r2, #5
   80212:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80214:	3301      	adds	r3, #1
   80216:	429e      	cmp	r6, r3
   80218:	d1f4      	bne.n	80204 <can_init+0xa4>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   8021a:	4b09      	ldr	r3, [pc, #36]	; (80240 <can_init+0xe0>)
   8021c:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   8021e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80222:	4a0a      	ldr	r2, [pc, #40]	; (8024c <can_init+0xec>)
   80224:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80226:	681a      	ldr	r2, [r3, #0]
   80228:	f042 0201 	orr.w	r2, r2, #1
   8022c:	601a      	str	r2, [r3, #0]

	return 0;
   8022e:	2000      	movs	r0, #0
   80230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t can_ier = 0;
   80234:	2400      	movs	r4, #0
   80236:	e7de      	b.n	801f6 <can_init+0x96>
		return 1; //Too many mailboxes is configured
   80238:	2001      	movs	r0, #1
}
   8023a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8023e:	bf00      	nop
   80240:	400b4000 	.word	0x400b4000
   80244:	400e0e00 	.word	0x400e0e00
   80248:	1000102b 	.word	0x1000102b
   8024c:	e000e100 	.word	0xe000e100

00080250 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80250:	014b      	lsls	r3, r1, #5
   80252:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80256:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8025a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8025e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80262:	d033      	beq.n	802cc <can_receive+0x7c>
{
   80264:	b430      	push	{r4, r5}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   80266:	014b      	lsls	r3, r1, #5
   80268:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8026c:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80270:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80274:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80278:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   8027c:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80280:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80282:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80286:	f3c3 4303 	ubfx	r3, r3, #16, #4
   8028a:	7083      	strb	r3, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   8028c:	461d      	mov	r5, r3
   8028e:	b15b      	cbz	r3, 802a8 <can_receive+0x58>
   80290:	3003      	adds	r0, #3
   80292:	2300      	movs	r3, #0
		{
			if(i < 4)
   80294:	2b03      	cmp	r3, #3
			{
				can_msg->data[i] = (char)(data_low & 0xff);
   80296:	bfd9      	ittee	le
   80298:	7002      	strble	r2, [r0, #0]
				data_low = data_low >> 8;
   8029a:	0a12      	lsrle	r2, r2, #8
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   8029c:	7004      	strbgt	r4, [r0, #0]
				data_high = data_high >> 8;
   8029e:	0a24      	lsrgt	r4, r4, #8
		for(int i = 0; i < can_msg->data_length;i++)
   802a0:	3301      	adds	r3, #1
   802a2:	3001      	adds	r0, #1
   802a4:	42ab      	cmp	r3, r5
   802a6:	d1f5      	bne.n	80294 <can_receive+0x44>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802a8:	4b09      	ldr	r3, [pc, #36]	; (802d0 <can_receive+0x80>)
   802aa:	f101 0210 	add.w	r2, r1, #16
   802ae:	0152      	lsls	r2, r2, #5
   802b0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802b4:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802b6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802ba:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802c2:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802c6:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802c8:	bc30      	pop	{r4, r5}
   802ca:	4770      	bx	lr
		return 1;
   802cc:	2001      	movs	r0, #1
   802ce:	4770      	bx	lr
   802d0:	400b4000 	.word	0x400b4000

000802d4 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   802d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   802d8:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
   802da:	4825      	ldr	r0, [pc, #148]	; (80370 <CAN0_Handler+0x9c>)
   802dc:	4b25      	ldr	r3, [pc, #148]	; (80374 <CAN0_Handler+0xa0>)
   802de:	4798      	blx	r3
	char can_sr = CAN0->CAN_SR; 
   802e0:	4b25      	ldr	r3, [pc, #148]	; (80378 <CAN0_Handler+0xa4>)
   802e2:	f8d3 8010 	ldr.w	r8, [r3, #16]
	
    //printf("can_sr: %d\n\r",can_sr); 
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   802e6:	f018 0f06 	tst.w	r8, #6
   802ea:	d026      	beq.n	8033a <CAN0_Handler+0x66>

	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802ec:	f018 0f02 	tst.w	r8, #2
   802f0:	d12e      	bne.n	80350 <CAN0_Handler+0x7c>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   802f2:	f018 0f04 	tst.w	r8, #4
   802f6:	d030      	beq.n	8035a <CAN0_Handler+0x86>
		
		{
			can_receive(&message, 2);
   802f8:	2102      	movs	r1, #2
   802fa:	a801      	add	r0, sp, #4
   802fc:	4b1f      	ldr	r3, [pc, #124]	; (8037c <CAN0_Handler+0xa8>)
   802fe:	4798      	blx	r3
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
   80300:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   80304:	481e      	ldr	r0, [pc, #120]	; (80380 <CAN0_Handler+0xac>)
   80306:	4c1b      	ldr	r4, [pc, #108]	; (80374 <CAN0_Handler+0xa0>)
   80308:	47a0      	blx	r4
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
   8030a:	f89d 1006 	ldrb.w	r1, [sp, #6]
   8030e:	481d      	ldr	r0, [pc, #116]	; (80384 <CAN0_Handler+0xb0>)
   80310:	47a0      	blx	r4
		for (int i = 0; i < message.data_length; i++)
   80312:	f89d 3006 	ldrb.w	r3, [sp, #6]
   80316:	b16b      	cbz	r3, 80334 <CAN0_Handler+0x60>
   80318:	f10d 0507 	add.w	r5, sp, #7
   8031c:	2400      	movs	r4, #0
		{
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
   8031e:	4f1a      	ldr	r7, [pc, #104]	; (80388 <CAN0_Handler+0xb4>)
   80320:	4e14      	ldr	r6, [pc, #80]	; (80374 <CAN0_Handler+0xa0>)
   80322:	f815 1b01 	ldrb.w	r1, [r5], #1
   80326:	4638      	mov	r0, r7
   80328:	47b0      	blx	r6
		for (int i = 0; i < message.data_length; i++)
   8032a:	3401      	adds	r4, #1
   8032c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   80330:	42a3      	cmp	r3, r4
   80332:	dcf6      	bgt.n	80322 <CAN0_Handler+0x4e>
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
   80334:	4815      	ldr	r0, [pc, #84]	; (8038c <CAN0_Handler+0xb8>)
   80336:	4b0f      	ldr	r3, [pc, #60]	; (80374 <CAN0_Handler+0xa0>)
   80338:	4798      	blx	r3
	}
	
	if(can_sr & CAN_SR_MB0)
   8033a:	f018 0f01 	tst.w	r8, #1
   8033e:	d110      	bne.n	80362 <CAN0_Handler+0x8e>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80340:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80344:	4b12      	ldr	r3, [pc, #72]	; (80390 <CAN0_Handler+0xbc>)
   80346:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   8034a:	b004      	add	sp, #16
   8034c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			can_receive(&message, 1);
   80350:	2101      	movs	r1, #1
   80352:	a801      	add	r0, sp, #4
   80354:	4b09      	ldr	r3, [pc, #36]	; (8037c <CAN0_Handler+0xa8>)
   80356:	4798      	blx	r3
   80358:	e7d2      	b.n	80300 <CAN0_Handler+0x2c>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   8035a:	480e      	ldr	r0, [pc, #56]	; (80394 <CAN0_Handler+0xc0>)
   8035c:	4b05      	ldr	r3, [pc, #20]	; (80374 <CAN0_Handler+0xa0>)
   8035e:	4798      	blx	r3
   80360:	e7ce      	b.n	80300 <CAN0_Handler+0x2c>
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
   80362:	480d      	ldr	r0, [pc, #52]	; (80398 <CAN0_Handler+0xc4>)
   80364:	4b03      	ldr	r3, [pc, #12]	; (80374 <CAN0_Handler+0xa0>)
   80366:	4798      	blx	r3
		CAN0->CAN_IDR = CAN_IER_MB0;
   80368:	2201      	movs	r2, #1
   8036a:	4b03      	ldr	r3, [pc, #12]	; (80378 <CAN0_Handler+0xa4>)
   8036c:	609a      	str	r2, [r3, #8]
   8036e:	e7e7      	b.n	80340 <CAN0_Handler+0x6c>
   80370:	00080a68 	.word	0x00080a68
   80374:	000807e1 	.word	0x000807e1
   80378:	400b4000 	.word	0x400b4000
   8037c:	00080251 	.word	0x00080251
   80380:	00080aa8 	.word	0x00080aa8
   80384:	00080abc 	.word	0x00080abc
   80388:	00080ad8 	.word	0x00080ad8
   8038c:	00080b00 	.word	0x00080b00
   80390:	e000e100 	.word	0xe000e100
   80394:	00080a7c 	.word	0x00080a7c
   80398:	00080adc 	.word	0x00080adc

0008039c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8039c:	e7fe      	b.n	8039c <Dummy_Handler>
	...

000803a0 <Reset_Handler>:
{
   803a0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   803a2:	4b18      	ldr	r3, [pc, #96]	; (80404 <Reset_Handler+0x64>)
   803a4:	4a18      	ldr	r2, [pc, #96]	; (80408 <Reset_Handler+0x68>)
   803a6:	429a      	cmp	r2, r3
   803a8:	d010      	beq.n	803cc <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
   803aa:	4b18      	ldr	r3, [pc, #96]	; (8040c <Reset_Handler+0x6c>)
   803ac:	4a15      	ldr	r2, [pc, #84]	; (80404 <Reset_Handler+0x64>)
   803ae:	429a      	cmp	r2, r3
   803b0:	d20c      	bcs.n	803cc <Reset_Handler+0x2c>
   803b2:	3b01      	subs	r3, #1
   803b4:	1a9b      	subs	r3, r3, r2
   803b6:	f023 0303 	bic.w	r3, r3, #3
   803ba:	3304      	adds	r3, #4
   803bc:	4413      	add	r3, r2
   803be:	4912      	ldr	r1, [pc, #72]	; (80408 <Reset_Handler+0x68>)
                        *pDest++ = *pSrc++;
   803c0:	f851 0b04 	ldr.w	r0, [r1], #4
   803c4:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
   803c8:	429a      	cmp	r2, r3
   803ca:	d1f9      	bne.n	803c0 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
   803cc:	4b10      	ldr	r3, [pc, #64]	; (80410 <Reset_Handler+0x70>)
   803ce:	4a11      	ldr	r2, [pc, #68]	; (80414 <Reset_Handler+0x74>)
   803d0:	429a      	cmp	r2, r3
   803d2:	d20a      	bcs.n	803ea <Reset_Handler+0x4a>
   803d4:	3b01      	subs	r3, #1
   803d6:	1a9b      	subs	r3, r3, r2
   803d8:	f023 0303 	bic.w	r3, r3, #3
   803dc:	3304      	adds	r3, #4
   803de:	4413      	add	r3, r2
                *pDest++ = 0;
   803e0:	2100      	movs	r1, #0
   803e2:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
   803e6:	4293      	cmp	r3, r2
   803e8:	d1fb      	bne.n	803e2 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   803ea:	4b0b      	ldr	r3, [pc, #44]	; (80418 <Reset_Handler+0x78>)
   803ec:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   803f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   803f4:	4a09      	ldr	r2, [pc, #36]	; (8041c <Reset_Handler+0x7c>)
   803f6:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   803f8:	4b09      	ldr	r3, [pc, #36]	; (80420 <Reset_Handler+0x80>)
   803fa:	4798      	blx	r3
        main();
   803fc:	4b09      	ldr	r3, [pc, #36]	; (80424 <Reset_Handler+0x84>)
   803fe:	4798      	blx	r3
   80400:	e7fe      	b.n	80400 <Reset_Handler+0x60>
   80402:	bf00      	nop
   80404:	20000000 	.word	0x20000000
   80408:	00080b54 	.word	0x00080b54
   8040c:	20000434 	.word	0x20000434
   80410:	200004c4 	.word	0x200004c4
   80414:	20000434 	.word	0x20000434
   80418:	00080000 	.word	0x00080000
   8041c:	e000ed00 	.word	0xe000ed00
   80420:	000808f9 	.word	0x000808f9
   80424:	000804cd 	.word	0x000804cd

00080428 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80428:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8042c:	4a20      	ldr	r2, [pc, #128]	; (804b0 <SystemInit+0x88>)
   8042e:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   80430:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80434:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   80436:	4b1f      	ldr	r3, [pc, #124]	; (804b4 <SystemInit+0x8c>)
   80438:	6a1b      	ldr	r3, [r3, #32]
   8043a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8043e:	d107      	bne.n	80450 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   80440:	4a1d      	ldr	r2, [pc, #116]	; (804b8 <SystemInit+0x90>)
   80442:	4b1c      	ldr	r3, [pc, #112]	; (804b4 <SystemInit+0x8c>)
   80444:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   80446:	461a      	mov	r2, r3
   80448:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8044a:	f013 0f01 	tst.w	r3, #1
   8044e:	d0fb      	beq.n	80448 <SystemInit+0x20>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   80450:	4a1a      	ldr	r2, [pc, #104]	; (804bc <SystemInit+0x94>)
   80452:	4b18      	ldr	r3, [pc, #96]	; (804b4 <SystemInit+0x8c>)
   80454:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80456:	461a      	mov	r2, r3
   80458:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8045a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8045e:	d0fb      	beq.n	80458 <SystemInit+0x30>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80460:	4a14      	ldr	r2, [pc, #80]	; (804b4 <SystemInit+0x8c>)
   80462:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80464:	f023 0303 	bic.w	r3, r3, #3
   80468:	f043 0301 	orr.w	r3, r3, #1
   8046c:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   8046e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80470:	f013 0f08 	tst.w	r3, #8
   80474:	d0fb      	beq.n	8046e <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80476:	4a12      	ldr	r2, [pc, #72]	; (804c0 <SystemInit+0x98>)
   80478:	4b0e      	ldr	r3, [pc, #56]	; (804b4 <SystemInit+0x8c>)
   8047a:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   8047c:	461a      	mov	r2, r3
   8047e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80480:	f013 0f02 	tst.w	r3, #2
   80484:	d0fb      	beq.n	8047e <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80486:	2211      	movs	r2, #17
   80488:	4b0a      	ldr	r3, [pc, #40]	; (804b4 <SystemInit+0x8c>)
   8048a:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8048c:	461a      	mov	r2, r3
   8048e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80490:	f013 0f08 	tst.w	r3, #8
   80494:	d0fb      	beq.n	8048e <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80496:	2212      	movs	r2, #18
   80498:	4b06      	ldr	r3, [pc, #24]	; (804b4 <SystemInit+0x8c>)
   8049a:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8049c:	461a      	mov	r2, r3
   8049e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804a0:	f013 0f08 	tst.w	r3, #8
   804a4:	d0fb      	beq.n	8049e <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   804a6:	4a07      	ldr	r2, [pc, #28]	; (804c4 <SystemInit+0x9c>)
   804a8:	4b07      	ldr	r3, [pc, #28]	; (804c8 <SystemInit+0xa0>)
   804aa:	601a      	str	r2, [r3, #0]
   804ac:	4770      	bx	lr
   804ae:	bf00      	nop
   804b0:	400e0a00 	.word	0x400e0a00
   804b4:	400e0600 	.word	0x400e0600
   804b8:	00370809 	.word	0x00370809
   804bc:	01370809 	.word	0x01370809
   804c0:	200d3f01 	.word	0x200d3f01
   804c4:	0501bd00 	.word	0x0501bd00
   804c8:	20000000 	.word	0x20000000

000804cc <main>:
 }

CAN_MESSAGE message;

int main(void)
{
   804cc:	b508      	push	{r3, lr}
	
	SystemInit();
   804ce:	4b0a      	ldr	r3, [pc, #40]	; (804f8 <main+0x2c>)
   804d0:	4798      	blx	r3
	configure_uart();
   804d2:	4b0a      	ldr	r3, [pc, #40]	; (804fc <main+0x30>)
   804d4:	4798      	blx	r3
	can_init(CAN_BR, 1,1);
   804d6:	2201      	movs	r2, #1
   804d8:	4611      	mov	r1, r2
   804da:	4809      	ldr	r0, [pc, #36]	; (80500 <main+0x34>)
   804dc:	4b09      	ldr	r3, [pc, #36]	; (80504 <main+0x38>)
   804de:	4798      	blx	r3
	//can_init_def_tx_rx_mb(CAN_BR);
	WDT->WDT_MR = WDT_MR_WDDIS;
   804e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804e4:	4b08      	ldr	r3, [pc, #32]	; (80508 <main+0x3c>)
   804e6:	605a      	str	r2, [r3, #4]
	
	while (1)
	{
		//can_receive(&message,0);
		printf("data: %d\n\r", message.data);
   804e8:	4e08      	ldr	r6, [pc, #32]	; (8050c <main+0x40>)
   804ea:	4d09      	ldr	r5, [pc, #36]	; (80510 <main+0x44>)
   804ec:	4c09      	ldr	r4, [pc, #36]	; (80514 <main+0x48>)
   804ee:	4631      	mov	r1, r6
   804f0:	4628      	mov	r0, r5
   804f2:	47a0      	blx	r4
   804f4:	e7fb      	b.n	804ee <main+0x22>
   804f6:	bf00      	nop
   804f8:	00080429 	.word	0x00080429
   804fc:	00080805 	.word	0x00080805
   80500:	00290561 	.word	0x00290561
   80504:	00080161 	.word	0x00080161
   80508:	400e1a50 	.word	0x400e1a50
   8050c:	20000453 	.word	0x20000453
   80510:	00080af8 	.word	0x00080af8
   80514:	000807e1 	.word	0x000807e1

00080518 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8051c:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   8051e:	1e16      	subs	r6, r2, #0
   80520:	dd48      	ble.n	805b4 <prints+0x9c>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   80522:	780a      	ldrb	r2, [r1, #0]
   80524:	2a00      	cmp	r2, #0
   80526:	d035      	beq.n	80594 <prints+0x7c>
   80528:	460a      	mov	r2, r1
   8052a:	2400      	movs	r4, #0
   8052c:	3401      	adds	r4, #1
   8052e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   80532:	2900      	cmp	r1, #0
   80534:	d1fa      	bne.n	8052c <prints+0x14>
		if (len >= width) width = 0;
   80536:	42a6      	cmp	r6, r4
   80538:	dc2d      	bgt.n	80596 <prints+0x7e>
   8053a:	2400      	movs	r4, #0
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
   8053c:	f003 0202 	and.w	r2, r3, #2
   80540:	2a00      	cmp	r2, #0
   80542:	bf0c      	ite	eq
   80544:	f04f 0820 	moveq.w	r8, #32
   80548:	f04f 0830 	movne.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
   8054c:	f013 0301 	ands.w	r3, r3, #1
   80550:	d123      	bne.n	8059a <prints+0x82>
		for ( ; width > 0; --width) {
   80552:	2c00      	cmp	r4, #0
   80554:	dd28      	ble.n	805a8 <prints+0x90>
   80556:	4626      	mov	r6, r4
	(void) uart_putchar(c);  //Send characters to uart
   80558:	fa5f f988 	uxtb.w	r9, r8
   8055c:	4f18      	ldr	r7, [pc, #96]	; (805c0 <prints+0xa8>)
   8055e:	4648      	mov	r0, r9
   80560:	47b8      	blx	r7
		for ( ; width > 0; --width) {
   80562:	3e01      	subs	r6, #1
   80564:	d1fb      	bne.n	8055e <prints+0x46>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   80566:	7828      	ldrb	r0, [r5, #0]
   80568:	b188      	cbz	r0, 8058e <prints+0x76>
	(void) uart_putchar(c);  //Send characters to uart
   8056a:	4f15      	ldr	r7, [pc, #84]	; (805c0 <prints+0xa8>)
   8056c:	47b8      	blx	r7
		printchar (out, *string);
		++pc;
   8056e:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80570:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80574:	2800      	cmp	r0, #0
   80576:	d1f9      	bne.n	8056c <prints+0x54>
	}
	for ( ; width > 0; --width) {
   80578:	2e00      	cmp	r6, #0
   8057a:	dd08      	ble.n	8058e <prints+0x76>
   8057c:	4635      	mov	r5, r6
	(void) uart_putchar(c);  //Send characters to uart
   8057e:	fa5f f888 	uxtb.w	r8, r8
   80582:	4f0f      	ldr	r7, [pc, #60]	; (805c0 <prints+0xa8>)
   80584:	4640      	mov	r0, r8
   80586:	47b8      	blx	r7
	for ( ; width > 0; --width) {
   80588:	3d01      	subs	r5, #1
   8058a:	d1fb      	bne.n	80584 <prints+0x6c>
   8058c:	4434      	add	r4, r6
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
   8058e:	4620      	mov	r0, r4
   80590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (ptr = string; *ptr; ++ptr) ++len;
   80594:	2400      	movs	r4, #0
		else width -= len;
   80596:	1b34      	subs	r4, r6, r4
   80598:	e7d0      	b.n	8053c <prints+0x24>
   8059a:	4626      	mov	r6, r4
	for ( ; *string ; ++string) {
   8059c:	7828      	ldrb	r0, [r5, #0]
   8059e:	b108      	cbz	r0, 805a4 <prints+0x8c>
	register int pc = 0, padchar = ' ';
   805a0:	2400      	movs	r4, #0
   805a2:	e7e2      	b.n	8056a <prints+0x52>
   805a4:	2400      	movs	r4, #0
   805a6:	e7e7      	b.n	80578 <prints+0x60>
		for ( ; width > 0; --width) {
   805a8:	4626      	mov	r6, r4
   805aa:	461c      	mov	r4, r3
   805ac:	e7db      	b.n	80566 <prints+0x4e>
	register int pc = 0, padchar = ' ';
   805ae:	f04f 0820 	mov.w	r8, #32
   805b2:	e7d8      	b.n	80566 <prints+0x4e>
	if (!(pad & PAD_RIGHT)) {
   805b4:	f013 0401 	ands.w	r4, r3, #1
   805b8:	d0f9      	beq.n	805ae <prints+0x96>
	register int pc = 0, padchar = ' ';
   805ba:	f04f 0820 	mov.w	r8, #32
   805be:	e7ed      	b.n	8059c <prints+0x84>
   805c0:	0008086d 	.word	0x0008086d

000805c4 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   805c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   805c6:	b085      	sub	sp, #20
   805c8:	4607      	mov	r7, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   805ca:	b381      	cbz	r1, 8062e <printi+0x6a>
   805cc:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   805ce:	b10b      	cbz	r3, 805d4 <printi+0x10>
   805d0:	2a0a      	cmp	r2, #10
   805d2:	d038      	beq.n	80646 <printi+0x82>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   805d4:	2300      	movs	r3, #0
   805d6:	f88d 300f 	strb.w	r3, [sp, #15]

	while (u) {
   805da:	2600      	movs	r6, #0
   805dc:	2900      	cmp	r1, #0
   805de:	d046      	beq.n	8066e <printi+0xaa>
   805e0:	f10d 050f 	add.w	r5, sp, #15
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
   805e4:	990c      	ldr	r1, [sp, #48]	; 0x30
   805e6:	393a      	subs	r1, #58	; 0x3a
		t = u % b;
   805e8:	fbb4 f3f2 	udiv	r3, r4, r2
   805ec:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   805f0:	2b09      	cmp	r3, #9
			t += letbase - '0' - 10;
   805f2:	bfc8      	it	gt
   805f4:	185b      	addgt	r3, r3, r1
		*--s = t + '0';
   805f6:	3330      	adds	r3, #48	; 0x30
   805f8:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   805fc:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   80600:	2c00      	cmp	r4, #0
   80602:	d1f1      	bne.n	805e8 <printi+0x24>
	}

	if (neg) {
   80604:	b156      	cbz	r6, 8061c <printi+0x58>
		if( width && (pad & PAD_ZERO) ) {
   80606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80608:	b11b      	cbz	r3, 80612 <printi+0x4e>
   8060a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8060c:	f013 0f02 	tst.w	r3, #2
   80610:	d125      	bne.n	8065e <printi+0x9a>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80612:	232d      	movs	r3, #45	; 0x2d
   80614:	f805 3c01 	strb.w	r3, [r5, #-1]
   80618:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   8061a:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   8061c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8061e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80620:	4629      	mov	r1, r5
   80622:	4638      	mov	r0, r7
   80624:	4c14      	ldr	r4, [pc, #80]	; (80678 <printi+0xb4>)
   80626:	47a0      	blx	r4
   80628:	4430      	add	r0, r6
}
   8062a:	b005      	add	sp, #20
   8062c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_buf[0] = '0';
   8062e:	2330      	movs	r3, #48	; 0x30
   80630:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80634:	2300      	movs	r3, #0
   80636:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   8063a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8063c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8063e:	a901      	add	r1, sp, #4
   80640:	4c0d      	ldr	r4, [pc, #52]	; (80678 <printi+0xb4>)
   80642:	47a0      	blx	r4
   80644:	e7f1      	b.n	8062a <printi+0x66>
	if (sg && b == 10 && i < 0) {
   80646:	2900      	cmp	r1, #0
   80648:	dac4      	bge.n	805d4 <printi+0x10>
		u = -i;
   8064a:	424c      	negs	r4, r1
	*s = '\0';
   8064c:	2300      	movs	r3, #0
   8064e:	f88d 300f 	strb.w	r3, [sp, #15]
	s = print_buf + PRINT_BUF_LEN-1;
   80652:	f10d 050f 	add.w	r5, sp, #15
	while (u) {
   80656:	2c00      	cmp	r4, #0
   80658:	d0d5      	beq.n	80606 <printi+0x42>
		neg = 1;
   8065a:	2601      	movs	r6, #1
   8065c:	e7c0      	b.n	805e0 <printi+0x1c>
	(void) uart_putchar(c);  //Send characters to uart
   8065e:	202d      	movs	r0, #45	; 0x2d
   80660:	4b06      	ldr	r3, [pc, #24]	; (8067c <printi+0xb8>)
   80662:	4798      	blx	r3
			--width;
   80664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80666:	3b01      	subs	r3, #1
   80668:	930a      	str	r3, [sp, #40]	; 0x28
			++pc;
   8066a:	2601      	movs	r6, #1
			--width;
   8066c:	e7d6      	b.n	8061c <printi+0x58>
	register int t, neg = 0, pc = 0;
   8066e:	461e      	mov	r6, r3
	s = print_buf + PRINT_BUF_LEN-1;
   80670:	f10d 050f 	add.w	r5, sp, #15
   80674:	e7d2      	b.n	8061c <printi+0x58>
   80676:	bf00      	nop
   80678:	00080519 	.word	0x00080519
   8067c:	0008086d 	.word	0x0008086d

00080680 <print>:

static int print( char **out, const char *format, va_list args )
{
   80680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80684:	b087      	sub	sp, #28
   80686:	4680      	mov	r8, r0
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   80688:	780b      	ldrb	r3, [r1, #0]
   8068a:	2b00      	cmp	r3, #0
   8068c:	f000 8094 	beq.w	807b8 <print+0x138>
   80690:	468b      	mov	fp, r1
   80692:	4617      	mov	r7, r2
   80694:	2500      	movs	r5, #0
	(void) uart_putchar(c);  //Send characters to uart
   80696:	4e4e      	ldr	r6, [pc, #312]	; (807d0 <print+0x150>)
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
   80698:	f8df a13c 	ldr.w	sl, [pc, #316]	; 807d8 <print+0x158>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   8069c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 807dc <print+0x15c>
   806a0:	e046      	b.n	80730 <print+0xb0>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   806a2:	2200      	movs	r2, #0
   806a4:	e070      	b.n	80788 <print+0x108>
				register char *s = (char *)va_arg( args, int );
   806a6:	6839      	ldr	r1, [r7, #0]
   806a8:	3704      	adds	r7, #4
				pc += prints (out, s?s:"(null)", width, pad);
   806aa:	484a      	ldr	r0, [pc, #296]	; (807d4 <print+0x154>)
   806ac:	2900      	cmp	r1, #0
   806ae:	bf08      	it	eq
   806b0:	4601      	moveq	r1, r0
   806b2:	4640      	mov	r0, r8
   806b4:	47d0      	blx	sl
   806b6:	4405      	add	r5, r0
				continue;
   806b8:	e035      	b.n	80726 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   806ba:	6839      	ldr	r1, [r7, #0]
   806bc:	3704      	adds	r7, #4
   806be:	2061      	movs	r0, #97	; 0x61
   806c0:	9002      	str	r0, [sp, #8]
   806c2:	9301      	str	r3, [sp, #4]
   806c4:	9200      	str	r2, [sp, #0]
   806c6:	2301      	movs	r3, #1
   806c8:	220a      	movs	r2, #10
   806ca:	4640      	mov	r0, r8
   806cc:	47c8      	blx	r9
   806ce:	4405      	add	r5, r0
				continue;
   806d0:	e029      	b.n	80726 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   806d2:	6839      	ldr	r1, [r7, #0]
   806d4:	3704      	adds	r7, #4
   806d6:	2061      	movs	r0, #97	; 0x61
   806d8:	9002      	str	r0, [sp, #8]
   806da:	9301      	str	r3, [sp, #4]
   806dc:	9200      	str	r2, [sp, #0]
   806de:	2300      	movs	r3, #0
   806e0:	2210      	movs	r2, #16
   806e2:	4640      	mov	r0, r8
   806e4:	47c8      	blx	r9
   806e6:	4405      	add	r5, r0
				continue;
   806e8:	e01d      	b.n	80726 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   806ea:	6839      	ldr	r1, [r7, #0]
   806ec:	3704      	adds	r7, #4
   806ee:	2041      	movs	r0, #65	; 0x41
   806f0:	9002      	str	r0, [sp, #8]
   806f2:	9301      	str	r3, [sp, #4]
   806f4:	9200      	str	r2, [sp, #0]
   806f6:	2300      	movs	r3, #0
   806f8:	2210      	movs	r2, #16
   806fa:	4640      	mov	r0, r8
   806fc:	47c8      	blx	r9
   806fe:	4405      	add	r5, r0
				continue;
   80700:	e011      	b.n	80726 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80702:	6839      	ldr	r1, [r7, #0]
   80704:	3704      	adds	r7, #4
   80706:	2061      	movs	r0, #97	; 0x61
   80708:	9002      	str	r0, [sp, #8]
   8070a:	9301      	str	r3, [sp, #4]
   8070c:	9200      	str	r2, [sp, #0]
   8070e:	2300      	movs	r3, #0
   80710:	220a      	movs	r2, #10
   80712:	4640      	mov	r0, r8
   80714:	47c8      	blx	r9
   80716:	4405      	add	r5, r0
				continue;
   80718:	e005      	b.n	80726 <print+0xa6>
			++format;
   8071a:	46a3      	mov	fp, r4
	(void) uart_putchar(c);  //Send characters to uart
   8071c:	f89b 0000 	ldrb.w	r0, [fp]
   80720:	47b0      	blx	r6
			}
		}
		else {
		out:
			printchar (out, *format);
			++pc;
   80722:	3501      	adds	r5, #1
   80724:	465c      	mov	r4, fp
	for (; *format != 0; ++format) {
   80726:	f104 0b01 	add.w	fp, r4, #1
   8072a:	7863      	ldrb	r3, [r4, #1]
   8072c:	2b00      	cmp	r3, #0
   8072e:	d044      	beq.n	807ba <print+0x13a>
		if (*format == '%') {
   80730:	2b25      	cmp	r3, #37	; 0x25
   80732:	d1f3      	bne.n	8071c <print+0x9c>
			++format;
   80734:	f10b 0401 	add.w	r4, fp, #1
			if (*format == '\0') break;
   80738:	f89b 3001 	ldrb.w	r3, [fp, #1]
   8073c:	2b00      	cmp	r3, #0
   8073e:	d03c      	beq.n	807ba <print+0x13a>
			if (*format == '%') goto out;
   80740:	2b25      	cmp	r3, #37	; 0x25
   80742:	d0ea      	beq.n	8071a <print+0x9a>
			if (*format == '-') {
   80744:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
   80746:	bf06      	itte	eq
   80748:	f10b 0402 	addeq.w	r4, fp, #2
				pad = PAD_RIGHT;
   8074c:	2301      	moveq	r3, #1
			width = pad = 0;
   8074e:	2300      	movne	r3, #0
			while (*format == '0') {
   80750:	7822      	ldrb	r2, [r4, #0]
   80752:	2a30      	cmp	r2, #48	; 0x30
   80754:	d105      	bne.n	80762 <print+0xe2>
				pad |= PAD_ZERO;
   80756:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   8075a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   8075e:	2a30      	cmp	r2, #48	; 0x30
   80760:	d0f9      	beq.n	80756 <print+0xd6>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80762:	7821      	ldrb	r1, [r4, #0]
   80764:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80768:	b2d2      	uxtb	r2, r2
   8076a:	2a09      	cmp	r2, #9
   8076c:	d899      	bhi.n	806a2 <print+0x22>
   8076e:	2200      	movs	r2, #0
				width *= 10;
   80770:	eb02 0282 	add.w	r2, r2, r2, lsl #2
				width += *format - '0';
   80774:	3930      	subs	r1, #48	; 0x30
   80776:	eb01 0242 	add.w	r2, r1, r2, lsl #1
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   8077a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   8077e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80782:	b2c0      	uxtb	r0, r0
   80784:	2809      	cmp	r0, #9
   80786:	d9f3      	bls.n	80770 <print+0xf0>
			if( *format == 's' ) {
   80788:	2973      	cmp	r1, #115	; 0x73
   8078a:	d08c      	beq.n	806a6 <print+0x26>
			if( *format == 'd' ) {
   8078c:	2964      	cmp	r1, #100	; 0x64
   8078e:	d094      	beq.n	806ba <print+0x3a>
			if( *format == 'x' ) {
   80790:	2978      	cmp	r1, #120	; 0x78
   80792:	d09e      	beq.n	806d2 <print+0x52>
			if( *format == 'X' ) {
   80794:	2958      	cmp	r1, #88	; 0x58
   80796:	d0a8      	beq.n	806ea <print+0x6a>
			if( *format == 'u' ) {
   80798:	2975      	cmp	r1, #117	; 0x75
   8079a:	d0b2      	beq.n	80702 <print+0x82>
			if( *format == 'c' ) {
   8079c:	2963      	cmp	r1, #99	; 0x63
   8079e:	d1c2      	bne.n	80726 <print+0xa6>
				scr[0] = (char)va_arg( args, int );
   807a0:	6839      	ldr	r1, [r7, #0]
   807a2:	3704      	adds	r7, #4
   807a4:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
   807a8:	2100      	movs	r1, #0
   807aa:	f88d 1015 	strb.w	r1, [sp, #21]
				pc += prints (out, scr, width, pad);
   807ae:	a905      	add	r1, sp, #20
   807b0:	4640      	mov	r0, r8
   807b2:	47d0      	blx	sl
   807b4:	4405      	add	r5, r0
				continue;
   807b6:	e7b6      	b.n	80726 <print+0xa6>
	register int pc = 0;
   807b8:	2500      	movs	r5, #0
		}
	}
	if (out) **out = '\0';
   807ba:	f1b8 0f00 	cmp.w	r8, #0
   807be:	d003      	beq.n	807c8 <print+0x148>
   807c0:	f8d8 3000 	ldr.w	r3, [r8]
   807c4:	2200      	movs	r2, #0
   807c6:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   807c8:	4628      	mov	r0, r5
   807ca:	b007      	add	sp, #28
   807cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   807d0:	0008086d 	.word	0x0008086d
   807d4:	00080b04 	.word	0x00080b04
   807d8:	00080519 	.word	0x00080519
   807dc:	000805c5 	.word	0x000805c5

000807e0 <printf>:

int printf(const char *format, ...)
{
   807e0:	b40f      	push	{r0, r1, r2, r3}
   807e2:	b500      	push	{lr}
   807e4:	b083      	sub	sp, #12
   807e6:	aa04      	add	r2, sp, #16
   807e8:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   807ec:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   807ee:	2000      	movs	r0, #0
   807f0:	4b03      	ldr	r3, [pc, #12]	; (80800 <printf+0x20>)
   807f2:	4798      	blx	r3
}
   807f4:	b003      	add	sp, #12
   807f6:	f85d eb04 	ldr.w	lr, [sp], #4
   807fa:	b004      	add	sp, #16
   807fc:	4770      	bx	lr
   807fe:	bf00      	nop
   80800:	00080681 	.word	0x00080681

00080804 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80804:	4b16      	ldr	r3, [pc, #88]	; (80860 <configure_uart+0x5c>)
   80806:	2200      	movs	r2, #0
   80808:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   8080a:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   8080c:	4b15      	ldr	r3, [pc, #84]	; (80864 <configure_uart+0x60>)
   8080e:	f44f 7140 	mov.w	r1, #768	; 0x300
   80812:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80814:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80816:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80818:	6f18      	ldr	r0, [r3, #112]	; 0x70
   8081a:	4002      	ands	r2, r0
   8081c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80820:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80822:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80824:	f44f 7280 	mov.w	r2, #256	; 0x100
   80828:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8082c:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   8082e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80832:	21ac      	movs	r1, #172	; 0xac
   80834:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80836:	f240 2123 	movw	r1, #547	; 0x223
   8083a:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   8083c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80840:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80842:	f240 2102 	movw	r1, #514	; 0x202
   80846:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   8084a:	f04f 31ff 	mov.w	r1, #4294967295
   8084e:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80850:	21e1      	movs	r1, #225	; 0xe1
   80852:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80854:	4904      	ldr	r1, [pc, #16]	; (80868 <configure_uart+0x64>)
   80856:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80858:	2250      	movs	r2, #80	; 0x50
   8085a:	601a      	str	r2, [r3, #0]
   8085c:	4770      	bx	lr
   8085e:	bf00      	nop
   80860:	2000045c 	.word	0x2000045c
   80864:	400e0e00 	.word	0x400e0e00
   80868:	e000e100 	.word	0xe000e100

0008086c <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   8086c:	4b07      	ldr	r3, [pc, #28]	; (8088c <uart_putchar+0x20>)
   8086e:	695b      	ldr	r3, [r3, #20]
   80870:	f013 0f02 	tst.w	r3, #2
   80874:	d008      	beq.n	80888 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80876:	4b05      	ldr	r3, [pc, #20]	; (8088c <uart_putchar+0x20>)
   80878:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   8087a:	461a      	mov	r2, r3
   8087c:	6953      	ldr	r3, [r2, #20]
   8087e:	f413 7f00 	tst.w	r3, #512	; 0x200
   80882:	d0fb      	beq.n	8087c <uart_putchar+0x10>
	return 0;
   80884:	2000      	movs	r0, #0
   80886:	4770      	bx	lr
	return 1;
   80888:	2001      	movs	r0, #1
}
   8088a:	4770      	bx	lr
   8088c:	400e0800 	.word	0x400e0800

00080890 <UART_Handler>:

void UART_Handler(void)
{
   80890:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80892:	4b15      	ldr	r3, [pc, #84]	; (808e8 <UART_Handler+0x58>)
   80894:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80896:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   8089a:	d003      	beq.n	808a4 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   8089c:	f44f 71a8 	mov.w	r1, #336	; 0x150
   808a0:	4a11      	ldr	r2, [pc, #68]	; (808e8 <UART_Handler+0x58>)
   808a2:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   808a4:	f013 0f01 	tst.w	r3, #1
   808a8:	d012      	beq.n	808d0 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   808aa:	4810      	ldr	r0, [pc, #64]	; (808ec <UART_Handler+0x5c>)
   808ac:	7842      	ldrb	r2, [r0, #1]
   808ae:	1c53      	adds	r3, r2, #1
   808b0:	4259      	negs	r1, r3
   808b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   808b6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   808ba:	bf58      	it	pl
   808bc:	424b      	negpl	r3, r1
   808be:	7801      	ldrb	r1, [r0, #0]
   808c0:	428b      	cmp	r3, r1
   808c2:	d006      	beq.n	808d2 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   808c4:	4908      	ldr	r1, [pc, #32]	; (808e8 <UART_Handler+0x58>)
   808c6:	6988      	ldr	r0, [r1, #24]
   808c8:	4908      	ldr	r1, [pc, #32]	; (808ec <UART_Handler+0x5c>)
   808ca:	440a      	add	r2, r1
   808cc:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   808ce:	704b      	strb	r3, [r1, #1]
   808d0:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   808d2:	4807      	ldr	r0, [pc, #28]	; (808f0 <UART_Handler+0x60>)
   808d4:	4b07      	ldr	r3, [pc, #28]	; (808f4 <UART_Handler+0x64>)
   808d6:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   808d8:	4b03      	ldr	r3, [pc, #12]	; (808e8 <UART_Handler+0x58>)
   808da:	699a      	ldr	r2, [r3, #24]
   808dc:	4b03      	ldr	r3, [pc, #12]	; (808ec <UART_Handler+0x5c>)
   808de:	7859      	ldrb	r1, [r3, #1]
   808e0:	440b      	add	r3, r1
   808e2:	709a      	strb	r2, [r3, #2]
			return;
   808e4:	bd08      	pop	{r3, pc}
   808e6:	bf00      	nop
   808e8:	400e0800 	.word	0x400e0800
   808ec:	2000045c 	.word	0x2000045c
   808f0:	00080b0c 	.word	0x00080b0c
   808f4:	000807e1 	.word	0x000807e1

000808f8 <__libc_init_array>:
   808f8:	b570      	push	{r4, r5, r6, lr}
   808fa:	4e0f      	ldr	r6, [pc, #60]	; (80938 <__libc_init_array+0x40>)
   808fc:	4d0f      	ldr	r5, [pc, #60]	; (8093c <__libc_init_array+0x44>)
   808fe:	1b76      	subs	r6, r6, r5
   80900:	10b6      	asrs	r6, r6, #2
   80902:	bf18      	it	ne
   80904:	2400      	movne	r4, #0
   80906:	d005      	beq.n	80914 <__libc_init_array+0x1c>
   80908:	3401      	adds	r4, #1
   8090a:	f855 3b04 	ldr.w	r3, [r5], #4
   8090e:	4798      	blx	r3
   80910:	42a6      	cmp	r6, r4
   80912:	d1f9      	bne.n	80908 <__libc_init_array+0x10>
   80914:	4e0a      	ldr	r6, [pc, #40]	; (80940 <__libc_init_array+0x48>)
   80916:	4d0b      	ldr	r5, [pc, #44]	; (80944 <__libc_init_array+0x4c>)
   80918:	f000 f90a 	bl	80b30 <_init>
   8091c:	1b76      	subs	r6, r6, r5
   8091e:	10b6      	asrs	r6, r6, #2
   80920:	bf18      	it	ne
   80922:	2400      	movne	r4, #0
   80924:	d006      	beq.n	80934 <__libc_init_array+0x3c>
   80926:	3401      	adds	r4, #1
   80928:	f855 3b04 	ldr.w	r3, [r5], #4
   8092c:	4798      	blx	r3
   8092e:	42a6      	cmp	r6, r4
   80930:	d1f9      	bne.n	80926 <__libc_init_array+0x2e>
   80932:	bd70      	pop	{r4, r5, r6, pc}
   80934:	bd70      	pop	{r4, r5, r6, pc}
   80936:	bf00      	nop
   80938:	00080b3c 	.word	0x00080b3c
   8093c:	00080b3c 	.word	0x00080b3c
   80940:	00080b44 	.word	0x00080b44
   80944:	00080b3c 	.word	0x00080b3c

00080948 <register_fini>:
   80948:	4b02      	ldr	r3, [pc, #8]	; (80954 <register_fini+0xc>)
   8094a:	b113      	cbz	r3, 80952 <register_fini+0xa>
   8094c:	4802      	ldr	r0, [pc, #8]	; (80958 <register_fini+0x10>)
   8094e:	f000 b805 	b.w	8095c <atexit>
   80952:	4770      	bx	lr
   80954:	00000000 	.word	0x00000000
   80958:	00080969 	.word	0x00080969

0008095c <atexit>:
   8095c:	2300      	movs	r3, #0
   8095e:	4601      	mov	r1, r0
   80960:	461a      	mov	r2, r3
   80962:	4618      	mov	r0, r3
   80964:	f000 b81e 	b.w	809a4 <__register_exitproc>

00080968 <__libc_fini_array>:
   80968:	b538      	push	{r3, r4, r5, lr}
   8096a:	4c0a      	ldr	r4, [pc, #40]	; (80994 <__libc_fini_array+0x2c>)
   8096c:	4d0a      	ldr	r5, [pc, #40]	; (80998 <__libc_fini_array+0x30>)
   8096e:	1b64      	subs	r4, r4, r5
   80970:	10a4      	asrs	r4, r4, #2
   80972:	d00a      	beq.n	8098a <__libc_fini_array+0x22>
   80974:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80978:	3b01      	subs	r3, #1
   8097a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8097e:	3c01      	subs	r4, #1
   80980:	f855 3904 	ldr.w	r3, [r5], #-4
   80984:	4798      	blx	r3
   80986:	2c00      	cmp	r4, #0
   80988:	d1f9      	bne.n	8097e <__libc_fini_array+0x16>
   8098a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8098e:	f000 b8d9 	b.w	80b44 <_fini>
   80992:	bf00      	nop
   80994:	00080b54 	.word	0x00080b54
   80998:	00080b50 	.word	0x00080b50

0008099c <__retarget_lock_acquire_recursive>:
   8099c:	4770      	bx	lr
   8099e:	bf00      	nop

000809a0 <__retarget_lock_release_recursive>:
   809a0:	4770      	bx	lr
   809a2:	bf00      	nop

000809a4 <__register_exitproc>:
   809a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   809a8:	4d2c      	ldr	r5, [pc, #176]	; (80a5c <__register_exitproc+0xb8>)
   809aa:	4606      	mov	r6, r0
   809ac:	6828      	ldr	r0, [r5, #0]
   809ae:	4698      	mov	r8, r3
   809b0:	460f      	mov	r7, r1
   809b2:	4691      	mov	r9, r2
   809b4:	f7ff fff2 	bl	8099c <__retarget_lock_acquire_recursive>
   809b8:	4b29      	ldr	r3, [pc, #164]	; (80a60 <__register_exitproc+0xbc>)
   809ba:	681c      	ldr	r4, [r3, #0]
   809bc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   809c0:	2b00      	cmp	r3, #0
   809c2:	d03e      	beq.n	80a42 <__register_exitproc+0x9e>
   809c4:	685a      	ldr	r2, [r3, #4]
   809c6:	2a1f      	cmp	r2, #31
   809c8:	dc1c      	bgt.n	80a04 <__register_exitproc+0x60>
   809ca:	f102 0e01 	add.w	lr, r2, #1
   809ce:	b176      	cbz	r6, 809ee <__register_exitproc+0x4a>
   809d0:	2101      	movs	r1, #1
   809d2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   809d6:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   809da:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   809de:	4091      	lsls	r1, r2
   809e0:	4308      	orrs	r0, r1
   809e2:	2e02      	cmp	r6, #2
   809e4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   809e8:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   809ec:	d023      	beq.n	80a36 <__register_exitproc+0x92>
   809ee:	3202      	adds	r2, #2
   809f0:	f8c3 e004 	str.w	lr, [r3, #4]
   809f4:	6828      	ldr	r0, [r5, #0]
   809f6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   809fa:	f7ff ffd1 	bl	809a0 <__retarget_lock_release_recursive>
   809fe:	2000      	movs	r0, #0
   80a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80a04:	4b17      	ldr	r3, [pc, #92]	; (80a64 <__register_exitproc+0xc0>)
   80a06:	b30b      	cbz	r3, 80a4c <__register_exitproc+0xa8>
   80a08:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80a0c:	f3af 8000 	nop.w
   80a10:	4603      	mov	r3, r0
   80a12:	b1d8      	cbz	r0, 80a4c <__register_exitproc+0xa8>
   80a14:	2000      	movs	r0, #0
   80a16:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80a1a:	f04f 0e01 	mov.w	lr, #1
   80a1e:	6058      	str	r0, [r3, #4]
   80a20:	6019      	str	r1, [r3, #0]
   80a22:	4602      	mov	r2, r0
   80a24:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80a28:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80a2c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80a30:	2e00      	cmp	r6, #0
   80a32:	d0dc      	beq.n	809ee <__register_exitproc+0x4a>
   80a34:	e7cc      	b.n	809d0 <__register_exitproc+0x2c>
   80a36:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80a3a:	4301      	orrs	r1, r0
   80a3c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80a40:	e7d5      	b.n	809ee <__register_exitproc+0x4a>
   80a42:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80a46:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80a4a:	e7bb      	b.n	809c4 <__register_exitproc+0x20>
   80a4c:	6828      	ldr	r0, [r5, #0]
   80a4e:	f7ff ffa7 	bl	809a0 <__retarget_lock_release_recursive>
   80a52:	f04f 30ff 	mov.w	r0, #4294967295
   80a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80a5a:	bf00      	nop
   80a5c:	20000430 	.word	0x20000430
   80a60:	00080b2c 	.word	0x00080b2c
   80a64:	00000000 	.word	0x00000000
   80a68:	304e4143 	.word	0x304e4143
   80a6c:	746e6920 	.word	0x746e6920
   80a70:	75727265 	.word	0x75727265
   80a74:	0d0a7470 	.word	0x0d0a7470
   80a78:	00000000 	.word	0x00000000
   80a7c:	304e4143 	.word	0x304e4143
   80a80:	73656d20 	.word	0x73656d20
   80a84:	65676173 	.word	0x65676173
   80a88:	72726120 	.word	0x72726120
   80a8c:	64657669 	.word	0x64657669
   80a90:	206e6920 	.word	0x206e6920
   80a94:	2d6e6f6e 	.word	0x2d6e6f6e
   80a98:	64657375 	.word	0x64657375
   80a9c:	69616d20 	.word	0x69616d20
   80aa0:	786f626c 	.word	0x786f626c
   80aa4:	00000d0a 	.word	0x00000d0a
   80aa8:	7373656d 	.word	0x7373656d
   80aac:	20656761 	.word	0x20656761
   80ab0:	203a6469 	.word	0x203a6469
   80ab4:	0d0a6425 	.word	0x0d0a6425
   80ab8:	00000000 	.word	0x00000000
   80abc:	7373656d 	.word	0x7373656d
   80ac0:	20656761 	.word	0x20656761
   80ac4:	61746164 	.word	0x61746164
   80ac8:	6e656c20 	.word	0x6e656c20
   80acc:	3a687467 	.word	0x3a687467
   80ad0:	0a642520 	.word	0x0a642520
   80ad4:	0000000d 	.word	0x0000000d
   80ad8:	00206425 	.word	0x00206425
   80adc:	304e4143 	.word	0x304e4143
   80ae0:	30424d20 	.word	0x30424d20
   80ae4:	61657220 	.word	0x61657220
   80ae8:	74207964 	.word	0x74207964
   80aec:	6573206f 	.word	0x6573206f
   80af0:	0a20646e 	.word	0x0a20646e
   80af4:	0000000d 	.word	0x0000000d
   80af8:	61746164 	.word	0x61746164
   80afc:	6425203a 	.word	0x6425203a
   80b00:	00000d0a 	.word	0x00000d0a
   80b04:	6c756e28 	.word	0x6c756e28
   80b08:	0000296c 	.word	0x0000296c
   80b0c:	3a525245 	.word	0x3a525245
   80b10:	52415520 	.word	0x52415520
   80b14:	58522054 	.word	0x58522054
   80b18:	66756220 	.word	0x66756220
   80b1c:	20726566 	.word	0x20726566
   80b20:	66207369 	.word	0x66207369
   80b24:	0a6c6c75 	.word	0x0a6c6c75
   80b28:	0000000d 	.word	0x0000000d

00080b2c <_global_impure_ptr>:
   80b2c:	20000008                                ... 

00080b30 <_init>:
   80b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80b32:	bf00      	nop
   80b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80b36:	bc08      	pop	{r3}
   80b38:	469e      	mov	lr, r3
   80b3a:	4770      	bx	lr

00080b3c <__init_array_start>:
   80b3c:	00080949 	.word	0x00080949

00080b40 <__frame_dummy_init_array_entry>:
   80b40:	00080119                                ....

00080b44 <_fini>:
   80b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80b46:	bf00      	nop
   80b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80b4a:	bc08      	pop	{r3}
   80b4c:	469e      	mov	lr, r3
   80b4e:	4770      	bx	lr

00080b50 <__fini_array_start>:
   80b50:	000800f5 	.word	0x000800f5
