
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014c  00800100  0000112e  000011c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000112e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080024c  0080024c  0000130e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000130e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000136c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000208c  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001221  00000000  00000000  00003664  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001321  00000000  00000000  00004885  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000540  00000000  00000000  00005ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000080f  00000000  00000000  000060e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f14  00000000  00000000  000068f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  0000780b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_3>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ee e2       	ldi	r30, 0x2E	; 46
      84:	f1 e1       	ldi	r31, 0x11	; 17
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	ac 34       	cpi	r26, 0x4C	; 76
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	22 e0       	ldi	r18, 0x02	; 2
      94:	ac e4       	ldi	r26, 0x4C	; 76
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ab 35       	cpi	r26, 0x5B	; 91
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 a6 01 	call	0x34c	; 0x34c <main>
      a6:	0c 94 95 08 	jmp	0x112a	; 0x112a <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
}

void adc_write(uint8_t data, uint16_t addr)
{
	volatile char *ext_ram = (char *) 0x1400;
	ext_ram[addr] = data;
      ae:	85 b7       	in	r24, 0x35	; 53
      b0:	80 68       	ori	r24, 0x80	; 128
      b2:	85 bf       	out	0x35, r24	; 53
      b4:	80 b7       	in	r24, 0x30	; 48
      b6:	80 62       	ori	r24, 0x20	; 32
      b8:	80 bf       	out	0x30, r24	; 48
      ba:	30 98       	cbi	0x06, 0	; 6
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	08 95       	ret

000000c2 <adc_clock_signal>:
      c2:	b8 9a       	sbi	0x17, 0	; 23
      c4:	83 b7       	in	r24, 0x33	; 51
      c6:	88 60       	ori	r24, 0x08	; 8
      c8:	83 bf       	out	0x33, r24	; 51
      ca:	83 b7       	in	r24, 0x33	; 51
      cc:	8f 7b       	andi	r24, 0xBF	; 191
      ce:	83 bf       	out	0x33, r24	; 51
      d0:	83 b7       	in	r24, 0x33	; 51
      d2:	80 61       	ori	r24, 0x10	; 16
      d4:	83 bf       	out	0x33, r24	; 51
      d6:	83 b7       	in	r24, 0x33	; 51
      d8:	81 60       	ori	r24, 0x01	; 1
      da:	83 bf       	out	0x33, r24	; 51
      dc:	8a e0       	ldi	r24, 0x0A	; 10
      de:	81 bf       	out	0x31, r24	; 49
      e0:	08 95       	ret

000000e2 <adc_read>:

uint8_t adc_read(uint8_t channel){
	volatile char *adc = (char *) 0x1400;
	uint8_t data;
	
	adc[0] = 0b10000000 | channel;
      e2:	80 68       	ori	r24, 0x80	; 128
      e4:	e0 e0       	ldi	r30, 0x00	; 0
      e6:	f4 e1       	ldi	r31, 0x14	; 20
      e8:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ea:	84 ea       	ldi	r24, 0xA4	; 164
      ec:	8a 95       	dec	r24
      ee:	f1 f7       	brne	.-4      	; 0xec <adc_read+0xa>

	_delay_us(100);
	
	data = adc[0];
      f0:	80 81       	ld	r24, Z
	
	return data;
}
      f2:	08 95       	ret

000000f4 <can_init>:

uint8_t can_flag = 0;

void can_init(){	
	
	mcp2515_driver_init();
      f4:	0e 94 aa 02 	call	0x554	; 0x554 <mcp2515_driver_init>
	
	//mcp2515_write(MCP_CANINTE, MCP_RX_INT);

	//Interrupt:
	// Disable global interrupt
	value = mcp2515_read(MCP_CANSTAT);
      f8:	8e e0       	ldi	r24, 0x0E	; 14
      fa:	0e 94 49 02 	call	0x492	; 0x492 <mcp2515_read>
	if ((value & MODE_MASK) != MODE_LOOPBACK){
      fe:	80 7e       	andi	r24, 0xE0	; 224
     100:	80 34       	cpi	r24, 0x40	; 64
     102:	49 f0       	breq	.+18     	; 0x116 <can_init+0x22>
		printf("MCP2515 is NOT set to LOOPBACK!\n\r");
     104:	8a e0       	ldi	r24, 0x0A	; 10
     106:	91 e0       	ldi	r25, 0x01	; 1
     108:	9f 93       	push	r25
     10a:	8f 93       	push	r24
     10c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <printf>
		return 1;
     110:	0f 90       	pop	r0
     112:	0f 90       	pop	r0
     114:	08 95       	ret
	}
	cli();
     116:	f8 94       	cli
	//mcp2515_bit_modify(MCP_CANINTF, 0xFF, 0x00);
	
	//DDRE &= ~(1<<PE0);
	
	//Enable global interrupts
	sei();
     118:	78 94       	sei
	value = mcp2515_read(MCP_CANSTAT);
     11a:	8e e0       	ldi	r24, 0x0E	; 14
     11c:	0e 94 49 02 	call	0x492	; 0x492 <mcp2515_read>
	if ((value & MODE_MASK) != MODE_LOOPBACK){
     120:	80 7e       	andi	r24, 0xE0	; 224
     122:	80 34       	cpi	r24, 0x40	; 64
     124:	41 f0       	breq	.+16     	; 0x136 <can_init+0x42>
		printf("MCP2515 is NOT set to LOOPBACK!\n\r");
     126:	8a e0       	ldi	r24, 0x0A	; 10
     128:	91 e0       	ldi	r25, 0x01	; 1
     12a:	9f 93       	push	r25
     12c:	8f 93       	push	r24
     12e:	0e 94 73 04 	call	0x8e6	; 0x8e6 <printf>
		return 1;
     132:	0f 90       	pop	r0
     134:	0f 90       	pop	r0
     136:	08 95       	ret

00000138 <can_receive>:
	}
	mcp2515_request_to_send(MCP_RTS_TX1);
	//printf("canstat5: %x \n \r", mcp2515_read(MCP_CANSTAT));
}

void can_receive(can_message *message){
     138:	cf 92       	push	r12
     13a:	df 92       	push	r13
     13c:	ef 92       	push	r14
     13e:	ff 92       	push	r15
     140:	1f 93       	push	r17
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	6c 01       	movw	r12, r24
	
	
	printf("CAN flag: %d\n\r", can_flag);
     148:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <__data_end>
     14c:	1f 92       	push	r1
     14e:	8f 93       	push	r24
     150:	8c e2       	ldi	r24, 0x2C	; 44
     152:	91 e0       	ldi	r25, 0x01	; 1
     154:	9f 93       	push	r25
     156:	8f 93       	push	r24
     158:	0e 94 73 04 	call	0x8e6	; 0x8e6 <printf>
	if (1){
		// Message id
		message->id = (mcp2515_read(MCP_RXB0SIDH << 3)) | (mcp2515_read(MCP_RXB0SIDL) >> 5);
     15c:	88 e0       	ldi	r24, 0x08	; 8
     15e:	0e 94 49 02 	call	0x492	; 0x492 <mcp2515_read>
     162:	c8 2f       	mov	r28, r24
     164:	82 e6       	ldi	r24, 0x62	; 98
     166:	0e 94 49 02 	call	0x492	; 0x492 <mcp2515_read>
     16a:	82 95       	swap	r24
     16c:	86 95       	lsr	r24
     16e:	87 70       	andi	r24, 0x07	; 7
     170:	c8 2b       	or	r28, r24
     172:	8c 2f       	mov	r24, r28
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	f6 01       	movw	r30, r12
     178:	91 83       	std	Z+1, r25	; 0x01
     17a:	80 83       	st	Z, r24
		
		// Message length
		message->length = 0x0F & (mcp2515_read(MCP_RXB0DLC));
     17c:	85 e6       	ldi	r24, 0x65	; 101
     17e:	0e 94 49 02 	call	0x492	; 0x492 <mcp2515_read>
     182:	8f 70       	andi	r24, 0x0F	; 15
     184:	f6 01       	movw	r30, r12
     186:	82 83       	std	Z+2, r24	; 0x02
		printf("--------- MESSAGE LENGTH!! : %d ------------ \n \r",message->length);
     188:	1f 92       	push	r1
     18a:	8f 93       	push	r24
     18c:	8b e3       	ldi	r24, 0x3B	; 59
     18e:	91 e0       	ldi	r25, 0x01	; 1
     190:	9f 93       	push	r25
     192:	8f 93       	push	r24
     194:	0e 94 73 04 	call	0x8e6	; 0x8e6 <printf>

		// Message data
		for (int i = 0; i < message->length; i++){
     198:	f6 01       	movw	r30, r12
     19a:	82 81       	ldd	r24, Z+2	; 0x02
     19c:	2d b7       	in	r18, 0x3d	; 61
     19e:	3e b7       	in	r19, 0x3e	; 62
     1a0:	28 5f       	subi	r18, 0xF8	; 248
     1a2:	3f 4f       	sbci	r19, 0xFF	; 255
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	f8 94       	cli
     1a8:	3e bf       	out	0x3e, r19	; 62
     1aa:	0f be       	out	0x3f, r0	; 63
     1ac:	2d bf       	out	0x3d, r18	; 61
     1ae:	88 23       	and	r24, r24
     1b0:	a9 f0       	breq	.+42     	; 0x1dc <can_receive+0xa4>
     1b2:	76 01       	movw	r14, r12
     1b4:	33 e0       	ldi	r19, 0x03	; 3
     1b6:	e3 0e       	add	r14, r19
     1b8:	f1 1c       	adc	r15, r1
     1ba:	16 e6       	ldi	r17, 0x66	; 102
     1bc:	c0 e0       	ldi	r28, 0x00	; 0
     1be:	d0 e0       	ldi	r29, 0x00	; 0
			message->data[i] = mcp2515_read(MCP_RXB0D0  + i);
     1c0:	81 2f       	mov	r24, r17
     1c2:	0e 94 49 02 	call	0x492	; 0x492 <mcp2515_read>
     1c6:	f7 01       	movw	r30, r14
     1c8:	81 93       	st	Z+, r24
     1ca:	7f 01       	movw	r14, r30
		// Message length
		message->length = 0x0F & (mcp2515_read(MCP_RXB0DLC));
		printf("--------- MESSAGE LENGTH!! : %d ------------ \n \r",message->length);

		// Message data
		for (int i = 0; i < message->length; i++){
     1cc:	21 96       	adiw	r28, 0x01	; 1
     1ce:	1f 5f       	subi	r17, 0xFF	; 255
     1d0:	f6 01       	movw	r30, r12
     1d2:	82 81       	ldd	r24, Z+2	; 0x02
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	c8 17       	cp	r28, r24
     1d8:	d9 07       	cpc	r29, r25
     1da:	94 f3       	brlt	.-28     	; 0x1c0 <can_receive+0x88>
		for (int i = 0; i < 8; i++){
			message.data[i] = mcp2515_read(MCP_RXB1D0 + i);
			printf("DATA1: %c \n \r",message.data[i]);
		}
		*/
		can_flag = 0;
     1dc:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <__data_end>
	}
	else{
		message->id = -1;
		
	}
	mcp2515_bit_modify(MCP_CANINTF, 0xff, 0);
     1e0:	40 e0       	ldi	r20, 0x00	; 0
     1e2:	6f ef       	ldi	r22, 0xFF	; 255
     1e4:	8c e2       	ldi	r24, 0x2C	; 44
     1e6:	0e 94 88 02 	call	0x510	; 0x510 <mcp2515_bit_modify>
}
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	1f 91       	pop	r17
     1f0:	ff 90       	pop	r15
     1f2:	ef 90       	pop	r14
     1f4:	df 90       	pop	r13
     1f6:	cf 90       	pop	r12
     1f8:	08 95       	ret

000001fa <can_transmission_completed>:

uint8_t can_transmission_completed(){
	if (test_bit(mcp2515_read(MCP_TXB0CTRL), 3)){
     1fa:	80 e3       	ldi	r24, 0x30	; 48
     1fc:	0e 94 49 02 	call	0x492	; 0x492 <mcp2515_read>
     200:	83 fb       	bst	r24, 3
     202:	88 27       	eor	r24, r24
     204:	80 f9       	bld	r24, 0
		return 0;
	}
	else{
		return 1;
	}
}
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	89 27       	eor	r24, r25
     20a:	08 95       	ret

0000020c <can_send>:


	
}

void can_send(can_message *message){
     20c:	cf 92       	push	r12
     20e:	df 92       	push	r13
     210:	ef 92       	push	r14
     212:	ff 92       	push	r15
     214:	1f 93       	push	r17
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
     21a:	6c 01       	movw	r12, r24

	if (can_transmission_completed()){
     21c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <can_transmission_completed>
     220:	88 23       	and	r24, r24
     222:	91 f1       	breq	.+100    	; 0x288 <can_send+0x7c>
		//printf("canstat3: %x \n \r", mcp2515_read(MCP_CANSTAT));			
		// Id
		mcp2515_write(MCP_TXB1SIDH, message->id >> 3);
     224:	f6 01       	movw	r30, r12
     226:	60 81       	ld	r22, Z
     228:	71 81       	ldd	r23, Z+1	; 0x01
     22a:	76 95       	lsr	r23
     22c:	67 95       	ror	r22
     22e:	76 95       	lsr	r23
     230:	67 95       	ror	r22
     232:	76 95       	lsr	r23
     234:	67 95       	ror	r22
     236:	81 e4       	ldi	r24, 0x41	; 65
     238:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <mcp2515_write>
		mcp2515_write(MCP_TXB1SIDL, message->id << 5);
     23c:	f6 01       	movw	r30, r12
     23e:	60 81       	ld	r22, Z
     240:	62 95       	swap	r22
     242:	66 0f       	add	r22, r22
     244:	60 7e       	andi	r22, 0xE0	; 224
     246:	82 e4       	ldi	r24, 0x42	; 66
     248:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <mcp2515_write>
		
		// Data length
		mcp2515_write(MCP_TXB1DLC, message->length);
     24c:	f6 01       	movw	r30, r12
     24e:	62 81       	ldd	r22, Z+2	; 0x02
     250:	85 e4       	ldi	r24, 0x45	; 69
     252:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <mcp2515_write>
		//printf("canstat4: %x \n \r", mcp2515_read(MCP_CANSTAT));
		// Data
		for (int i = 0; i < message->length; i++){
     256:	f6 01       	movw	r30, r12
     258:	82 81       	ldd	r24, Z+2	; 0x02
     25a:	88 23       	and	r24, r24
     25c:	a9 f0       	breq	.+42     	; 0x288 <can_send+0x7c>
     25e:	76 01       	movw	r14, r12
     260:	f3 e0       	ldi	r31, 0x03	; 3
     262:	ef 0e       	add	r14, r31
     264:	f1 1c       	adc	r15, r1
     266:	16 e4       	ldi	r17, 0x46	; 70
     268:	c0 e0       	ldi	r28, 0x00	; 0
     26a:	d0 e0       	ldi	r29, 0x00	; 0
			mcp2515_write(MCP_TXB1D0+i, message->data[i]);
     26c:	f7 01       	movw	r30, r14
     26e:	61 91       	ld	r22, Z+
     270:	7f 01       	movw	r14, r30
     272:	81 2f       	mov	r24, r17
     274:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <mcp2515_write>
		
		// Data length
		mcp2515_write(MCP_TXB1DLC, message->length);
		//printf("canstat4: %x \n \r", mcp2515_read(MCP_CANSTAT));
		// Data
		for (int i = 0; i < message->length; i++){
     278:	21 96       	adiw	r28, 0x01	; 1
     27a:	1f 5f       	subi	r17, 0xFF	; 255
     27c:	f6 01       	movw	r30, r12
     27e:	82 81       	ldd	r24, Z+2	; 0x02
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	c8 17       	cp	r28, r24
     284:	d9 07       	cpc	r29, r25
     286:	94 f3       	brlt	.-28     	; 0x26c <can_send+0x60>
			//printf("TXB: %x \n \ r", MCP_TXB0D0 + i);
			//printf("canstat6: %x \n \r", mcp2515_read(MCP_CANSTAT));
		}

	}
	mcp2515_request_to_send(MCP_RTS_TX1);
     288:	82 e8       	ldi	r24, 0x82	; 130
     28a:	0e 94 6f 02 	call	0x4de	; 0x4de <mcp2515_request_to_send>
	//printf("canstat5: %x \n \r", mcp2515_read(MCP_CANSTAT));
}
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	1f 91       	pop	r17
     294:	ff 90       	pop	r15
     296:	ef 90       	pop	r14
     298:	df 90       	pop	r13
     29a:	cf 90       	pop	r12
     29c:	08 95       	ret

0000029e <can_interrupt>:
		return 1;
	}
}

uint8_t can_interrupt(){
	mcp2515_bit_modify(MCP_CANINTF, 0x01, 0);
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	61 e0       	ldi	r22, 0x01	; 1
     2a2:	8c e2       	ldi	r24, 0x2C	; 44
     2a4:	0e 94 88 02 	call	0x510	; 0x510 <mcp2515_bit_modify>
	can_flag = 1;
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <__data_end>
}
     2ae:	08 95       	ret

000002b0 <__vector_3>:

ISR(INT2_vect){
     2b0:	1f 92       	push	r1
     2b2:	0f 92       	push	r0
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	0f 92       	push	r0
     2b8:	11 24       	eor	r1, r1
     2ba:	2f 93       	push	r18
     2bc:	3f 93       	push	r19
     2be:	4f 93       	push	r20
     2c0:	5f 93       	push	r21
     2c2:	6f 93       	push	r22
     2c4:	7f 93       	push	r23
     2c6:	8f 93       	push	r24
     2c8:	9f 93       	push	r25
     2ca:	af 93       	push	r26
     2cc:	bf 93       	push	r27
     2ce:	ef 93       	push	r30
     2d0:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d2:	8f ef       	ldi	r24, 0xFF	; 255
     2d4:	9f e2       	ldi	r25, 0x2F	; 47
     2d6:	01 97       	sbiw	r24, 0x01	; 1
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <__vector_3+0x26>
     2da:	00 c0       	rjmp	.+0      	; 0x2dc <__vector_3+0x2c>
     2dc:	00 00       	nop
	_delay_ms(10);
	printf("Eg er inni can interupt, her va da koseleg");
     2de:	8c e6       	ldi	r24, 0x6C	; 108
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	9f 93       	push	r25
     2e4:	8f 93       	push	r24
     2e6:	0e 94 73 04 	call	0x8e6	; 0x8e6 <printf>
	can_interrupt();
     2ea:	0e 94 4f 01 	call	0x29e	; 0x29e <can_interrupt>
	
     2ee:	0f 90       	pop	r0
     2f0:	0f 90       	pop	r0
     2f2:	ff 91       	pop	r31
     2f4:	ef 91       	pop	r30
     2f6:	bf 91       	pop	r27
     2f8:	af 91       	pop	r26
     2fa:	9f 91       	pop	r25
     2fc:	8f 91       	pop	r24
     2fe:	7f 91       	pop	r23
     300:	6f 91       	pop	r22
     302:	5f 91       	pop	r21
     304:	4f 91       	pop	r20
     306:	3f 91       	pop	r19
     308:	2f 91       	pop	r18
     30a:	0f 90       	pop	r0
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	0f 90       	pop	r0
     310:	1f 90       	pop	r1
     312:	18 95       	reti

00000314 <joystick_calibration>:
	printf("Dir: %d", position.position_y);
	return position;
	
};*/

void joystick_calibration(void){
     314:	cf 93       	push	r28
	
	uint8_t x,y;
	
	x = adc_read(0);
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 71 00 	call	0xe2	; 0xe2 <adc_read>
     31e:	c8 2f       	mov	r28, r24
	y = adc_read(1);
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 71 00 	call	0xe2	; 0xe2 <adc_read>
     328:	ec ec       	ldi	r30, 0xCC	; 204
     32a:	f4 e0       	ldi	r31, 0x04	; 4
     32c:	31 97       	sbiw	r30, 0x01	; 1
     32e:	f1 f7       	brne	.-4      	; 0x32c <joystick_calibration+0x18>
     330:	00 c0       	rjmp	.+0      	; 0x332 <joystick_calibration+0x1e>
     332:	00 00       	nop
	_delay_ms(1);
	x_mid = x;
     334:	c0 93 4e 02 	sts	0x024E, r28	; 0x80024e <x_mid>
	y_mid = y;
     338:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <y_mid>
}
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <joystick_init>:
	
	// Initialize external units
	//adc_init();
	
	// Set PINB1, PINB2 and PINB3 as inputs
	DDRB &= ~(1<<PINB1) & ~(1<<PINB2) & ~(1<<PINB3);
     340:	87 b3       	in	r24, 0x17	; 23
     342:	81 7f       	andi	r24, 0xF1	; 241
     344:	87 bb       	out	0x17, r24	; 23
	
	// Calibrate joystick
	joystick_calibration();
     346:	0e 94 8a 01 	call	0x314	; 0x314 <joystick_calibration>
     34a:	08 95       	ret

0000034c <main>:
#include "mcp2515.h"
#include "can.h"
#include "mcp2515_driver.h"


void main(void){
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	cd b7       	in	r28, 0x3d	; 61
     352:	de b7       	in	r29, 0x3e	; 62
     354:	2b 97       	sbiw	r28, 0x0b	; 11
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	cd bf       	out	0x3d, r28	; 61

	joystick_position j_position;
	slider_position s_position;
	can_message message;
	adc_init();
     360:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	USART_init(MYUBRR);
     364:	8f e1       	ldi	r24, 0x1F	; 31
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	0e 94 1b 04 	call	0x836	; 0x836 <USART_init>
	
	adc_clock_signal();
     36c:	0e 94 61 00 	call	0xc2	; 0xc2 <adc_clock_signal>
	joystick_init();
     370:	0e 94 a0 01 	call	0x340	; 0x340 <joystick_init>
	SRAM_init();
     374:	0e 94 0b 04 	call	0x816	; 0x816 <SRAM_init>
	can_init();
     378:	0e 94 7a 00 	call	0xf4	; 0xf4 <can_init>

	oled_init();
     37c:	0e 94 40 03 	call	0x680	; 0x680 <oled_init>
	oled_reset();
     380:	0e 94 34 03 	call	0x668	; 0x668 <oled_reset>
	oled_pos(0,0);	
     384:	60 e0       	ldi	r22, 0x00	; 0
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	0e 94 df 03 	call	0x7be	; 0x7be <oled_pos>
//
	//menu_init();
	
	message.id = 1;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	9a 83       	std	Y+2, r25	; 0x02
     392:	89 83       	std	Y+1, r24	; 0x01
	message.length = 5;
     394:	85 e0       	ldi	r24, 0x05	; 5
     396:	8b 83       	std	Y+3, r24	; 0x03
	message.data[0] = 10;
     398:	9a e0       	ldi	r25, 0x0A	; 10
     39a:	9c 83       	std	Y+4, r25	; 0x04
	message.data[1] = 2;
     39c:	92 e0       	ldi	r25, 0x02	; 2
     39e:	9d 83       	std	Y+5, r25	; 0x05
	message.data[2] = 3;
     3a0:	93 e0       	ldi	r25, 0x03	; 3
     3a2:	9e 83       	std	Y+6, r25	; 0x06
	message.data[3] = 4;
     3a4:	94 e0       	ldi	r25, 0x04	; 4
     3a6:	9f 83       	std	Y+7, r25	; 0x07
	message.data[4] = 5;
     3a8:	88 87       	std	Y+8, r24	; 0x08

		_delay_ms(1000); 
		*/
		
		// Assignment 5 
		printf("BEFORE SENDING Canstat: %x \n \r", mcp2515_read(MCP_CANSTAT));
     3aa:	0f 2e       	mov	r0, r31
     3ac:	f7 e9       	ldi	r31, 0x97	; 151
     3ae:	8f 2e       	mov	r8, r31
     3b0:	f1 e0       	ldi	r31, 0x01	; 1
     3b2:	9f 2e       	mov	r9, r31
     3b4:	f0 2d       	mov	r31, r0
		_delay_ms(100);
		can_send(&message);
		printf("AFTER SENDING Canstat: %x \n \r", mcp2515_read(MCP_CANSTAT));
     3b6:	0f 2e       	mov	r0, r31
     3b8:	f6 eb       	ldi	r31, 0xB6	; 182
     3ba:	af 2e       	mov	r10, r31
     3bc:	f1 e0       	ldi	r31, 0x01	; 1
     3be:	bf 2e       	mov	r11, r31
     3c0:	f0 2d       	mov	r31, r0
		printf("AFTER SENDING RXSTAT: %x \n \r", mcp2515_read(MCP_RX_STATUS));
     3c2:	0f 2e       	mov	r0, r31
     3c4:	f4 ed       	ldi	r31, 0xD4	; 212
     3c6:	cf 2e       	mov	r12, r31
     3c8:	f1 e0       	ldi	r31, 0x01	; 1
     3ca:	df 2e       	mov	r13, r31
     3cc:	f0 2d       	mov	r31, r0
		_delay_ms(100);
		//printf("TXBControl: %x \n \ r", mcp2515_read(MCP_TXB0CTRL));
		printf("STAT: %d \n \r", mcp2515_read_status());
     3ce:	0f 2e       	mov	r0, r31
     3d0:	f1 ef       	ldi	r31, 0xF1	; 241
     3d2:	ef 2e       	mov	r14, r31
     3d4:	f1 e0       	ldi	r31, 0x01	; 1
     3d6:	ff 2e       	mov	r15, r31
     3d8:	f0 2d       	mov	r31, r0
		can_receive(&message);
	
		printf("DATA: %d %d %d %d %d \n \r",message.data[0], message.data[1], message.data[2], message.data[3], message.data[4]);
     3da:	0e ef       	ldi	r16, 0xFE	; 254
     3dc:	11 e0       	ldi	r17, 0x01	; 1

		_delay_ms(1000); 
		*/
		
		// Assignment 5 
		printf("BEFORE SENDING Canstat: %x \n \r", mcp2515_read(MCP_CANSTAT));
     3de:	8e e0       	ldi	r24, 0x0E	; 14
     3e0:	0e 94 49 02 	call	0x492	; 0x492 <mcp2515_read>
     3e4:	1f 92       	push	r1
     3e6:	8f 93       	push	r24
     3e8:	9f 92       	push	r9
     3ea:	8f 92       	push	r8
     3ec:	0e 94 73 04 	call	0x8e6	; 0x8e6 <printf>
     3f0:	87 ea       	ldi	r24, 0xA7	; 167
     3f2:	91 e6       	ldi	r25, 0x61	; 97
     3f4:	01 97       	sbiw	r24, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <main+0xa8>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <main+0xae>
     3fa:	00 00       	nop
		_delay_ms(100);
		can_send(&message);
     3fc:	ce 01       	movw	r24, r28
     3fe:	01 96       	adiw	r24, 0x01	; 1
     400:	0e 94 06 01 	call	0x20c	; 0x20c <can_send>
		printf("AFTER SENDING Canstat: %x \n \r", mcp2515_read(MCP_CANSTAT));
     404:	8e e0       	ldi	r24, 0x0E	; 14
     406:	0e 94 49 02 	call	0x492	; 0x492 <mcp2515_read>
     40a:	1f 92       	push	r1
     40c:	8f 93       	push	r24
     40e:	bf 92       	push	r11
     410:	af 92       	push	r10
     412:	0e 94 73 04 	call	0x8e6	; 0x8e6 <printf>
		printf("AFTER SENDING RXSTAT: %x \n \r", mcp2515_read(MCP_RX_STATUS));
     416:	80 eb       	ldi	r24, 0xB0	; 176
     418:	0e 94 49 02 	call	0x492	; 0x492 <mcp2515_read>
     41c:	1f 92       	push	r1
     41e:	8f 93       	push	r24
     420:	df 92       	push	r13
     422:	cf 92       	push	r12
     424:	0e 94 73 04 	call	0x8e6	; 0x8e6 <printf>
     428:	87 ea       	ldi	r24, 0xA7	; 167
     42a:	91 e6       	ldi	r25, 0x61	; 97
     42c:	01 97       	sbiw	r24, 0x01	; 1
     42e:	f1 f7       	brne	.-4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     430:	00 c0       	rjmp	.+0      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     432:	00 00       	nop
		_delay_ms(100);
		//printf("TXBControl: %x \n \ r", mcp2515_read(MCP_TXB0CTRL));
		printf("STAT: %d \n \r", mcp2515_read_status());
     434:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <mcp2515_read_status>
     438:	1f 92       	push	r1
     43a:	8f 93       	push	r24
     43c:	ff 92       	push	r15
     43e:	ef 92       	push	r14
     440:	0e 94 73 04 	call	0x8e6	; 0x8e6 <printf>
		can_receive(&message);
     444:	ce 01       	movw	r24, r28
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	0e 94 9c 00 	call	0x138	; 0x138 <can_receive>
	
		printf("DATA: %d %d %d %d %d \n \r",message.data[0], message.data[1], message.data[2], message.data[3], message.data[4]);
     44c:	88 85       	ldd	r24, Y+8	; 0x08
     44e:	1f 92       	push	r1
     450:	8f 93       	push	r24
     452:	8f 81       	ldd	r24, Y+7	; 0x07
     454:	1f 92       	push	r1
     456:	8f 93       	push	r24
     458:	8e 81       	ldd	r24, Y+6	; 0x06
     45a:	1f 92       	push	r1
     45c:	8f 93       	push	r24
     45e:	8d 81       	ldd	r24, Y+5	; 0x05
     460:	1f 92       	push	r1
     462:	8f 93       	push	r24
     464:	8c 81       	ldd	r24, Y+4	; 0x04
     466:	1f 92       	push	r1
     468:	8f 93       	push	r24
     46a:	1f 93       	push	r17
     46c:	0f 93       	push	r16
     46e:	0e 94 73 04 	call	0x8e6	; 0x8e6 <printf>
     472:	87 ea       	ldi	r24, 0xA7	; 167
     474:	91 e6       	ldi	r25, 0x61	; 97
     476:	01 97       	sbiw	r24, 0x01	; 1
     478:	f1 f7       	brne	.-4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     47a:	00 c0       	rjmp	.+0      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     47c:	00 00       	nop
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
     488:	aa cf       	rjmp	.-172    	; 0x3de <main+0x92>

0000048a <slave_select>:
#include <stdlib.h>
#include <avr/pgmspace.h>

// Select can controller
void slave_select(){
	PORTB &= ~(1<<PB4);
     48a:	c4 98       	cbi	0x18, 4	; 24
     48c:	08 95       	ret

0000048e <slave_deselect>:
}


// Deselect can controller
void slave_deselect(){
	PORTB |= (1<<PB4);
     48e:	c4 9a       	sbi	0x18, 4	; 24
     490:	08 95       	ret

00000492 <mcp2515_read>:
	//mcp2515_write(MCP_CNF1, 0b10000001);
	
	return 0;
}

uint8_t mcp2515_read(uint8_t address){
     492:	cf 93       	push	r28
     494:	c8 2f       	mov	r28, r24
	
	uint8_t result;
	
	slave_select();
     496:	0e 94 45 02 	call	0x48a	; 0x48a <slave_select>
	
	spi_send(MCP_READ);
     49a:	83 e0       	ldi	r24, 0x03	; 3
     49c:	0e 94 00 04 	call	0x800	; 0x800 <spi_send>
	spi_send(address);
     4a0:	8c 2f       	mov	r24, r28
     4a2:	0e 94 00 04 	call	0x800	; 0x800 <spi_send>
	result = spi_receive();
     4a6:	0e 94 04 04 	call	0x808	; 0x808 <spi_receive>
     4aa:	c8 2f       	mov	r28, r24
	
	slave_deselect();
     4ac:	0e 94 47 02 	call	0x48e	; 0x48e <slave_deselect>
	
	return result;
	
}
     4b0:	8c 2f       	mov	r24, r28
     4b2:	cf 91       	pop	r28
     4b4:	08 95       	ret

000004b6 <mcp2515_write>:


void mcp2515_write(uint8_t data, uint8_t address){
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	c8 2f       	mov	r28, r24
     4bc:	d6 2f       	mov	r29, r22
	
	slave_select();
     4be:	0e 94 45 02 	call	0x48a	; 0x48a <slave_select>
	
	// MCP write command
	spi_send(MCP_WRITE);
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	0e 94 00 04 	call	0x800	; 0x800 <spi_send>
	
	// Sending address
	spi_send(address);
     4c8:	8d 2f       	mov	r24, r29
     4ca:	0e 94 00 04 	call	0x800	; 0x800 <spi_send>
	
	// Sending data
	spi_send(data);
     4ce:	8c 2f       	mov	r24, r28
     4d0:	0e 94 00 04 	call	0x800	; 0x800 <spi_send>
	
	slave_deselect();
     4d4:	0e 94 47 02 	call	0x48e	; 0x48e <slave_deselect>
	
}
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	08 95       	ret

000004de <mcp2515_request_to_send>:

void mcp2515_request_to_send(char command){
     4de:	cf 93       	push	r28
     4e0:	c8 2f       	mov	r28, r24
	// MCP_RST_TX0
	// MCP_RST_TX1
	// MCP_RST_TX2
	// MCP_RST_TX3
	
	slave_select();
     4e2:	0e 94 45 02 	call	0x48a	; 0x48a <slave_select>
	
	spi_send(command);
     4e6:	8c 2f       	mov	r24, r28
     4e8:	0e 94 00 04 	call	0x800	; 0x800 <spi_send>
	
	slave_deselect();
     4ec:	0e 94 47 02 	call	0x48e	; 0x48e <slave_deselect>
	
}
     4f0:	cf 91       	pop	r28
     4f2:	08 95       	ret

000004f4 <mcp2515_read_status>:


uint8_t mcp2515_read_status(void){
     4f4:	cf 93       	push	r28
	
	uint8_t result;
	
	slave_select();
     4f6:	0e 94 45 02 	call	0x48a	; 0x48a <slave_select>
	
	spi_send(MCP_READ_STATUS);
     4fa:	80 ea       	ldi	r24, 0xA0	; 160
     4fc:	0e 94 00 04 	call	0x800	; 0x800 <spi_send>
	result = spi_receive();
     500:	0e 94 04 04 	call	0x808	; 0x808 <spi_receive>
     504:	c8 2f       	mov	r28, r24
	
	slave_deselect();
     506:	0e 94 47 02 	call	0x48e	; 0x48e <slave_deselect>
	
	return result;
	
}
     50a:	8c 2f       	mov	r24, r28
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret

00000510 <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     510:	1f 93       	push	r17
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	18 2f       	mov	r17, r24
     518:	d6 2f       	mov	r29, r22
     51a:	c4 2f       	mov	r28, r20
	
	slave_select();
     51c:	0e 94 45 02 	call	0x48a	; 0x48a <slave_select>
	
	// Send bit modify command
	spi_send(MCP_BITMOD);
     520:	85 e0       	ldi	r24, 0x05	; 5
     522:	0e 94 00 04 	call	0x800	; 0x800 <spi_send>
	
	// Address we want to modify
	spi_send(address);
     526:	81 2f       	mov	r24, r17
     528:	0e 94 00 04 	call	0x800	; 0x800 <spi_send>
	
	// Bit mask
	spi_send(mask);
     52c:	8d 2f       	mov	r24, r29
     52e:	0e 94 00 04 	call	0x800	; 0x800 <spi_send>
	
	// Modifying data
	spi_send(data);
     532:	8c 2f       	mov	r24, r28
     534:	0e 94 00 04 	call	0x800	; 0x800 <spi_send>
	
	slave_deselect();
     538:	0e 94 47 02 	call	0x48e	; 0x48e <slave_deselect>
	
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	08 95       	ret

00000544 <mcp2515_reset>:

void mcp2515_reset(){
	
	// Select can controller
	slave_select();
     544:	0e 94 45 02 	call	0x48a	; 0x48a <slave_select>
	
	// Send reset command
	spi_send(MCP_RESET);
     548:	80 ec       	ldi	r24, 0xC0	; 192
     54a:	0e 94 00 04 	call	0x800	; 0x800 <spi_send>
	
	// Deselect can controller
	slave_deselect();
     54e:	0e 94 47 02 	call	0x48e	; 0x48e <slave_deselect>
     552:	08 95       	ret

00000554 <mcp2515_driver_init>:

uint8_t mcp2515_driver_init(){
	uint8_t value;
	
	// Initialize spi
	spi_init();
     554:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <spi_init>
	
	// Send reset command
	mcp2515_reset();
     558:	0e 94 a2 02 	call	0x544	; 0x544 <mcp2515_reset>
	mcp2515_write(0x60,0x60);
     55c:	60 e6       	ldi	r22, 0x60	; 96
     55e:	80 e6       	ldi	r24, 0x60	; 96
     560:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <mcp2515_write>
	mcp2515_write(0x60,0x70);
     564:	60 e7       	ldi	r22, 0x70	; 112
     566:	80 e6       	ldi	r24, 0x60	; 96
     568:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <mcp2515_write>
	// Self test
	
	//mcp2515_bit_modify(MCP_CANCTRL,MODE_MASK,MODE_LOOPBACK);
	value = mcp2515_read(MCP_CANSTAT);
     56c:	8e e0       	ldi	r24, 0x0E	; 14
     56e:	0e 94 49 02 	call	0x492	; 0x492 <mcp2515_read>
	//printf("val: %x \n \r", value);
	if ((value & MODE_MASK) != MODE_CONFIG){
     572:	80 7e       	andi	r24, 0xE0	; 224
     574:	80 38       	cpi	r24, 0x80	; 128
     576:	51 f0       	breq	.+20     	; 0x58c <mcp2515_driver_init+0x38>
		printf("MCP2515 is NOT in configuration mode after reset!\n\r");
     578:	87 e1       	ldi	r24, 0x17	; 23
     57a:	92 e0       	ldi	r25, 0x02	; 2
     57c:	9f 93       	push	r25
     57e:	8f 93       	push	r24
     580:	0e 94 73 04 	call	0x8e6	; 0x8e6 <printf>
		return 1;
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	08 95       	ret
     58c:	2f e3       	ldi	r18, 0x3F	; 63
     58e:	8d e0       	ldi	r24, 0x0D	; 13
     590:	93 e0       	ldi	r25, 0x03	; 3
     592:	21 50       	subi	r18, 0x01	; 1
     594:	80 40       	sbci	r24, 0x00	; 0
     596:	90 40       	sbci	r25, 0x00	; 0
     598:	e1 f7       	brne	.-8      	; 0x592 <mcp2515_driver_init+0x3e>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <mcp2515_driver_init+0x48>
     59c:	00 00       	nop
	}
	_delay_ms(1000);
	//printf("Canstat after reset: %d",  value);
	mcp2515_write(MODE_LOOPBACK, MCP_CANCTRL); 
     59e:	6f e0       	ldi	r22, 0x0F	; 15
     5a0:	80 e4       	ldi	r24, 0x40	; 64
     5a2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <mcp2515_write>
	//_delay_ms();  
	value = mcp2515_read(MCP_CANSTAT);
     5a6:	8e e0       	ldi	r24, 0x0E	; 14
     5a8:	0e 94 49 02 	call	0x492	; 0x492 <mcp2515_read>
	if ((value & MODE_MASK) != MODE_LOOPBACK){
     5ac:	80 7e       	andi	r24, 0xE0	; 224
     5ae:	80 34       	cpi	r24, 0x40	; 64
     5b0:	51 f0       	breq	.+20     	; 0x5c6 <mcp2515_driver_init+0x72>
		printf("MCP2515 is NOT set to LOOPBACK!\n\r");
     5b2:	8a e0       	ldi	r24, 0x0A	; 10
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	9f 93       	push	r25
     5b8:	8f 93       	push	r24
     5ba:	0e 94 73 04 	call	0x8e6	; 0x8e6 <printf>
		return 1;
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	08 95       	ret
	
	//mcp2515_write(MCP_CNF3, 0b00000101);viktig!!!!
	//mcp2515_write(MCP_CNF2, 0b10101101);
	//mcp2515_write(MCP_CNF1, 0b10000001);
	
	return 0;
     5c6:	80 e0       	ldi	r24, 0x00	; 0
}
     5c8:	08 95       	ret

000005ca <oled_home>:
}

int oled_home(void) {

	//Reset the global variables page and column
	page = 0;
     5ca:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <page>
	col = 0;
     5ce:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <col>
	
	//Set the cursor to the start of the oled display:

	//Setup column start and end address
	*oled_command = 0x21;
     5d2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     5d6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     5da:	81 e2       	ldi	r24, 0x21	; 33
     5dc:	80 83       	st	Z, r24
	*oled_command = 0x00;
     5de:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     5e2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     5e6:	10 82       	st	Z, r1
	*oled_command = 0x7F;
     5e8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     5ec:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     5f0:	8f e7       	ldi	r24, 0x7F	; 127
     5f2:	80 83       	st	Z, r24
	
	// Setup page start and end address
	*oled_command = 0x22;
     5f4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     5f8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     5fc:	82 e2       	ldi	r24, 0x22	; 34
     5fe:	80 83       	st	Z, r24
	*oled_command = 0x00;
     600:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     604:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     608:	10 82       	st	Z, r1
	*oled_command = 0x7;
     60a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     60e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     612:	87 e0       	ldi	r24, 0x07	; 7
     614:	80 83       	st	Z, r24
	
	return 0;
	
}
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	08 95       	ret

0000061c <oled_goto_line>:


int oled_goto_line(uint8_t line) {
	
	//Set the global variable page 
	page = line;
     61c:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <page>

	//Set lower column address
	*oled_command = 0x00;
     620:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     624:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     628:	10 82       	st	Z, r1
	
	//Set higher column address
	*oled_command = 0x10;
     62a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     62e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     632:	90 e1       	ldi	r25, 0x10	; 16
     634:	90 83       	st	Z, r25
	
	//Set page address
	*oled_command = 0xB0 + line;
     636:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     63a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     63e:	80 55       	subi	r24, 0x50	; 80
     640:	80 83       	st	Z, r24

	return 0;
}
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	08 95       	ret

00000648 <oled_clear_line>:
}

// Function to clear a line on oled
int oled_clear_line(uint8_t line) {

	oled_goto_line(line);
     648:	0e 94 0e 03 	call	0x61c	; 0x61c <oled_goto_line>
     64c:	80 e8       	ldi	r24, 0x80	; 128
     64e:	90 e0       	ldi	r25, 0x00	; 0
	
	//Clear the line
	for (int i = 0; i < 128; i++) {
		*oled_data=0x00;
     650:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_data>
     654:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_data+0x1>
     658:	10 82       	st	Z, r1
     65a:	01 97       	sbiw	r24, 0x01	; 1
int oled_clear_line(uint8_t line) {

	oled_goto_line(line);
	
	//Clear the line
	for (int i = 0; i < 128; i++) {
     65c:	c9 f7       	brne	.-14     	; 0x650 <oled_clear_line+0x8>
		*oled_data=0x00;
	}
	
	// Set cursor to the start of the screen
	oled_home();
     65e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <oled_home>

	return 0;

}
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	08 95       	ret

00000668 <oled_reset>:
	return 0;
	
}

// Function to reset every line
int oled_reset(void) {
     668:	cf 93       	push	r28
     66a:	c0 e0       	ldi	r28, 0x00	; 0

	int line = 8;
	
	for (uint8_t i = 0; i < line; i++) {
		oled_clear_line(i);
     66c:	8c 2f       	mov	r24, r28
     66e:	0e 94 24 03 	call	0x648	; 0x648 <oled_clear_line>
// Function to reset every line
int oled_reset(void) {

	int line = 8;
	
	for (uint8_t i = 0; i < line; i++) {
     672:	cf 5f       	subi	r28, 0xFF	; 255
     674:	c8 30       	cpi	r28, 0x08	; 8
     676:	d1 f7       	brne	.-12     	; 0x66c <oled_reset+0x4>
		oled_clear_line(i);
	}
	return 0;
}
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	cf 91       	pop	r28
     67e:	08 95       	ret

00000680 <oled_init>:
uint8_t col, page;


void oled_init(void){
	// Enable external memory
	MCUCR |= (1 << SRE);
     680:	85 b7       	in	r24, 0x35	; 53
     682:	80 68       	ori	r24, 0x80	; 128
     684:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     686:	80 b7       	in	r24, 0x30	; 48
     688:	80 62       	ori	r24, 0x20	; 32
     68a:	80 bf       	out	0x30, r24	; 48
	
	// Display off
	*oled_command = 0xAE;
     68c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     690:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     694:	8e ea       	ldi	r24, 0xAE	; 174
     696:	80 83       	st	Z, r24
	
	//Segment remap
	*oled_command = 0xA1;
     698:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     69c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     6a0:	81 ea       	ldi	r24, 0xA1	; 161
     6a2:	80 83       	st	Z, r24
	
	//Common pads hardware: alternative
	*oled_command = 0xDA;
     6a4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     6a8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     6ac:	8a ed       	ldi	r24, 0xDA	; 218
     6ae:	80 83       	st	Z, r24
	*oled_command = 0x12;
     6b0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     6b4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     6b8:	82 e1       	ldi	r24, 0x12	; 18
     6ba:	80 83       	st	Z, r24
	
	// Common output scan direction: com63~com0
	*oled_command = 0xC8;
     6bc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     6c0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     6c4:	88 ec       	ldi	r24, 0xC8	; 200
     6c6:	80 83       	st	Z, r24
	
	// Mulitplex ration mode: 63
	*oled_command = 0xA8;
     6c8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     6cc:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     6d0:	88 ea       	ldi	r24, 0xA8	; 168
     6d2:	80 83       	st	Z, r24
	*oled_command = 0x3F;
     6d4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     6d8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     6dc:	8f e3       	ldi	r24, 0x3F	; 63
     6de:	80 83       	st	Z, r24
	
	// Display divide ratio/osc. freq. mode
	*oled_command = 0xD5;
     6e0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     6e4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     6e8:	85 ed       	ldi	r24, 0xD5	; 213
     6ea:	80 83       	st	Z, r24
	*oled_command = 0x80;
     6ec:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     6f0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     6f4:	80 e8       	ldi	r24, 0x80	; 128
     6f6:	80 83       	st	Z, r24
	
	// Contrast control
	*oled_command = 0x81;
     6f8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     6fc:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     700:	81 e8       	ldi	r24, 0x81	; 129
     702:	80 83       	st	Z, r24
	*oled_command = 0x50;
     704:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     708:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     70c:	80 e5       	ldi	r24, 0x50	; 80
     70e:	80 83       	st	Z, r24
	
	// Set pre-charged period
	*oled_command = 0xD9;
     710:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     714:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     718:	89 ed       	ldi	r24, 0xD9	; 217
     71a:	80 83       	st	Z, r24
	*oled_command = 0x21;
     71c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     720:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     724:	81 e2       	ldi	r24, 0x21	; 33
     726:	80 83       	st	Z, r24
	
	// Set Memory Adressing mode
	*oled_command = 0x20;
     728:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     72c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     730:	80 e2       	ldi	r24, 0x20	; 32
     732:	80 83       	st	Z, r24
	*oled_command = 0x02;
     734:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     738:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     73c:	82 e0       	ldi	r24, 0x02	; 2
     73e:	80 83       	st	Z, r24
	
	// VCOM deselect level mode
	*oled_command = 0xDB;
     740:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     744:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     748:	8b ed       	ldi	r24, 0xDB	; 219
     74a:	80 83       	st	Z, r24
	*oled_command = 0x30;
     74c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     750:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     754:	80 e3       	ldi	r24, 0x30	; 48
     756:	80 83       	st	Z, r24
	
	// Master configuration 
	*oled_command = 0xAD;
     758:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     75c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     760:	8d ea       	ldi	r24, 0xAD	; 173
     762:	80 83       	st	Z, r24
	*oled_command = 0x00;
     764:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     768:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     76c:	10 82       	st	Z, r1
	
	// Out follows RAM content
	*oled_command = 0xA4;
     76e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     772:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     776:	84 ea       	ldi	r24, 0xA4	; 164
     778:	80 83       	st	Z, r24
	
	// Set normal display 
	*oled_command = 0xA6;
     77a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     77e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     782:	86 ea       	ldi	r24, 0xA6	; 166
     784:	80 83       	st	Z, r24
	
	// Display On
	*oled_command = 0xAF;
     786:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     78a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     78e:	8f ea       	ldi	r24, 0xAF	; 175
     790:	80 83       	st	Z, r24
	
	//Set page start address
	*oled_command = 0xB0;
     792:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     796:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     79a:	80 eb       	ldi	r24, 0xB0	; 176
     79c:	80 83       	st	Z, r24
	//Set lower column start address
	*oled_command = 0x00;
     79e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     7a2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     7a6:	10 82       	st	Z, r1
	//Set higher column start address
	*oled_command = 0x10;
     7a8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     7ac:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     7b0:	80 e1       	ldi	r24, 0x10	; 16
     7b2:	80 83       	st	Z, r24
	
	// Clear screen
	oled_reset();
     7b4:	0e 94 34 03 	call	0x668	; 0x668 <oled_reset>

	// Set cursor to the start of the screen
	oled_home();
     7b8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <oled_home>
     7bc:	08 95       	ret

000007be <oled_pos>:
	*oled_command = 0xB0 + line;

	return 0;
}

int oled_pos(uint8_t line, uint8_t column) {
     7be:	cf 93       	push	r28
     7c0:	c6 2f       	mov	r28, r22
	
	oled_goto_line(line);
     7c2:	0e 94 0e 03 	call	0x61c	; 0x61c <oled_goto_line>
	
	//Set the global variable col
	col = column;
     7c6:	c0 93 4f 02 	sts	0x024F, r28	; 0x80024f <col>

	//Set lower column start address
	*oled_command = 0x00 + ((column*FONTWIDTH)>>4);
     7ca:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     7ce:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     7d2:	6c 2f       	mov	r22, r28
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	76 95       	lsr	r23
     7d8:	67 95       	ror	r22
     7da:	60 83       	st	Z, r22
		
	//Set higher column start address
	*oled_command = 0x10 + ((column*FONTWIDTH)>>4);
     7dc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command>
     7e0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command+0x1>
     7e4:	60 5f       	subi	r22, 0xF0	; 240
     7e6:	60 83       	st	Z, r22
	
	return 0;
}
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	cf 91       	pop	r28
     7ee:	08 95       	ret

000007f0 <spi_init>:
#include <avr/pgmspace.h>

void spi_init(void){
	
	/* Set MOSI, SCK and SS output, all others input */
	DDRB |= (1<<PB5)|(1<<PB7)|(1<<PB4);
     7f0:	87 b3       	in	r24, 0x17	; 23
     7f2:	80 6b       	ori	r24, 0xB0	; 176
     7f4:	87 bb       	out	0x17, r24	; 23
	
	DDRB &= ~(1<<PB6);
     7f6:	be 98       	cbi	0x17, 6	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     7f8:	8d b1       	in	r24, 0x0d	; 13
     7fa:	81 65       	ori	r24, 0x51	; 81
     7fc:	8d b9       	out	0x0d, r24	; 13
     7fe:	08 95       	ret

00000800 <spi_send>:

void spi_send(char cData){
	
	
	/* Start transmission */
	SPDR = cData;
     800:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for the transmission complete */
	while (!(SPSR & (1<<SPIF))){
     802:	77 9b       	sbis	0x0e, 7	; 14
     804:	fe cf       	rjmp	.-4      	; 0x802 <spi_send+0x2>
		;}
}
     806:	08 95       	ret

00000808 <spi_receive>:

char spi_receive(void)
{
	
	spi_send(0);
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	0e 94 00 04 	call	0x800	; 0x800 <spi_send>
	
	/* Wait for reception complete */
	while (!(SPSR & (1<<SPIF))){
     80e:	77 9b       	sbis	0x0e, 7	; 14
     810:	fe cf       	rjmp	.-4      	; 0x80e <spi_receive+0x6>
		;
	}
	
	/* Return data register */
	return SPDR;
     812:	8f b1       	in	r24, 0x0f	; 15
}
     814:	08 95       	ret

00000816 <SRAM_init>:
#include <avr/io.h>
#include <stdlib.h>
#include <stdint.h>

void SRAM_init(void){
	MCUCR |= (1 << SRE);
     816:	85 b7       	in	r24, 0x35	; 53
     818:	80 68       	ori	r24, 0x80	; 128
     81a:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
     81c:	80 b7       	in	r24, 0x30	; 48
     81e:	80 62       	ori	r24, 0x20	; 32
     820:	80 bf       	out	0x30, r24	; 48
     822:	08 95       	ret

00000824 <USART_transmit>:

	fdevopen(USART_transmit, USART_receive);
}

void USART_transmit(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
     824:	5d 9b       	sbis	0x0b, 5	; 11
     826:	fe cf       	rjmp	.-4      	; 0x824 <USART_transmit>
	UDR0 = data;
     828:	8c b9       	out	0x0c, r24	; 12
     82a:	08 95       	ret

0000082c <USART_receive>:
}

int USART_receive(void){
	while(!(UCSR0A & (1<<RXC0)));
     82c:	5f 9b       	sbis	0x0b, 7	; 11
     82e:	fe cf       	rjmp	.-4      	; 0x82c <USART_receive>

	return UDR0;
     830:	8c b1       	in	r24, 0x0c	; 12
}
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	08 95       	ret

00000836 <USART_init>:
#define set_bit(reg, bit) (reg |= (1<< bit))

void USART_init(unsigned int ubrr){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     836:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;			
     838:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     83a:	88 e1       	ldi	r24, 0x18	; 24
     83c:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     83e:	8e e8       	ldi	r24, 0x8E	; 142
     840:	80 bd       	out	0x20, r24	; 32

	fdevopen(USART_transmit, USART_receive);
     842:	66 e1       	ldi	r22, 0x16	; 22
     844:	74 e0       	ldi	r23, 0x04	; 4
     846:	82 e1       	ldi	r24, 0x12	; 18
     848:	94 e0       	ldi	r25, 0x04	; 4
     84a:	0e 94 28 04 	call	0x850	; 0x850 <fdevopen>
     84e:	08 95       	ret

00000850 <fdevopen>:
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	00 97       	sbiw	r24, 0x00	; 0
     85a:	31 f4       	brne	.+12     	; 0x868 <fdevopen+0x18>
     85c:	61 15       	cp	r22, r1
     85e:	71 05       	cpc	r23, r1
     860:	19 f4       	brne	.+6      	; 0x868 <fdevopen+0x18>
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	3a c0       	rjmp	.+116    	; 0x8dc <fdevopen+0x8c>
     868:	8b 01       	movw	r16, r22
     86a:	ec 01       	movw	r28, r24
     86c:	6e e0       	ldi	r22, 0x0E	; 14
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <calloc>
     878:	fc 01       	movw	r30, r24
     87a:	89 2b       	or	r24, r25
     87c:	91 f3       	breq	.-28     	; 0x862 <fdevopen+0x12>
     87e:	80 e8       	ldi	r24, 0x80	; 128
     880:	83 83       	std	Z+3, r24	; 0x03
     882:	01 15       	cp	r16, r1
     884:	11 05       	cpc	r17, r1
     886:	71 f0       	breq	.+28     	; 0x8a4 <fdevopen+0x54>
     888:	13 87       	std	Z+11, r17	; 0x0b
     88a:	02 87       	std	Z+10, r16	; 0x0a
     88c:	81 e8       	ldi	r24, 0x81	; 129
     88e:	83 83       	std	Z+3, r24	; 0x03
     890:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <__iob>
     894:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <__iob+0x1>
     898:	89 2b       	or	r24, r25
     89a:	21 f4       	brne	.+8      	; 0x8a4 <fdevopen+0x54>
     89c:	f0 93 52 02 	sts	0x0252, r31	; 0x800252 <__iob+0x1>
     8a0:	e0 93 51 02 	sts	0x0251, r30	; 0x800251 <__iob>
     8a4:	20 97       	sbiw	r28, 0x00	; 0
     8a6:	c9 f0       	breq	.+50     	; 0x8da <fdevopen+0x8a>
     8a8:	d1 87       	std	Z+9, r29	; 0x09
     8aa:	c0 87       	std	Z+8, r28	; 0x08
     8ac:	83 81       	ldd	r24, Z+3	; 0x03
     8ae:	82 60       	ori	r24, 0x02	; 2
     8b0:	83 83       	std	Z+3, r24	; 0x03
     8b2:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <__iob+0x2>
     8b6:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <__iob+0x3>
     8ba:	89 2b       	or	r24, r25
     8bc:	71 f4       	brne	.+28     	; 0x8da <fdevopen+0x8a>
     8be:	f0 93 54 02 	sts	0x0254, r31	; 0x800254 <__iob+0x3>
     8c2:	e0 93 53 02 	sts	0x0253, r30	; 0x800253 <__iob+0x2>
     8c6:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <__iob+0x4>
     8ca:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <__iob+0x5>
     8ce:	89 2b       	or	r24, r25
     8d0:	21 f4       	brne	.+8      	; 0x8da <fdevopen+0x8a>
     8d2:	f0 93 56 02 	sts	0x0256, r31	; 0x800256 <__iob+0x5>
     8d6:	e0 93 55 02 	sts	0x0255, r30	; 0x800255 <__iob+0x4>
     8da:	cf 01       	movw	r24, r30
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	08 95       	ret

000008e6 <printf>:
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	e9 e7       	ldi	r30, 0x79	; 121
     8ec:	f4 e0       	ldi	r31, 0x04	; 4
     8ee:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__prologue_saves__+0x20>
     8f2:	ae 01       	movw	r20, r28
     8f4:	4b 5f       	subi	r20, 0xFB	; 251
     8f6:	5f 4f       	sbci	r21, 0xFF	; 255
     8f8:	fa 01       	movw	r30, r20
     8fa:	61 91       	ld	r22, Z+
     8fc:	71 91       	ld	r23, Z+
     8fe:	af 01       	movw	r20, r30
     900:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <__iob+0x2>
     904:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <__iob+0x3>
     908:	0e 94 89 04 	call	0x912	; 0x912 <vfprintf>
     90c:	e2 e0       	ldi	r30, 0x02	; 2
     90e:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <__epilogue_restores__+0x20>

00000912 <vfprintf>:
     912:	ab e0       	ldi	r26, 0x0B	; 11
     914:	b0 e0       	ldi	r27, 0x00	; 0
     916:	ef e8       	ldi	r30, 0x8F	; 143
     918:	f4 e0       	ldi	r31, 0x04	; 4
     91a:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <__prologue_saves__>
     91e:	6c 01       	movw	r12, r24
     920:	7b 01       	movw	r14, r22
     922:	8a 01       	movw	r16, r20
     924:	fc 01       	movw	r30, r24
     926:	17 82       	std	Z+7, r1	; 0x07
     928:	16 82       	std	Z+6, r1	; 0x06
     92a:	83 81       	ldd	r24, Z+3	; 0x03
     92c:	81 ff       	sbrs	r24, 1
     92e:	cc c1       	rjmp	.+920    	; 0xcc8 <vfprintf+0x3b6>
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	3c 01       	movw	r6, r24
     936:	f6 01       	movw	r30, r12
     938:	93 81       	ldd	r25, Z+3	; 0x03
     93a:	f7 01       	movw	r30, r14
     93c:	93 fd       	sbrc	r25, 3
     93e:	85 91       	lpm	r24, Z+
     940:	93 ff       	sbrs	r25, 3
     942:	81 91       	ld	r24, Z+
     944:	7f 01       	movw	r14, r30
     946:	88 23       	and	r24, r24
     948:	09 f4       	brne	.+2      	; 0x94c <vfprintf+0x3a>
     94a:	ba c1       	rjmp	.+884    	; 0xcc0 <vfprintf+0x3ae>
     94c:	85 32       	cpi	r24, 0x25	; 37
     94e:	39 f4       	brne	.+14     	; 0x95e <vfprintf+0x4c>
     950:	93 fd       	sbrc	r25, 3
     952:	85 91       	lpm	r24, Z+
     954:	93 ff       	sbrs	r25, 3
     956:	81 91       	ld	r24, Z+
     958:	7f 01       	movw	r14, r30
     95a:	85 32       	cpi	r24, 0x25	; 37
     95c:	29 f4       	brne	.+10     	; 0x968 <vfprintf+0x56>
     95e:	b6 01       	movw	r22, r12
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 c4 07 	call	0xf88	; 0xf88 <fputc>
     966:	e7 cf       	rjmp	.-50     	; 0x936 <vfprintf+0x24>
     968:	91 2c       	mov	r9, r1
     96a:	21 2c       	mov	r2, r1
     96c:	31 2c       	mov	r3, r1
     96e:	ff e1       	ldi	r31, 0x1F	; 31
     970:	f3 15       	cp	r31, r3
     972:	d8 f0       	brcs	.+54     	; 0x9aa <vfprintf+0x98>
     974:	8b 32       	cpi	r24, 0x2B	; 43
     976:	79 f0       	breq	.+30     	; 0x996 <vfprintf+0x84>
     978:	38 f4       	brcc	.+14     	; 0x988 <vfprintf+0x76>
     97a:	80 32       	cpi	r24, 0x20	; 32
     97c:	79 f0       	breq	.+30     	; 0x99c <vfprintf+0x8a>
     97e:	83 32       	cpi	r24, 0x23	; 35
     980:	a1 f4       	brne	.+40     	; 0x9aa <vfprintf+0x98>
     982:	23 2d       	mov	r18, r3
     984:	20 61       	ori	r18, 0x10	; 16
     986:	1d c0       	rjmp	.+58     	; 0x9c2 <vfprintf+0xb0>
     988:	8d 32       	cpi	r24, 0x2D	; 45
     98a:	61 f0       	breq	.+24     	; 0x9a4 <vfprintf+0x92>
     98c:	80 33       	cpi	r24, 0x30	; 48
     98e:	69 f4       	brne	.+26     	; 0x9aa <vfprintf+0x98>
     990:	23 2d       	mov	r18, r3
     992:	21 60       	ori	r18, 0x01	; 1
     994:	16 c0       	rjmp	.+44     	; 0x9c2 <vfprintf+0xb0>
     996:	83 2d       	mov	r24, r3
     998:	82 60       	ori	r24, 0x02	; 2
     99a:	38 2e       	mov	r3, r24
     99c:	e3 2d       	mov	r30, r3
     99e:	e4 60       	ori	r30, 0x04	; 4
     9a0:	3e 2e       	mov	r3, r30
     9a2:	2a c0       	rjmp	.+84     	; 0x9f8 <vfprintf+0xe6>
     9a4:	f3 2d       	mov	r31, r3
     9a6:	f8 60       	ori	r31, 0x08	; 8
     9a8:	1d c0       	rjmp	.+58     	; 0x9e4 <vfprintf+0xd2>
     9aa:	37 fc       	sbrc	r3, 7
     9ac:	2d c0       	rjmp	.+90     	; 0xa08 <vfprintf+0xf6>
     9ae:	20 ed       	ldi	r18, 0xD0	; 208
     9b0:	28 0f       	add	r18, r24
     9b2:	2a 30       	cpi	r18, 0x0A	; 10
     9b4:	40 f0       	brcs	.+16     	; 0x9c6 <vfprintf+0xb4>
     9b6:	8e 32       	cpi	r24, 0x2E	; 46
     9b8:	b9 f4       	brne	.+46     	; 0x9e8 <vfprintf+0xd6>
     9ba:	36 fc       	sbrc	r3, 6
     9bc:	81 c1       	rjmp	.+770    	; 0xcc0 <vfprintf+0x3ae>
     9be:	23 2d       	mov	r18, r3
     9c0:	20 64       	ori	r18, 0x40	; 64
     9c2:	32 2e       	mov	r3, r18
     9c4:	19 c0       	rjmp	.+50     	; 0x9f8 <vfprintf+0xe6>
     9c6:	36 fe       	sbrs	r3, 6
     9c8:	06 c0       	rjmp	.+12     	; 0x9d6 <vfprintf+0xc4>
     9ca:	8a e0       	ldi	r24, 0x0A	; 10
     9cc:	98 9e       	mul	r9, r24
     9ce:	20 0d       	add	r18, r0
     9d0:	11 24       	eor	r1, r1
     9d2:	92 2e       	mov	r9, r18
     9d4:	11 c0       	rjmp	.+34     	; 0x9f8 <vfprintf+0xe6>
     9d6:	ea e0       	ldi	r30, 0x0A	; 10
     9d8:	2e 9e       	mul	r2, r30
     9da:	20 0d       	add	r18, r0
     9dc:	11 24       	eor	r1, r1
     9de:	22 2e       	mov	r2, r18
     9e0:	f3 2d       	mov	r31, r3
     9e2:	f0 62       	ori	r31, 0x20	; 32
     9e4:	3f 2e       	mov	r3, r31
     9e6:	08 c0       	rjmp	.+16     	; 0x9f8 <vfprintf+0xe6>
     9e8:	8c 36       	cpi	r24, 0x6C	; 108
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <vfprintf+0xe2>
     9ec:	83 2d       	mov	r24, r3
     9ee:	80 68       	ori	r24, 0x80	; 128
     9f0:	38 2e       	mov	r3, r24
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <vfprintf+0xe6>
     9f4:	88 36       	cpi	r24, 0x68	; 104
     9f6:	41 f4       	brne	.+16     	; 0xa08 <vfprintf+0xf6>
     9f8:	f7 01       	movw	r30, r14
     9fa:	93 fd       	sbrc	r25, 3
     9fc:	85 91       	lpm	r24, Z+
     9fe:	93 ff       	sbrs	r25, 3
     a00:	81 91       	ld	r24, Z+
     a02:	7f 01       	movw	r14, r30
     a04:	81 11       	cpse	r24, r1
     a06:	b3 cf       	rjmp	.-154    	; 0x96e <vfprintf+0x5c>
     a08:	98 2f       	mov	r25, r24
     a0a:	9f 7d       	andi	r25, 0xDF	; 223
     a0c:	95 54       	subi	r25, 0x45	; 69
     a0e:	93 30       	cpi	r25, 0x03	; 3
     a10:	28 f4       	brcc	.+10     	; 0xa1c <vfprintf+0x10a>
     a12:	0c 5f       	subi	r16, 0xFC	; 252
     a14:	1f 4f       	sbci	r17, 0xFF	; 255
     a16:	9f e3       	ldi	r25, 0x3F	; 63
     a18:	99 83       	std	Y+1, r25	; 0x01
     a1a:	0d c0       	rjmp	.+26     	; 0xa36 <vfprintf+0x124>
     a1c:	83 36       	cpi	r24, 0x63	; 99
     a1e:	31 f0       	breq	.+12     	; 0xa2c <vfprintf+0x11a>
     a20:	83 37       	cpi	r24, 0x73	; 115
     a22:	71 f0       	breq	.+28     	; 0xa40 <vfprintf+0x12e>
     a24:	83 35       	cpi	r24, 0x53	; 83
     a26:	09 f0       	breq	.+2      	; 0xa2a <vfprintf+0x118>
     a28:	59 c0       	rjmp	.+178    	; 0xadc <vfprintf+0x1ca>
     a2a:	21 c0       	rjmp	.+66     	; 0xa6e <vfprintf+0x15c>
     a2c:	f8 01       	movw	r30, r16
     a2e:	80 81       	ld	r24, Z
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	0e 5f       	subi	r16, 0xFE	; 254
     a34:	1f 4f       	sbci	r17, 0xFF	; 255
     a36:	88 24       	eor	r8, r8
     a38:	83 94       	inc	r8
     a3a:	91 2c       	mov	r9, r1
     a3c:	53 01       	movw	r10, r6
     a3e:	13 c0       	rjmp	.+38     	; 0xa66 <vfprintf+0x154>
     a40:	28 01       	movw	r4, r16
     a42:	f2 e0       	ldi	r31, 0x02	; 2
     a44:	4f 0e       	add	r4, r31
     a46:	51 1c       	adc	r5, r1
     a48:	f8 01       	movw	r30, r16
     a4a:	a0 80       	ld	r10, Z
     a4c:	b1 80       	ldd	r11, Z+1	; 0x01
     a4e:	36 fe       	sbrs	r3, 6
     a50:	03 c0       	rjmp	.+6      	; 0xa58 <vfprintf+0x146>
     a52:	69 2d       	mov	r22, r9
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <vfprintf+0x14a>
     a58:	6f ef       	ldi	r22, 0xFF	; 255
     a5a:	7f ef       	ldi	r23, 0xFF	; 255
     a5c:	c5 01       	movw	r24, r10
     a5e:	0e 94 b9 07 	call	0xf72	; 0xf72 <strnlen>
     a62:	4c 01       	movw	r8, r24
     a64:	82 01       	movw	r16, r4
     a66:	f3 2d       	mov	r31, r3
     a68:	ff 77       	andi	r31, 0x7F	; 127
     a6a:	3f 2e       	mov	r3, r31
     a6c:	16 c0       	rjmp	.+44     	; 0xa9a <vfprintf+0x188>
     a6e:	28 01       	movw	r4, r16
     a70:	22 e0       	ldi	r18, 0x02	; 2
     a72:	42 0e       	add	r4, r18
     a74:	51 1c       	adc	r5, r1
     a76:	f8 01       	movw	r30, r16
     a78:	a0 80       	ld	r10, Z
     a7a:	b1 80       	ldd	r11, Z+1	; 0x01
     a7c:	36 fe       	sbrs	r3, 6
     a7e:	03 c0       	rjmp	.+6      	; 0xa86 <vfprintf+0x174>
     a80:	69 2d       	mov	r22, r9
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	02 c0       	rjmp	.+4      	; 0xa8a <vfprintf+0x178>
     a86:	6f ef       	ldi	r22, 0xFF	; 255
     a88:	7f ef       	ldi	r23, 0xFF	; 255
     a8a:	c5 01       	movw	r24, r10
     a8c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <strnlen_P>
     a90:	4c 01       	movw	r8, r24
     a92:	f3 2d       	mov	r31, r3
     a94:	f0 68       	ori	r31, 0x80	; 128
     a96:	3f 2e       	mov	r3, r31
     a98:	82 01       	movw	r16, r4
     a9a:	33 fc       	sbrc	r3, 3
     a9c:	1b c0       	rjmp	.+54     	; 0xad4 <vfprintf+0x1c2>
     a9e:	82 2d       	mov	r24, r2
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	88 16       	cp	r8, r24
     aa4:	99 06       	cpc	r9, r25
     aa6:	b0 f4       	brcc	.+44     	; 0xad4 <vfprintf+0x1c2>
     aa8:	b6 01       	movw	r22, r12
     aaa:	80 e2       	ldi	r24, 0x20	; 32
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0e 94 c4 07 	call	0xf88	; 0xf88 <fputc>
     ab2:	2a 94       	dec	r2
     ab4:	f4 cf       	rjmp	.-24     	; 0xa9e <vfprintf+0x18c>
     ab6:	f5 01       	movw	r30, r10
     ab8:	37 fc       	sbrc	r3, 7
     aba:	85 91       	lpm	r24, Z+
     abc:	37 fe       	sbrs	r3, 7
     abe:	81 91       	ld	r24, Z+
     ac0:	5f 01       	movw	r10, r30
     ac2:	b6 01       	movw	r22, r12
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	0e 94 c4 07 	call	0xf88	; 0xf88 <fputc>
     aca:	21 10       	cpse	r2, r1
     acc:	2a 94       	dec	r2
     ace:	21 e0       	ldi	r18, 0x01	; 1
     ad0:	82 1a       	sub	r8, r18
     ad2:	91 08       	sbc	r9, r1
     ad4:	81 14       	cp	r8, r1
     ad6:	91 04       	cpc	r9, r1
     ad8:	71 f7       	brne	.-36     	; 0xab6 <vfprintf+0x1a4>
     ada:	e8 c0       	rjmp	.+464    	; 0xcac <vfprintf+0x39a>
     adc:	84 36       	cpi	r24, 0x64	; 100
     ade:	11 f0       	breq	.+4      	; 0xae4 <vfprintf+0x1d2>
     ae0:	89 36       	cpi	r24, 0x69	; 105
     ae2:	41 f5       	brne	.+80     	; 0xb34 <vfprintf+0x222>
     ae4:	f8 01       	movw	r30, r16
     ae6:	37 fe       	sbrs	r3, 7
     ae8:	07 c0       	rjmp	.+14     	; 0xaf8 <vfprintf+0x1e6>
     aea:	60 81       	ld	r22, Z
     aec:	71 81       	ldd	r23, Z+1	; 0x01
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	0c 5f       	subi	r16, 0xFC	; 252
     af4:	1f 4f       	sbci	r17, 0xFF	; 255
     af6:	08 c0       	rjmp	.+16     	; 0xb08 <vfprintf+0x1f6>
     af8:	60 81       	ld	r22, Z
     afa:	71 81       	ldd	r23, Z+1	; 0x01
     afc:	07 2e       	mov	r0, r23
     afe:	00 0c       	add	r0, r0
     b00:	88 0b       	sbc	r24, r24
     b02:	99 0b       	sbc	r25, r25
     b04:	0e 5f       	subi	r16, 0xFE	; 254
     b06:	1f 4f       	sbci	r17, 0xFF	; 255
     b08:	f3 2d       	mov	r31, r3
     b0a:	ff 76       	andi	r31, 0x6F	; 111
     b0c:	3f 2e       	mov	r3, r31
     b0e:	97 ff       	sbrs	r25, 7
     b10:	09 c0       	rjmp	.+18     	; 0xb24 <vfprintf+0x212>
     b12:	90 95       	com	r25
     b14:	80 95       	com	r24
     b16:	70 95       	com	r23
     b18:	61 95       	neg	r22
     b1a:	7f 4f       	sbci	r23, 0xFF	; 255
     b1c:	8f 4f       	sbci	r24, 0xFF	; 255
     b1e:	9f 4f       	sbci	r25, 0xFF	; 255
     b20:	f0 68       	ori	r31, 0x80	; 128
     b22:	3f 2e       	mov	r3, r31
     b24:	2a e0       	ldi	r18, 0x0A	; 10
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	a3 01       	movw	r20, r6
     b2a:	0e 94 00 08 	call	0x1000	; 0x1000 <__ultoa_invert>
     b2e:	88 2e       	mov	r8, r24
     b30:	86 18       	sub	r8, r6
     b32:	45 c0       	rjmp	.+138    	; 0xbbe <vfprintf+0x2ac>
     b34:	85 37       	cpi	r24, 0x75	; 117
     b36:	31 f4       	brne	.+12     	; 0xb44 <vfprintf+0x232>
     b38:	23 2d       	mov	r18, r3
     b3a:	2f 7e       	andi	r18, 0xEF	; 239
     b3c:	b2 2e       	mov	r11, r18
     b3e:	2a e0       	ldi	r18, 0x0A	; 10
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	25 c0       	rjmp	.+74     	; 0xb8e <vfprintf+0x27c>
     b44:	93 2d       	mov	r25, r3
     b46:	99 7f       	andi	r25, 0xF9	; 249
     b48:	b9 2e       	mov	r11, r25
     b4a:	8f 36       	cpi	r24, 0x6F	; 111
     b4c:	c1 f0       	breq	.+48     	; 0xb7e <vfprintf+0x26c>
     b4e:	18 f4       	brcc	.+6      	; 0xb56 <vfprintf+0x244>
     b50:	88 35       	cpi	r24, 0x58	; 88
     b52:	79 f0       	breq	.+30     	; 0xb72 <vfprintf+0x260>
     b54:	b5 c0       	rjmp	.+362    	; 0xcc0 <vfprintf+0x3ae>
     b56:	80 37       	cpi	r24, 0x70	; 112
     b58:	19 f0       	breq	.+6      	; 0xb60 <vfprintf+0x24e>
     b5a:	88 37       	cpi	r24, 0x78	; 120
     b5c:	21 f0       	breq	.+8      	; 0xb66 <vfprintf+0x254>
     b5e:	b0 c0       	rjmp	.+352    	; 0xcc0 <vfprintf+0x3ae>
     b60:	e9 2f       	mov	r30, r25
     b62:	e0 61       	ori	r30, 0x10	; 16
     b64:	be 2e       	mov	r11, r30
     b66:	b4 fe       	sbrs	r11, 4
     b68:	0d c0       	rjmp	.+26     	; 0xb84 <vfprintf+0x272>
     b6a:	fb 2d       	mov	r31, r11
     b6c:	f4 60       	ori	r31, 0x04	; 4
     b6e:	bf 2e       	mov	r11, r31
     b70:	09 c0       	rjmp	.+18     	; 0xb84 <vfprintf+0x272>
     b72:	34 fe       	sbrs	r3, 4
     b74:	0a c0       	rjmp	.+20     	; 0xb8a <vfprintf+0x278>
     b76:	29 2f       	mov	r18, r25
     b78:	26 60       	ori	r18, 0x06	; 6
     b7a:	b2 2e       	mov	r11, r18
     b7c:	06 c0       	rjmp	.+12     	; 0xb8a <vfprintf+0x278>
     b7e:	28 e0       	ldi	r18, 0x08	; 8
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	05 c0       	rjmp	.+10     	; 0xb8e <vfprintf+0x27c>
     b84:	20 e1       	ldi	r18, 0x10	; 16
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <vfprintf+0x27c>
     b8a:	20 e1       	ldi	r18, 0x10	; 16
     b8c:	32 e0       	ldi	r19, 0x02	; 2
     b8e:	f8 01       	movw	r30, r16
     b90:	b7 fe       	sbrs	r11, 7
     b92:	07 c0       	rjmp	.+14     	; 0xba2 <vfprintf+0x290>
     b94:	60 81       	ld	r22, Z
     b96:	71 81       	ldd	r23, Z+1	; 0x01
     b98:	82 81       	ldd	r24, Z+2	; 0x02
     b9a:	93 81       	ldd	r25, Z+3	; 0x03
     b9c:	0c 5f       	subi	r16, 0xFC	; 252
     b9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ba0:	06 c0       	rjmp	.+12     	; 0xbae <vfprintf+0x29c>
     ba2:	60 81       	ld	r22, Z
     ba4:	71 81       	ldd	r23, Z+1	; 0x01
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 5f       	subi	r16, 0xFE	; 254
     bac:	1f 4f       	sbci	r17, 0xFF	; 255
     bae:	a3 01       	movw	r20, r6
     bb0:	0e 94 00 08 	call	0x1000	; 0x1000 <__ultoa_invert>
     bb4:	88 2e       	mov	r8, r24
     bb6:	86 18       	sub	r8, r6
     bb8:	fb 2d       	mov	r31, r11
     bba:	ff 77       	andi	r31, 0x7F	; 127
     bbc:	3f 2e       	mov	r3, r31
     bbe:	36 fe       	sbrs	r3, 6
     bc0:	0d c0       	rjmp	.+26     	; 0xbdc <vfprintf+0x2ca>
     bc2:	23 2d       	mov	r18, r3
     bc4:	2e 7f       	andi	r18, 0xFE	; 254
     bc6:	a2 2e       	mov	r10, r18
     bc8:	89 14       	cp	r8, r9
     bca:	58 f4       	brcc	.+22     	; 0xbe2 <vfprintf+0x2d0>
     bcc:	34 fe       	sbrs	r3, 4
     bce:	0b c0       	rjmp	.+22     	; 0xbe6 <vfprintf+0x2d4>
     bd0:	32 fc       	sbrc	r3, 2
     bd2:	09 c0       	rjmp	.+18     	; 0xbe6 <vfprintf+0x2d4>
     bd4:	83 2d       	mov	r24, r3
     bd6:	8e 7e       	andi	r24, 0xEE	; 238
     bd8:	a8 2e       	mov	r10, r24
     bda:	05 c0       	rjmp	.+10     	; 0xbe6 <vfprintf+0x2d4>
     bdc:	b8 2c       	mov	r11, r8
     bde:	a3 2c       	mov	r10, r3
     be0:	03 c0       	rjmp	.+6      	; 0xbe8 <vfprintf+0x2d6>
     be2:	b8 2c       	mov	r11, r8
     be4:	01 c0       	rjmp	.+2      	; 0xbe8 <vfprintf+0x2d6>
     be6:	b9 2c       	mov	r11, r9
     be8:	a4 fe       	sbrs	r10, 4
     bea:	0f c0       	rjmp	.+30     	; 0xc0a <vfprintf+0x2f8>
     bec:	fe 01       	movw	r30, r28
     bee:	e8 0d       	add	r30, r8
     bf0:	f1 1d       	adc	r31, r1
     bf2:	80 81       	ld	r24, Z
     bf4:	80 33       	cpi	r24, 0x30	; 48
     bf6:	21 f4       	brne	.+8      	; 0xc00 <vfprintf+0x2ee>
     bf8:	9a 2d       	mov	r25, r10
     bfa:	99 7e       	andi	r25, 0xE9	; 233
     bfc:	a9 2e       	mov	r10, r25
     bfe:	09 c0       	rjmp	.+18     	; 0xc12 <vfprintf+0x300>
     c00:	a2 fe       	sbrs	r10, 2
     c02:	06 c0       	rjmp	.+12     	; 0xc10 <vfprintf+0x2fe>
     c04:	b3 94       	inc	r11
     c06:	b3 94       	inc	r11
     c08:	04 c0       	rjmp	.+8      	; 0xc12 <vfprintf+0x300>
     c0a:	8a 2d       	mov	r24, r10
     c0c:	86 78       	andi	r24, 0x86	; 134
     c0e:	09 f0       	breq	.+2      	; 0xc12 <vfprintf+0x300>
     c10:	b3 94       	inc	r11
     c12:	a3 fc       	sbrc	r10, 3
     c14:	11 c0       	rjmp	.+34     	; 0xc38 <vfprintf+0x326>
     c16:	a0 fe       	sbrs	r10, 0
     c18:	06 c0       	rjmp	.+12     	; 0xc26 <vfprintf+0x314>
     c1a:	b2 14       	cp	r11, r2
     c1c:	88 f4       	brcc	.+34     	; 0xc40 <vfprintf+0x32e>
     c1e:	28 0c       	add	r2, r8
     c20:	92 2c       	mov	r9, r2
     c22:	9b 18       	sub	r9, r11
     c24:	0e c0       	rjmp	.+28     	; 0xc42 <vfprintf+0x330>
     c26:	b2 14       	cp	r11, r2
     c28:	60 f4       	brcc	.+24     	; 0xc42 <vfprintf+0x330>
     c2a:	b6 01       	movw	r22, r12
     c2c:	80 e2       	ldi	r24, 0x20	; 32
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 c4 07 	call	0xf88	; 0xf88 <fputc>
     c34:	b3 94       	inc	r11
     c36:	f7 cf       	rjmp	.-18     	; 0xc26 <vfprintf+0x314>
     c38:	b2 14       	cp	r11, r2
     c3a:	18 f4       	brcc	.+6      	; 0xc42 <vfprintf+0x330>
     c3c:	2b 18       	sub	r2, r11
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <vfprintf+0x332>
     c40:	98 2c       	mov	r9, r8
     c42:	21 2c       	mov	r2, r1
     c44:	a4 fe       	sbrs	r10, 4
     c46:	10 c0       	rjmp	.+32     	; 0xc68 <vfprintf+0x356>
     c48:	b6 01       	movw	r22, r12
     c4a:	80 e3       	ldi	r24, 0x30	; 48
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 c4 07 	call	0xf88	; 0xf88 <fputc>
     c52:	a2 fe       	sbrs	r10, 2
     c54:	17 c0       	rjmp	.+46     	; 0xc84 <vfprintf+0x372>
     c56:	a1 fc       	sbrc	r10, 1
     c58:	03 c0       	rjmp	.+6      	; 0xc60 <vfprintf+0x34e>
     c5a:	88 e7       	ldi	r24, 0x78	; 120
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <vfprintf+0x352>
     c60:	88 e5       	ldi	r24, 0x58	; 88
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	b6 01       	movw	r22, r12
     c66:	0c c0       	rjmp	.+24     	; 0xc80 <vfprintf+0x36e>
     c68:	8a 2d       	mov	r24, r10
     c6a:	86 78       	andi	r24, 0x86	; 134
     c6c:	59 f0       	breq	.+22     	; 0xc84 <vfprintf+0x372>
     c6e:	a1 fe       	sbrs	r10, 1
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <vfprintf+0x364>
     c72:	8b e2       	ldi	r24, 0x2B	; 43
     c74:	01 c0       	rjmp	.+2      	; 0xc78 <vfprintf+0x366>
     c76:	80 e2       	ldi	r24, 0x20	; 32
     c78:	a7 fc       	sbrc	r10, 7
     c7a:	8d e2       	ldi	r24, 0x2D	; 45
     c7c:	b6 01       	movw	r22, r12
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 c4 07 	call	0xf88	; 0xf88 <fputc>
     c84:	89 14       	cp	r8, r9
     c86:	38 f4       	brcc	.+14     	; 0xc96 <vfprintf+0x384>
     c88:	b6 01       	movw	r22, r12
     c8a:	80 e3       	ldi	r24, 0x30	; 48
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 c4 07 	call	0xf88	; 0xf88 <fputc>
     c92:	9a 94       	dec	r9
     c94:	f7 cf       	rjmp	.-18     	; 0xc84 <vfprintf+0x372>
     c96:	8a 94       	dec	r8
     c98:	f3 01       	movw	r30, r6
     c9a:	e8 0d       	add	r30, r8
     c9c:	f1 1d       	adc	r31, r1
     c9e:	80 81       	ld	r24, Z
     ca0:	b6 01       	movw	r22, r12
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 c4 07 	call	0xf88	; 0xf88 <fputc>
     ca8:	81 10       	cpse	r8, r1
     caa:	f5 cf       	rjmp	.-22     	; 0xc96 <vfprintf+0x384>
     cac:	22 20       	and	r2, r2
     cae:	09 f4       	brne	.+2      	; 0xcb2 <vfprintf+0x3a0>
     cb0:	42 ce       	rjmp	.-892    	; 0x936 <vfprintf+0x24>
     cb2:	b6 01       	movw	r22, r12
     cb4:	80 e2       	ldi	r24, 0x20	; 32
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 c4 07 	call	0xf88	; 0xf88 <fputc>
     cbc:	2a 94       	dec	r2
     cbe:	f6 cf       	rjmp	.-20     	; 0xcac <vfprintf+0x39a>
     cc0:	f6 01       	movw	r30, r12
     cc2:	86 81       	ldd	r24, Z+6	; 0x06
     cc4:	97 81       	ldd	r25, Z+7	; 0x07
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <vfprintf+0x3ba>
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
     cca:	9f ef       	ldi	r25, 0xFF	; 255
     ccc:	2b 96       	adiw	r28, 0x0b	; 11
     cce:	e2 e1       	ldi	r30, 0x12	; 18
     cd0:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__epilogue_restores__>

00000cd4 <calloc>:
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	86 9f       	mul	r24, r22
     cde:	80 01       	movw	r16, r0
     ce0:	87 9f       	mul	r24, r23
     ce2:	10 0d       	add	r17, r0
     ce4:	96 9f       	mul	r25, r22
     ce6:	10 0d       	add	r17, r0
     ce8:	11 24       	eor	r1, r1
     cea:	c8 01       	movw	r24, r16
     cec:	0e 94 86 06 	call	0xd0c	; 0xd0c <malloc>
     cf0:	ec 01       	movw	r28, r24
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	29 f0       	breq	.+10     	; 0xd00 <calloc+0x2c>
     cf6:	a8 01       	movw	r20, r16
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	0e 94 b2 07 	call	0xf64	; 0xf64 <memset>
     d00:	ce 01       	movw	r24, r28
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	08 95       	ret

00000d0c <malloc>:
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	82 30       	cpi	r24, 0x02	; 2
     d16:	91 05       	cpc	r25, r1
     d18:	10 f4       	brcc	.+4      	; 0xd1e <malloc+0x12>
     d1a:	82 e0       	ldi	r24, 0x02	; 2
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <__flp>
     d22:	f0 91 5a 02 	lds	r31, 0x025A	; 0x80025a <__flp+0x1>
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	a0 e0       	ldi	r26, 0x00	; 0
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	30 97       	sbiw	r30, 0x00	; 0
     d30:	19 f1       	breq	.+70     	; 0xd78 <malloc+0x6c>
     d32:	40 81       	ld	r20, Z
     d34:	51 81       	ldd	r21, Z+1	; 0x01
     d36:	02 81       	ldd	r16, Z+2	; 0x02
     d38:	13 81       	ldd	r17, Z+3	; 0x03
     d3a:	48 17       	cp	r20, r24
     d3c:	59 07       	cpc	r21, r25
     d3e:	c8 f0       	brcs	.+50     	; 0xd72 <malloc+0x66>
     d40:	84 17       	cp	r24, r20
     d42:	95 07       	cpc	r25, r21
     d44:	69 f4       	brne	.+26     	; 0xd60 <malloc+0x54>
     d46:	10 97       	sbiw	r26, 0x00	; 0
     d48:	31 f0       	breq	.+12     	; 0xd56 <malloc+0x4a>
     d4a:	12 96       	adiw	r26, 0x02	; 2
     d4c:	0c 93       	st	X, r16
     d4e:	12 97       	sbiw	r26, 0x02	; 2
     d50:	13 96       	adiw	r26, 0x03	; 3
     d52:	1c 93       	st	X, r17
     d54:	27 c0       	rjmp	.+78     	; 0xda4 <malloc+0x98>
     d56:	00 93 59 02 	sts	0x0259, r16	; 0x800259 <__flp>
     d5a:	10 93 5a 02 	sts	0x025A, r17	; 0x80025a <__flp+0x1>
     d5e:	22 c0       	rjmp	.+68     	; 0xda4 <malloc+0x98>
     d60:	21 15       	cp	r18, r1
     d62:	31 05       	cpc	r19, r1
     d64:	19 f0       	breq	.+6      	; 0xd6c <malloc+0x60>
     d66:	42 17       	cp	r20, r18
     d68:	53 07       	cpc	r21, r19
     d6a:	18 f4       	brcc	.+6      	; 0xd72 <malloc+0x66>
     d6c:	9a 01       	movw	r18, r20
     d6e:	bd 01       	movw	r22, r26
     d70:	ef 01       	movw	r28, r30
     d72:	df 01       	movw	r26, r30
     d74:	f8 01       	movw	r30, r16
     d76:	db cf       	rjmp	.-74     	; 0xd2e <malloc+0x22>
     d78:	21 15       	cp	r18, r1
     d7a:	31 05       	cpc	r19, r1
     d7c:	f9 f0       	breq	.+62     	; 0xdbc <malloc+0xb0>
     d7e:	28 1b       	sub	r18, r24
     d80:	39 0b       	sbc	r19, r25
     d82:	24 30       	cpi	r18, 0x04	; 4
     d84:	31 05       	cpc	r19, r1
     d86:	80 f4       	brcc	.+32     	; 0xda8 <malloc+0x9c>
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	9b 81       	ldd	r25, Y+3	; 0x03
     d8c:	61 15       	cp	r22, r1
     d8e:	71 05       	cpc	r23, r1
     d90:	21 f0       	breq	.+8      	; 0xd9a <malloc+0x8e>
     d92:	fb 01       	movw	r30, r22
     d94:	93 83       	std	Z+3, r25	; 0x03
     d96:	82 83       	std	Z+2, r24	; 0x02
     d98:	04 c0       	rjmp	.+8      	; 0xda2 <malloc+0x96>
     d9a:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <__flp+0x1>
     d9e:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <__flp>
     da2:	fe 01       	movw	r30, r28
     da4:	32 96       	adiw	r30, 0x02	; 2
     da6:	44 c0       	rjmp	.+136    	; 0xe30 <malloc+0x124>
     da8:	fe 01       	movw	r30, r28
     daa:	e2 0f       	add	r30, r18
     dac:	f3 1f       	adc	r31, r19
     dae:	81 93       	st	Z+, r24
     db0:	91 93       	st	Z+, r25
     db2:	22 50       	subi	r18, 0x02	; 2
     db4:	31 09       	sbc	r19, r1
     db6:	39 83       	std	Y+1, r19	; 0x01
     db8:	28 83       	st	Y, r18
     dba:	3a c0       	rjmp	.+116    	; 0xe30 <malloc+0x124>
     dbc:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <__brkval>
     dc0:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <__brkval+0x1>
     dc4:	23 2b       	or	r18, r19
     dc6:	41 f4       	brne	.+16     	; 0xdd8 <malloc+0xcc>
     dc8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     dcc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     dd0:	30 93 58 02 	sts	0x0258, r19	; 0x800258 <__brkval+0x1>
     dd4:	20 93 57 02 	sts	0x0257, r18	; 0x800257 <__brkval>
     dd8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     ddc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     de0:	21 15       	cp	r18, r1
     de2:	31 05       	cpc	r19, r1
     de4:	41 f4       	brne	.+16     	; 0xdf6 <malloc+0xea>
     de6:	2d b7       	in	r18, 0x3d	; 61
     de8:	3e b7       	in	r19, 0x3e	; 62
     dea:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     dee:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     df2:	24 1b       	sub	r18, r20
     df4:	35 0b       	sbc	r19, r21
     df6:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <__brkval>
     dfa:	f0 91 58 02 	lds	r31, 0x0258	; 0x800258 <__brkval+0x1>
     dfe:	e2 17       	cp	r30, r18
     e00:	f3 07       	cpc	r31, r19
     e02:	a0 f4       	brcc	.+40     	; 0xe2c <malloc+0x120>
     e04:	2e 1b       	sub	r18, r30
     e06:	3f 0b       	sbc	r19, r31
     e08:	28 17       	cp	r18, r24
     e0a:	39 07       	cpc	r19, r25
     e0c:	78 f0       	brcs	.+30     	; 0xe2c <malloc+0x120>
     e0e:	ac 01       	movw	r20, r24
     e10:	4e 5f       	subi	r20, 0xFE	; 254
     e12:	5f 4f       	sbci	r21, 0xFF	; 255
     e14:	24 17       	cp	r18, r20
     e16:	35 07       	cpc	r19, r21
     e18:	48 f0       	brcs	.+18     	; 0xe2c <malloc+0x120>
     e1a:	4e 0f       	add	r20, r30
     e1c:	5f 1f       	adc	r21, r31
     e1e:	50 93 58 02 	sts	0x0258, r21	; 0x800258 <__brkval+0x1>
     e22:	40 93 57 02 	sts	0x0257, r20	; 0x800257 <__brkval>
     e26:	81 93       	st	Z+, r24
     e28:	91 93       	st	Z+, r25
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <malloc+0x124>
     e2c:	e0 e0       	ldi	r30, 0x00	; 0
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	cf 01       	movw	r24, r30
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	08 95       	ret

00000e3c <free>:
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	09 f4       	brne	.+2      	; 0xe46 <free+0xa>
     e44:	81 c0       	rjmp	.+258    	; 0xf48 <free+0x10c>
     e46:	fc 01       	movw	r30, r24
     e48:	32 97       	sbiw	r30, 0x02	; 2
     e4a:	13 82       	std	Z+3, r1	; 0x03
     e4c:	12 82       	std	Z+2, r1	; 0x02
     e4e:	a0 91 59 02 	lds	r26, 0x0259	; 0x800259 <__flp>
     e52:	b0 91 5a 02 	lds	r27, 0x025A	; 0x80025a <__flp+0x1>
     e56:	10 97       	sbiw	r26, 0x00	; 0
     e58:	81 f4       	brne	.+32     	; 0xe7a <free+0x3e>
     e5a:	20 81       	ld	r18, Z
     e5c:	31 81       	ldd	r19, Z+1	; 0x01
     e5e:	82 0f       	add	r24, r18
     e60:	93 1f       	adc	r25, r19
     e62:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <__brkval>
     e66:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <__brkval+0x1>
     e6a:	28 17       	cp	r18, r24
     e6c:	39 07       	cpc	r19, r25
     e6e:	51 f5       	brne	.+84     	; 0xec4 <free+0x88>
     e70:	f0 93 58 02 	sts	0x0258, r31	; 0x800258 <__brkval+0x1>
     e74:	e0 93 57 02 	sts	0x0257, r30	; 0x800257 <__brkval>
     e78:	67 c0       	rjmp	.+206    	; 0xf48 <free+0x10c>
     e7a:	ed 01       	movw	r28, r26
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	ce 17       	cp	r28, r30
     e82:	df 07       	cpc	r29, r31
     e84:	40 f4       	brcc	.+16     	; 0xe96 <free+0x5a>
     e86:	4a 81       	ldd	r20, Y+2	; 0x02
     e88:	5b 81       	ldd	r21, Y+3	; 0x03
     e8a:	9e 01       	movw	r18, r28
     e8c:	41 15       	cp	r20, r1
     e8e:	51 05       	cpc	r21, r1
     e90:	f1 f0       	breq	.+60     	; 0xece <free+0x92>
     e92:	ea 01       	movw	r28, r20
     e94:	f5 cf       	rjmp	.-22     	; 0xe80 <free+0x44>
     e96:	d3 83       	std	Z+3, r29	; 0x03
     e98:	c2 83       	std	Z+2, r28	; 0x02
     e9a:	40 81       	ld	r20, Z
     e9c:	51 81       	ldd	r21, Z+1	; 0x01
     e9e:	84 0f       	add	r24, r20
     ea0:	95 1f       	adc	r25, r21
     ea2:	c8 17       	cp	r28, r24
     ea4:	d9 07       	cpc	r29, r25
     ea6:	59 f4       	brne	.+22     	; 0xebe <free+0x82>
     ea8:	88 81       	ld	r24, Y
     eaa:	99 81       	ldd	r25, Y+1	; 0x01
     eac:	84 0f       	add	r24, r20
     eae:	95 1f       	adc	r25, r21
     eb0:	02 96       	adiw	r24, 0x02	; 2
     eb2:	91 83       	std	Z+1, r25	; 0x01
     eb4:	80 83       	st	Z, r24
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	9b 81       	ldd	r25, Y+3	; 0x03
     eba:	93 83       	std	Z+3, r25	; 0x03
     ebc:	82 83       	std	Z+2, r24	; 0x02
     ebe:	21 15       	cp	r18, r1
     ec0:	31 05       	cpc	r19, r1
     ec2:	29 f4       	brne	.+10     	; 0xece <free+0x92>
     ec4:	f0 93 5a 02 	sts	0x025A, r31	; 0x80025a <__flp+0x1>
     ec8:	e0 93 59 02 	sts	0x0259, r30	; 0x800259 <__flp>
     ecc:	3d c0       	rjmp	.+122    	; 0xf48 <free+0x10c>
     ece:	e9 01       	movw	r28, r18
     ed0:	fb 83       	std	Y+3, r31	; 0x03
     ed2:	ea 83       	std	Y+2, r30	; 0x02
     ed4:	49 91       	ld	r20, Y+
     ed6:	59 91       	ld	r21, Y+
     ed8:	c4 0f       	add	r28, r20
     eda:	d5 1f       	adc	r29, r21
     edc:	ec 17       	cp	r30, r28
     ede:	fd 07       	cpc	r31, r29
     ee0:	61 f4       	brne	.+24     	; 0xefa <free+0xbe>
     ee2:	80 81       	ld	r24, Z
     ee4:	91 81       	ldd	r25, Z+1	; 0x01
     ee6:	84 0f       	add	r24, r20
     ee8:	95 1f       	adc	r25, r21
     eea:	02 96       	adiw	r24, 0x02	; 2
     eec:	e9 01       	movw	r28, r18
     eee:	99 83       	std	Y+1, r25	; 0x01
     ef0:	88 83       	st	Y, r24
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	9b 83       	std	Y+3, r25	; 0x03
     ef8:	8a 83       	std	Y+2, r24	; 0x02
     efa:	e0 e0       	ldi	r30, 0x00	; 0
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	12 96       	adiw	r26, 0x02	; 2
     f00:	8d 91       	ld	r24, X+
     f02:	9c 91       	ld	r25, X
     f04:	13 97       	sbiw	r26, 0x03	; 3
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	19 f0       	breq	.+6      	; 0xf10 <free+0xd4>
     f0a:	fd 01       	movw	r30, r26
     f0c:	dc 01       	movw	r26, r24
     f0e:	f7 cf       	rjmp	.-18     	; 0xefe <free+0xc2>
     f10:	8d 91       	ld	r24, X+
     f12:	9c 91       	ld	r25, X
     f14:	11 97       	sbiw	r26, 0x01	; 1
     f16:	9d 01       	movw	r18, r26
     f18:	2e 5f       	subi	r18, 0xFE	; 254
     f1a:	3f 4f       	sbci	r19, 0xFF	; 255
     f1c:	82 0f       	add	r24, r18
     f1e:	93 1f       	adc	r25, r19
     f20:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <__brkval>
     f24:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <__brkval+0x1>
     f28:	28 17       	cp	r18, r24
     f2a:	39 07       	cpc	r19, r25
     f2c:	69 f4       	brne	.+26     	; 0xf48 <free+0x10c>
     f2e:	30 97       	sbiw	r30, 0x00	; 0
     f30:	29 f4       	brne	.+10     	; 0xf3c <free+0x100>
     f32:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <__flp+0x1>
     f36:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <__flp>
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <free+0x104>
     f3c:	13 82       	std	Z+3, r1	; 0x03
     f3e:	12 82       	std	Z+2, r1	; 0x02
     f40:	b0 93 58 02 	sts	0x0258, r27	; 0x800258 <__brkval+0x1>
     f44:	a0 93 57 02 	sts	0x0257, r26	; 0x800257 <__brkval>
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	08 95       	ret

00000f4e <strnlen_P>:
     f4e:	fc 01       	movw	r30, r24
     f50:	05 90       	lpm	r0, Z+
     f52:	61 50       	subi	r22, 0x01	; 1
     f54:	70 40       	sbci	r23, 0x00	; 0
     f56:	01 10       	cpse	r0, r1
     f58:	d8 f7       	brcc	.-10     	; 0xf50 <strnlen_P+0x2>
     f5a:	80 95       	com	r24
     f5c:	90 95       	com	r25
     f5e:	8e 0f       	add	r24, r30
     f60:	9f 1f       	adc	r25, r31
     f62:	08 95       	ret

00000f64 <memset>:
     f64:	dc 01       	movw	r26, r24
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <memset+0x6>
     f68:	6d 93       	st	X+, r22
     f6a:	41 50       	subi	r20, 0x01	; 1
     f6c:	50 40       	sbci	r21, 0x00	; 0
     f6e:	e0 f7       	brcc	.-8      	; 0xf68 <memset+0x4>
     f70:	08 95       	ret

00000f72 <strnlen>:
     f72:	fc 01       	movw	r30, r24
     f74:	61 50       	subi	r22, 0x01	; 1
     f76:	70 40       	sbci	r23, 0x00	; 0
     f78:	01 90       	ld	r0, Z+
     f7a:	01 10       	cpse	r0, r1
     f7c:	d8 f7       	brcc	.-10     	; 0xf74 <strnlen+0x2>
     f7e:	80 95       	com	r24
     f80:	90 95       	com	r25
     f82:	8e 0f       	add	r24, r30
     f84:	9f 1f       	adc	r25, r31
     f86:	08 95       	ret

00000f88 <fputc>:
     f88:	0f 93       	push	r16
     f8a:	1f 93       	push	r17
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	fb 01       	movw	r30, r22
     f92:	23 81       	ldd	r18, Z+3	; 0x03
     f94:	21 fd       	sbrc	r18, 1
     f96:	03 c0       	rjmp	.+6      	; 0xf9e <fputc+0x16>
     f98:	8f ef       	ldi	r24, 0xFF	; 255
     f9a:	9f ef       	ldi	r25, 0xFF	; 255
     f9c:	2c c0       	rjmp	.+88     	; 0xff6 <fputc+0x6e>
     f9e:	22 ff       	sbrs	r18, 2
     fa0:	16 c0       	rjmp	.+44     	; 0xfce <fputc+0x46>
     fa2:	46 81       	ldd	r20, Z+6	; 0x06
     fa4:	57 81       	ldd	r21, Z+7	; 0x07
     fa6:	24 81       	ldd	r18, Z+4	; 0x04
     fa8:	35 81       	ldd	r19, Z+5	; 0x05
     faa:	42 17       	cp	r20, r18
     fac:	53 07       	cpc	r21, r19
     fae:	44 f4       	brge	.+16     	; 0xfc0 <fputc+0x38>
     fb0:	a0 81       	ld	r26, Z
     fb2:	b1 81       	ldd	r27, Z+1	; 0x01
     fb4:	9d 01       	movw	r18, r26
     fb6:	2f 5f       	subi	r18, 0xFF	; 255
     fb8:	3f 4f       	sbci	r19, 0xFF	; 255
     fba:	31 83       	std	Z+1, r19	; 0x01
     fbc:	20 83       	st	Z, r18
     fbe:	8c 93       	st	X, r24
     fc0:	26 81       	ldd	r18, Z+6	; 0x06
     fc2:	37 81       	ldd	r19, Z+7	; 0x07
     fc4:	2f 5f       	subi	r18, 0xFF	; 255
     fc6:	3f 4f       	sbci	r19, 0xFF	; 255
     fc8:	37 83       	std	Z+7, r19	; 0x07
     fca:	26 83       	std	Z+6, r18	; 0x06
     fcc:	14 c0       	rjmp	.+40     	; 0xff6 <fputc+0x6e>
     fce:	8b 01       	movw	r16, r22
     fd0:	ec 01       	movw	r28, r24
     fd2:	fb 01       	movw	r30, r22
     fd4:	00 84       	ldd	r0, Z+8	; 0x08
     fd6:	f1 85       	ldd	r31, Z+9	; 0x09
     fd8:	e0 2d       	mov	r30, r0
     fda:	09 95       	icall
     fdc:	89 2b       	or	r24, r25
     fde:	e1 f6       	brne	.-72     	; 0xf98 <fputc+0x10>
     fe0:	d8 01       	movw	r26, r16
     fe2:	16 96       	adiw	r26, 0x06	; 6
     fe4:	8d 91       	ld	r24, X+
     fe6:	9c 91       	ld	r25, X
     fe8:	17 97       	sbiw	r26, 0x07	; 7
     fea:	01 96       	adiw	r24, 0x01	; 1
     fec:	17 96       	adiw	r26, 0x07	; 7
     fee:	9c 93       	st	X, r25
     ff0:	8e 93       	st	-X, r24
     ff2:	16 97       	sbiw	r26, 0x06	; 6
     ff4:	ce 01       	movw	r24, r28
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	08 95       	ret

00001000 <__ultoa_invert>:
    1000:	fa 01       	movw	r30, r20
    1002:	aa 27       	eor	r26, r26
    1004:	28 30       	cpi	r18, 0x08	; 8
    1006:	51 f1       	breq	.+84     	; 0x105c <__ultoa_invert+0x5c>
    1008:	20 31       	cpi	r18, 0x10	; 16
    100a:	81 f1       	breq	.+96     	; 0x106c <__ultoa_invert+0x6c>
    100c:	e8 94       	clt
    100e:	6f 93       	push	r22
    1010:	6e 7f       	andi	r22, 0xFE	; 254
    1012:	6e 5f       	subi	r22, 0xFE	; 254
    1014:	7f 4f       	sbci	r23, 0xFF	; 255
    1016:	8f 4f       	sbci	r24, 0xFF	; 255
    1018:	9f 4f       	sbci	r25, 0xFF	; 255
    101a:	af 4f       	sbci	r26, 0xFF	; 255
    101c:	b1 e0       	ldi	r27, 0x01	; 1
    101e:	3e d0       	rcall	.+124    	; 0x109c <__ultoa_invert+0x9c>
    1020:	b4 e0       	ldi	r27, 0x04	; 4
    1022:	3c d0       	rcall	.+120    	; 0x109c <__ultoa_invert+0x9c>
    1024:	67 0f       	add	r22, r23
    1026:	78 1f       	adc	r23, r24
    1028:	89 1f       	adc	r24, r25
    102a:	9a 1f       	adc	r25, r26
    102c:	a1 1d       	adc	r26, r1
    102e:	68 0f       	add	r22, r24
    1030:	79 1f       	adc	r23, r25
    1032:	8a 1f       	adc	r24, r26
    1034:	91 1d       	adc	r25, r1
    1036:	a1 1d       	adc	r26, r1
    1038:	6a 0f       	add	r22, r26
    103a:	71 1d       	adc	r23, r1
    103c:	81 1d       	adc	r24, r1
    103e:	91 1d       	adc	r25, r1
    1040:	a1 1d       	adc	r26, r1
    1042:	20 d0       	rcall	.+64     	; 0x1084 <__ultoa_invert+0x84>
    1044:	09 f4       	brne	.+2      	; 0x1048 <__ultoa_invert+0x48>
    1046:	68 94       	set
    1048:	3f 91       	pop	r19
    104a:	2a e0       	ldi	r18, 0x0A	; 10
    104c:	26 9f       	mul	r18, r22
    104e:	11 24       	eor	r1, r1
    1050:	30 19       	sub	r19, r0
    1052:	30 5d       	subi	r19, 0xD0	; 208
    1054:	31 93       	st	Z+, r19
    1056:	de f6       	brtc	.-74     	; 0x100e <__ultoa_invert+0xe>
    1058:	cf 01       	movw	r24, r30
    105a:	08 95       	ret
    105c:	46 2f       	mov	r20, r22
    105e:	47 70       	andi	r20, 0x07	; 7
    1060:	40 5d       	subi	r20, 0xD0	; 208
    1062:	41 93       	st	Z+, r20
    1064:	b3 e0       	ldi	r27, 0x03	; 3
    1066:	0f d0       	rcall	.+30     	; 0x1086 <__ultoa_invert+0x86>
    1068:	c9 f7       	brne	.-14     	; 0x105c <__ultoa_invert+0x5c>
    106a:	f6 cf       	rjmp	.-20     	; 0x1058 <__ultoa_invert+0x58>
    106c:	46 2f       	mov	r20, r22
    106e:	4f 70       	andi	r20, 0x0F	; 15
    1070:	40 5d       	subi	r20, 0xD0	; 208
    1072:	4a 33       	cpi	r20, 0x3A	; 58
    1074:	18 f0       	brcs	.+6      	; 0x107c <__ultoa_invert+0x7c>
    1076:	49 5d       	subi	r20, 0xD9	; 217
    1078:	31 fd       	sbrc	r19, 1
    107a:	40 52       	subi	r20, 0x20	; 32
    107c:	41 93       	st	Z+, r20
    107e:	02 d0       	rcall	.+4      	; 0x1084 <__ultoa_invert+0x84>
    1080:	a9 f7       	brne	.-22     	; 0x106c <__ultoa_invert+0x6c>
    1082:	ea cf       	rjmp	.-44     	; 0x1058 <__ultoa_invert+0x58>
    1084:	b4 e0       	ldi	r27, 0x04	; 4
    1086:	a6 95       	lsr	r26
    1088:	97 95       	ror	r25
    108a:	87 95       	ror	r24
    108c:	77 95       	ror	r23
    108e:	67 95       	ror	r22
    1090:	ba 95       	dec	r27
    1092:	c9 f7       	brne	.-14     	; 0x1086 <__ultoa_invert+0x86>
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	61 05       	cpc	r22, r1
    1098:	71 05       	cpc	r23, r1
    109a:	08 95       	ret
    109c:	9b 01       	movw	r18, r22
    109e:	ac 01       	movw	r20, r24
    10a0:	0a 2e       	mov	r0, r26
    10a2:	06 94       	lsr	r0
    10a4:	57 95       	ror	r21
    10a6:	47 95       	ror	r20
    10a8:	37 95       	ror	r19
    10aa:	27 95       	ror	r18
    10ac:	ba 95       	dec	r27
    10ae:	c9 f7       	brne	.-14     	; 0x10a2 <__ultoa_invert+0xa2>
    10b0:	62 0f       	add	r22, r18
    10b2:	73 1f       	adc	r23, r19
    10b4:	84 1f       	adc	r24, r20
    10b6:	95 1f       	adc	r25, r21
    10b8:	a0 1d       	adc	r26, r0
    10ba:	08 95       	ret

000010bc <__prologue_saves__>:
    10bc:	2f 92       	push	r2
    10be:	3f 92       	push	r3
    10c0:	4f 92       	push	r4
    10c2:	5f 92       	push	r5
    10c4:	6f 92       	push	r6
    10c6:	7f 92       	push	r7
    10c8:	8f 92       	push	r8
    10ca:	9f 92       	push	r9
    10cc:	af 92       	push	r10
    10ce:	bf 92       	push	r11
    10d0:	cf 92       	push	r12
    10d2:	df 92       	push	r13
    10d4:	ef 92       	push	r14
    10d6:	ff 92       	push	r15
    10d8:	0f 93       	push	r16
    10da:	1f 93       	push	r17
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	ca 1b       	sub	r28, r26
    10e6:	db 0b       	sbc	r29, r27
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	f8 94       	cli
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	cd bf       	out	0x3d, r28	; 61
    10f2:	09 94       	ijmp

000010f4 <__epilogue_restores__>:
    10f4:	2a 88       	ldd	r2, Y+18	; 0x12
    10f6:	39 88       	ldd	r3, Y+17	; 0x11
    10f8:	48 88       	ldd	r4, Y+16	; 0x10
    10fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    10fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    10fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    1100:	8c 84       	ldd	r8, Y+12	; 0x0c
    1102:	9b 84       	ldd	r9, Y+11	; 0x0b
    1104:	aa 84       	ldd	r10, Y+10	; 0x0a
    1106:	b9 84       	ldd	r11, Y+9	; 0x09
    1108:	c8 84       	ldd	r12, Y+8	; 0x08
    110a:	df 80       	ldd	r13, Y+7	; 0x07
    110c:	ee 80       	ldd	r14, Y+6	; 0x06
    110e:	fd 80       	ldd	r15, Y+5	; 0x05
    1110:	0c 81       	ldd	r16, Y+4	; 0x04
    1112:	1b 81       	ldd	r17, Y+3	; 0x03
    1114:	aa 81       	ldd	r26, Y+2	; 0x02
    1116:	b9 81       	ldd	r27, Y+1	; 0x01
    1118:	ce 0f       	add	r28, r30
    111a:	d1 1d       	adc	r29, r1
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	ed 01       	movw	r28, r26
    1128:	08 95       	ret

0000112a <_exit>:
    112a:	f8 94       	cli

0000112c <__stop_program>:
    112c:	ff cf       	rjmp	.-2      	; 0x112c <__stop_program>
