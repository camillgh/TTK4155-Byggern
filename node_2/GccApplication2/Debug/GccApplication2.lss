
GccApplication2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000174c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  0008174c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b0  2000043c  00081b88  0002043c  2**2
                  ALLOC
  3 .stack        00000404  200004ec  00081c38  0002043c  2**0
                  ALLOC
  4 .heap         00000200  200008f0  0008203c  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020465  2**0
                  CONTENTS, READONLY
  7 .debug_info   00008240  00000000  00000000  000204be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000165a  00000000  00000000  000286fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000013ab  00000000  00000000  00029d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000002a8  00000000  00000000  0002b103  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  0002b3ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00013223  00000000  00000000  0002b5bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006354  00000000  00000000  0003e7de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00054898  00000000  00000000  00044b32  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000007cc  00000000  00000000  000993cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	f0 08 00 20 c5 03 08 00 c1 03 08 00 c1 03 08 00     ... ............
   80010:	c1 03 08 00 c1 03 08 00 c1 03 08 00 00 00 00 00     ................
	...
   8002c:	c1 03 08 00 c1 03 08 00 00 00 00 00 c1 03 08 00     ................
   8003c:	69 09 08 00 c1 03 08 00 c1 03 08 00 c1 03 08 00     i...............
   8004c:	c1 03 08 00 c1 03 08 00 c1 03 08 00 c1 03 08 00     ................
   8005c:	c1 03 08 00 05 0d 08 00 c1 03 08 00 00 00 00 00     ................
   8006c:	c1 03 08 00 c1 03 08 00 c1 03 08 00 c1 03 08 00     ................
	...
   80084:	c1 03 08 00 c1 03 08 00 c1 03 08 00 c1 03 08 00     ................
   80094:	c1 03 08 00 c1 03 08 00 c1 03 08 00 c1 03 08 00     ................
   800a4:	00 00 00 00 c1 03 08 00 c1 03 08 00 c1 03 08 00     ................
   800b4:	c1 03 08 00 c1 03 08 00 c1 03 08 00 c1 03 08 00     ................
   800c4:	c1 03 08 00 c1 03 08 00 c1 03 08 00 c1 03 08 00     ................
   800d4:	c1 03 08 00 c1 03 08 00 c1 03 08 00 c1 03 08 00     ................
   800e4:	c1 03 08 00 c1 03 08 00 05 03 08 00 c1 03 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2000043c 	.word	0x2000043c
   80110:	00000000 	.word	0x00000000
   80114:	0008174c 	.word	0x0008174c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	0008174c 	.word	0x0008174c
   80154:	20000440 	.word	0x20000440
   80158:	0008174c 	.word	0x0008174c
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:
#include "../timer/timer.h"


void adc_init(){
	
	PMC->PMC_PCER1 = PMC_PCER1_PID37;
   80160:	2220      	movs	r2, #32
   80162:	4b08      	ldr	r3, [pc, #32]	; (80184 <adc_init+0x24>)
   80164:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
	PIOA->PIO_PER |= PIO_PA2;
   80168:	4a07      	ldr	r2, [pc, #28]	; (80188 <adc_init+0x28>)
   8016a:	6813      	ldr	r3, [r2, #0]
   8016c:	f043 0304 	orr.w	r3, r3, #4
   80170:	6013      	str	r3, [r2, #0]
	
	// Enable channel 0
	ADC->ADC_CHER = ADC_CHER_CH0;
   80172:	4b06      	ldr	r3, [pc, #24]	; (8018c <adc_init+0x2c>)
   80174:	2201      	movs	r2, #1
   80176:	611a      	str	r2, [r3, #16]
	
	// Enable freerun mode
	ADC->ADC_MR |= ADC_MR_FREERUN;
   80178:	685a      	ldr	r2, [r3, #4]
   8017a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8017e:	605a      	str	r2, [r3, #4]
   80180:	4770      	bx	lr
   80182:	bf00      	nop
   80184:	400e0600 	.word	0x400e0600
   80188:	400e0e00 	.word	0x400e0e00
   8018c:	400c0000 	.word	0x400c0000

00080190 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80194:	1855      	adds	r5, r2, r1
   80196:	2908      	cmp	r1, #8
   80198:	bf98      	it	ls
   8019a:	2a08      	cmpls	r2, #8
   8019c:	d864      	bhi.n	80268 <can_init+0xd8>
   8019e:	460e      	mov	r6, r1
   801a0:	2d08      	cmp	r5, #8
   801a2:	dc61      	bgt.n	80268 <can_init+0xd8>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   801a4:	4a32      	ldr	r2, [pc, #200]	; (80270 <can_init+0xe0>)
   801a6:	6813      	ldr	r3, [r2, #0]
   801a8:	f023 0301 	bic.w	r3, r3, #1
   801ac:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   801ae:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   801b0:	4b30      	ldr	r3, [pc, #192]	; (80274 <can_init+0xe4>)
   801b2:	f44f 7440 	mov.w	r4, #768	; 0x300
   801b6:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   801b8:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   801ba:	f024 0403 	bic.w	r4, r4, #3
   801be:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   801c0:	2403      	movs	r4, #3
   801c2:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   801c4:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   801c6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801ca:	4c2b      	ldr	r4, [pc, #172]	; (80278 <can_init+0xe8>)
   801cc:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801d0:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801d4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801d8:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801dc:	6150      	str	r0, [r2, #20]
	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801de:	42a9      	cmp	r1, r5
   801e0:	dc40      	bgt.n	80264 <can_init+0xd4>
   801e2:	460a      	mov	r2, r1
   801e4:	2400      	movs	r4, #0
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801e6:	46a1      	mov	r9, r4
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801e8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80270 <can_init+0xe0>
   801ec:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801f0:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801f4:	2701      	movs	r7, #1
   801f6:	0153      	lsls	r3, r2, #5
   801f8:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   801fc:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   80200:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80204:	4443      	add	r3, r8
   80206:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   8020a:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   8020e:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   80212:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80216:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   8021a:	fa07 f302 	lsl.w	r3, r7, r2
   8021e:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   80220:	3201      	adds	r2, #1
   80222:	4295      	cmp	r5, r2
   80224:	dae7      	bge.n	801f6 <can_init+0x66>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
   80226:	b181      	cbz	r1, 8024a <can_init+0xba>
   80228:	2300      	movs	r3, #0
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   8022a:	4911      	ldr	r1, [pc, #68]	; (80270 <can_init+0xe0>)
   8022c:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80230:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80234:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80238:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   8023c:	f103 0210 	add.w	r2, r3, #16
   80240:	0152      	lsls	r2, r2, #5
   80242:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80244:	3301      	adds	r3, #1
   80246:	429e      	cmp	r6, r3
   80248:	d1f4      	bne.n	80234 <can_init+0xa4>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   8024a:	4b09      	ldr	r3, [pc, #36]	; (80270 <can_init+0xe0>)
   8024c:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   8024e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80252:	4a0a      	ldr	r2, [pc, #40]	; (8027c <can_init+0xec>)
   80254:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80256:	681a      	ldr	r2, [r3, #0]
   80258:	f042 0201 	orr.w	r2, r2, #1
   8025c:	601a      	str	r2, [r3, #0]

	return 0;
   8025e:	2000      	movs	r0, #0
   80260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t can_ier = 0;
   80264:	2400      	movs	r4, #0
   80266:	e7de      	b.n	80226 <can_init+0x96>
		return 1; //Too many mailboxes is configured
   80268:	2001      	movs	r0, #1
}
   8026a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8026e:	bf00      	nop
   80270:	400b4000 	.word	0x400b4000
   80274:	400e0e00 	.word	0x400e0e00
   80278:	1000102b 	.word	0x1000102b
   8027c:	e000e100 	.word	0xe000e100

00080280 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80280:	014b      	lsls	r3, r1, #5
   80282:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80286:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8028a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8028e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80292:	d033      	beq.n	802fc <can_receive+0x7c>
{
   80294:	b430      	push	{r4, r5}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   80296:	014b      	lsls	r3, r1, #5
   80298:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8029c:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   802a4:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   802a8:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   802ac:	f3c5 458a 	ubfx	r5, r5, #18, #11
   802b0:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   802b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   802b6:	f3c3 4303 	ubfx	r3, r3, #16, #4
   802ba:	7083      	strb	r3, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   802bc:	461d      	mov	r5, r3
   802be:	b15b      	cbz	r3, 802d8 <can_receive+0x58>
   802c0:	3003      	adds	r0, #3
   802c2:	2300      	movs	r3, #0
		{
			if(i < 4)
   802c4:	2b03      	cmp	r3, #3
			{
				can_msg->data[i] = (char)(data_low & 0xff);
   802c6:	bfd9      	ittee	le
   802c8:	7002      	strble	r2, [r0, #0]
				data_low = data_low >> 8;
   802ca:	0a12      	lsrle	r2, r2, #8
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   802cc:	7004      	strbgt	r4, [r0, #0]
				data_high = data_high >> 8;
   802ce:	0a24      	lsrgt	r4, r4, #8
		for(int i = 0; i < can_msg->data_length;i++)
   802d0:	3301      	adds	r3, #1
   802d2:	3001      	adds	r0, #1
   802d4:	42ab      	cmp	r3, r5
   802d6:	d1f5      	bne.n	802c4 <can_receive+0x44>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802d8:	4b09      	ldr	r3, [pc, #36]	; (80300 <can_receive+0x80>)
   802da:	f101 0210 	add.w	r2, r1, #16
   802de:	0152      	lsls	r2, r2, #5
   802e0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802e4:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802e6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802ea:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802f2:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802f6:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802f8:	bc30      	pop	{r4, r5}
   802fa:	4770      	bx	lr
		return 1;
   802fc:	2001      	movs	r0, #1
   802fe:	4770      	bx	lr
   80300:	400b4000 	.word	0x400b4000

00080304 <CAN0_Handler>:
   80304:	b510      	push	{r4, lr}
   80306:	b084      	sub	sp, #16
   80308:	4b15      	ldr	r3, [pc, #84]	; (80360 <CAN0_Handler+0x5c>)
   8030a:	691c      	ldr	r4, [r3, #16]
   8030c:	f014 0f06 	tst.w	r4, #6
   80310:	d010      	beq.n	80334 <CAN0_Handler+0x30>
   80312:	f014 0f02 	tst.w	r4, #2
   80316:	d11a      	bne.n	8034e <CAN0_Handler+0x4a>
   80318:	f014 0f04 	tst.w	r4, #4
   8031c:	d01c      	beq.n	80358 <CAN0_Handler+0x54>
   8031e:	2102      	movs	r1, #2
   80320:	a801      	add	r0, sp, #4
   80322:	4b10      	ldr	r3, [pc, #64]	; (80364 <CAN0_Handler+0x60>)
   80324:	4798      	blx	r3
   80326:	f89d 2006 	ldrb.w	r2, [sp, #6]
   8032a:	b11a      	cbz	r2, 80334 <CAN0_Handler+0x30>
   8032c:	2300      	movs	r3, #0
   8032e:	3301      	adds	r3, #1
   80330:	4293      	cmp	r3, r2
   80332:	d1fc      	bne.n	8032e <CAN0_Handler+0x2a>
   80334:	f014 0f01 	tst.w	r4, #1
   80338:	d002      	beq.n	80340 <CAN0_Handler+0x3c>
   8033a:	2201      	movs	r2, #1
   8033c:	4b08      	ldr	r3, [pc, #32]	; (80360 <CAN0_Handler+0x5c>)
   8033e:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80340:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80344:	4b08      	ldr	r3, [pc, #32]	; (80368 <CAN0_Handler+0x64>)
   80346:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   8034a:	b004      	add	sp, #16
   8034c:	bd10      	pop	{r4, pc}
   8034e:	2101      	movs	r1, #1
   80350:	a801      	add	r0, sp, #4
   80352:	4b04      	ldr	r3, [pc, #16]	; (80364 <CAN0_Handler+0x60>)
   80354:	4798      	blx	r3
   80356:	e7e6      	b.n	80326 <CAN0_Handler+0x22>
   80358:	4804      	ldr	r0, [pc, #16]	; (8036c <CAN0_Handler+0x68>)
   8035a:	4b05      	ldr	r3, [pc, #20]	; (80370 <CAN0_Handler+0x6c>)
   8035c:	4798      	blx	r3
   8035e:	e7e2      	b.n	80326 <CAN0_Handler+0x22>
   80360:	400b4000 	.word	0x400b4000
   80364:	00080281 	.word	0x00080281
   80368:	e000e100 	.word	0xe000e100
   8036c:	000816b0 	.word	0x000816b0
   80370:	00080c55 	.word	0x00080c55

00080374 <dac_init>:
#include "dac_arduino.h"

void dac_init(){
	
	// Enable PMC
	PMC->PMC_PCER1 |= PMC_PCER1_PID38;
   80374:	4a0c      	ldr	r2, [pc, #48]	; (803a8 <dac_init+0x34>)
   80376:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   8037a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8037e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	// Disable trigger, enable free running mode
	DACC->DACC_MR |= DACC_MR_TRGEN_DIS;
   80382:	4b0a      	ldr	r3, [pc, #40]	; (803ac <dac_init+0x38>)
   80384:	685a      	ldr	r2, [r3, #4]
   80386:	605a      	str	r2, [r3, #4]
	
	DACC->DACC_MR |= DACC_MR_USER_SEL_CHANNEL1;
   80388:	685a      	ldr	r2, [r3, #4]
   8038a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   8038e:	605a      	str	r2, [r3, #4]
	
	DACC->DACC_MR |= DACC_MR_WORD_HALF;
   80390:	685a      	ldr	r2, [r3, #4]
   80392:	605a      	str	r2, [r3, #4]
	
	// Enable channel DAC1
	DACC->DACC_CHER |= DACC_CHER_CH1;
   80394:	691a      	ldr	r2, [r3, #16]
   80396:	f042 0202 	orr.w	r2, r2, #2
   8039a:	611a      	str	r2, [r3, #16]
	
	PIOD->PIO_SODR |= PIO_SODR_P9;
   8039c:	4a04      	ldr	r2, [pc, #16]	; (803b0 <dac_init+0x3c>)
   8039e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   803a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   803a4:	6313      	str	r3, [r2, #48]	; 0x30
   803a6:	4770      	bx	lr
   803a8:	400e0600 	.word	0x400e0600
   803ac:	400c8000 	.word	0x400c8000
   803b0:	400e1400 	.word	0x400e1400

000803b4 <dac_write>:
}

void dac_write(uint16_t data){
	
	// Add data to register, scale value such that DAC1 = [0.5-2.75], AOUT = [0,5V]
	DACC->DACC_CDR = DACC_CDR_DATA(data*16);
   803b4:	0100      	lsls	r0, r0, #4
   803b6:	4b01      	ldr	r3, [pc, #4]	; (803bc <dac_write+0x8>)
   803b8:	6218      	str	r0, [r3, #32]
   803ba:	4770      	bx	lr
   803bc:	400c8000 	.word	0x400c8000

000803c0 <Dummy_Handler>:
   803c0:	e7fe      	b.n	803c0 <Dummy_Handler>
	...

000803c4 <Reset_Handler>:
   803c4:	b508      	push	{r3, lr}
   803c6:	4b18      	ldr	r3, [pc, #96]	; (80428 <Reset_Handler+0x64>)
   803c8:	4a18      	ldr	r2, [pc, #96]	; (8042c <Reset_Handler+0x68>)
   803ca:	429a      	cmp	r2, r3
   803cc:	d010      	beq.n	803f0 <Reset_Handler+0x2c>
   803ce:	4b18      	ldr	r3, [pc, #96]	; (80430 <Reset_Handler+0x6c>)
   803d0:	4a15      	ldr	r2, [pc, #84]	; (80428 <Reset_Handler+0x64>)
   803d2:	429a      	cmp	r2, r3
   803d4:	d20c      	bcs.n	803f0 <Reset_Handler+0x2c>
   803d6:	3b01      	subs	r3, #1
   803d8:	1a9b      	subs	r3, r3, r2
   803da:	f023 0303 	bic.w	r3, r3, #3
   803de:	3304      	adds	r3, #4
   803e0:	4413      	add	r3, r2
   803e2:	4912      	ldr	r1, [pc, #72]	; (8042c <Reset_Handler+0x68>)
   803e4:	f851 0b04 	ldr.w	r0, [r1], #4
   803e8:	f842 0b04 	str.w	r0, [r2], #4
   803ec:	429a      	cmp	r2, r3
   803ee:	d1f9      	bne.n	803e4 <Reset_Handler+0x20>
   803f0:	4b10      	ldr	r3, [pc, #64]	; (80434 <Reset_Handler+0x70>)
   803f2:	4a11      	ldr	r2, [pc, #68]	; (80438 <Reset_Handler+0x74>)
   803f4:	429a      	cmp	r2, r3
   803f6:	d20a      	bcs.n	8040e <Reset_Handler+0x4a>
   803f8:	3b01      	subs	r3, #1
   803fa:	1a9b      	subs	r3, r3, r2
   803fc:	f023 0303 	bic.w	r3, r3, #3
   80400:	3304      	adds	r3, #4
   80402:	4413      	add	r3, r2
   80404:	2100      	movs	r1, #0
   80406:	f842 1b04 	str.w	r1, [r2], #4
   8040a:	4293      	cmp	r3, r2
   8040c:	d1fb      	bne.n	80406 <Reset_Handler+0x42>
   8040e:	4b0b      	ldr	r3, [pc, #44]	; (8043c <Reset_Handler+0x78>)
   80410:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80414:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80418:	4a09      	ldr	r2, [pc, #36]	; (80440 <Reset_Handler+0x7c>)
   8041a:	6093      	str	r3, [r2, #8]
   8041c:	4b09      	ldr	r3, [pc, #36]	; (80444 <Reset_Handler+0x80>)
   8041e:	4798      	blx	r3
   80420:	4b09      	ldr	r3, [pc, #36]	; (80448 <Reset_Handler+0x84>)
   80422:	4798      	blx	r3
   80424:	e7fe      	b.n	80424 <Reset_Handler+0x60>
   80426:	bf00      	nop
   80428:	20000000 	.word	0x20000000
   8042c:	0008174c 	.word	0x0008174c
   80430:	2000043c 	.word	0x2000043c
   80434:	200004ec 	.word	0x200004ec
   80438:	2000043c 	.word	0x2000043c
   8043c:	00080000 	.word	0x00080000
   80440:	e000ed00 	.word	0xe000ed00
   80444:	00081541 	.word	0x00081541
   80448:	000804f1 	.word	0x000804f1

0008044c <SystemInit>:
   8044c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80450:	4a20      	ldr	r2, [pc, #128]	; (804d4 <SystemInit+0x88>)
   80452:	6013      	str	r3, [r2, #0]
   80454:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80458:	6013      	str	r3, [r2, #0]
   8045a:	4b1f      	ldr	r3, [pc, #124]	; (804d8 <SystemInit+0x8c>)
   8045c:	6a1b      	ldr	r3, [r3, #32]
   8045e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80462:	d107      	bne.n	80474 <SystemInit+0x28>
   80464:	4a1d      	ldr	r2, [pc, #116]	; (804dc <SystemInit+0x90>)
   80466:	4b1c      	ldr	r3, [pc, #112]	; (804d8 <SystemInit+0x8c>)
   80468:	621a      	str	r2, [r3, #32]
   8046a:	461a      	mov	r2, r3
   8046c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8046e:	f013 0f01 	tst.w	r3, #1
   80472:	d0fb      	beq.n	8046c <SystemInit+0x20>
   80474:	4a1a      	ldr	r2, [pc, #104]	; (804e0 <SystemInit+0x94>)
   80476:	4b18      	ldr	r3, [pc, #96]	; (804d8 <SystemInit+0x8c>)
   80478:	621a      	str	r2, [r3, #32]
   8047a:	461a      	mov	r2, r3
   8047c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8047e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80482:	d0fb      	beq.n	8047c <SystemInit+0x30>
   80484:	4a14      	ldr	r2, [pc, #80]	; (804d8 <SystemInit+0x8c>)
   80486:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80488:	f023 0303 	bic.w	r3, r3, #3
   8048c:	f043 0301 	orr.w	r3, r3, #1
   80490:	6313      	str	r3, [r2, #48]	; 0x30
   80492:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80494:	f013 0f08 	tst.w	r3, #8
   80498:	d0fb      	beq.n	80492 <SystemInit+0x46>
   8049a:	4a12      	ldr	r2, [pc, #72]	; (804e4 <SystemInit+0x98>)
   8049c:	4b0e      	ldr	r3, [pc, #56]	; (804d8 <SystemInit+0x8c>)
   8049e:	629a      	str	r2, [r3, #40]	; 0x28
   804a0:	461a      	mov	r2, r3
   804a2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804a4:	f013 0f02 	tst.w	r3, #2
   804a8:	d0fb      	beq.n	804a2 <SystemInit+0x56>
   804aa:	2211      	movs	r2, #17
   804ac:	4b0a      	ldr	r3, [pc, #40]	; (804d8 <SystemInit+0x8c>)
   804ae:	631a      	str	r2, [r3, #48]	; 0x30
   804b0:	461a      	mov	r2, r3
   804b2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804b4:	f013 0f08 	tst.w	r3, #8
   804b8:	d0fb      	beq.n	804b2 <SystemInit+0x66>
   804ba:	2212      	movs	r2, #18
   804bc:	4b06      	ldr	r3, [pc, #24]	; (804d8 <SystemInit+0x8c>)
   804be:	631a      	str	r2, [r3, #48]	; 0x30
   804c0:	461a      	mov	r2, r3
   804c2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804c4:	f013 0f08 	tst.w	r3, #8
   804c8:	d0fb      	beq.n	804c2 <SystemInit+0x76>
   804ca:	4a07      	ldr	r2, [pc, #28]	; (804e8 <SystemInit+0x9c>)
   804cc:	4b07      	ldr	r3, [pc, #28]	; (804ec <SystemInit+0xa0>)
   804ce:	601a      	str	r2, [r3, #0]
   804d0:	4770      	bx	lr
   804d2:	bf00      	nop
   804d4:	400e0a00 	.word	0x400e0a00
   804d8:	400e0600 	.word	0x400e0600
   804dc:	00370809 	.word	0x00370809
   804e0:	01370809 	.word	0x01370809
   804e4:	200d3f01 	.word	0x200d3f01
   804e8:	0501bd00 	.word	0x0501bd00
   804ec:	20000000 	.word	0x20000000

000804f0 <main>:
#define TIME_INTERVAL 157



int main(void)
{
   804f0:	b570      	push	{r4, r5, r6, lr}
	// Assignment 6
	SystemInit();
   804f2:	4b15      	ldr	r3, [pc, #84]	; (80548 <main+0x58>)
   804f4:	4798      	blx	r3
	
	
	configure_uart();
   804f6:	4b15      	ldr	r3, [pc, #84]	; (8054c <main+0x5c>)
   804f8:	4798      	blx	r3
	can_init(CAN_BR, 1,1);
   804fa:	2201      	movs	r2, #1
   804fc:	4611      	mov	r1, r2
   804fe:	4814      	ldr	r0, [pc, #80]	; (80550 <main+0x60>)
   80500:	4b14      	ldr	r3, [pc, #80]	; (80554 <main+0x64>)
   80502:	4798      	blx	r3
	//can_init_def_tx_rx_mb(CAN_BR);
	WDT->WDT_MR = WDT_MR_WDDIS;
   80504:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80508:	4b13      	ldr	r3, [pc, #76]	; (80558 <main+0x68>)
   8050a:	605a      	str	r2, [r3, #4]
	pwm_timercounter_init();
   8050c:	4b13      	ldr	r3, [pc, #76]	; (8055c <main+0x6c>)
   8050e:	4798      	blx	r3
	adc_init();
   80510:	4b13      	ldr	r3, [pc, #76]	; (80560 <main+0x70>)
   80512:	4798      	blx	r3
	dac_init();
   80514:	4b13      	ldr	r3, [pc, #76]	; (80564 <main+0x74>)
   80516:	4798      	blx	r3
	solenoid_init();
   80518:	4b13      	ldr	r3, [pc, #76]	; (80568 <main+0x78>)
   8051a:	4798      	blx	r3
	motor_init();
   8051c:	4b13      	ldr	r3, [pc, #76]	; (8056c <main+0x7c>)
   8051e:	4798      	blx	r3
	pid2_init();
   80520:	4b13      	ldr	r3, [pc, #76]	; (80570 <main+0x80>)
   80522:	4798      	blx	r3
	//systick_delay_ms(1000);

	pid_timercounter_init();
   80524:	4b13      	ldr	r3, [pc, #76]	; (80574 <main+0x84>)
   80526:	4798      	blx	r3
	uint8_t number = 0;	
	//Assignment 6
	
	while (1)
	{
		can_receive(&message,0);
   80528:	4c13      	ldr	r4, [pc, #76]	; (80578 <main+0x88>)
   8052a:	4e14      	ldr	r6, [pc, #80]	; (8057c <main+0x8c>)
		
		
		//Move the servo angle (slider)
		pwm_update_dutycycle(message.data[3]);
   8052c:	4d14      	ldr	r5, [pc, #80]	; (80580 <main+0x90>)
		can_receive(&message,0);
   8052e:	2100      	movs	r1, #0
   80530:	4620      	mov	r0, r4
   80532:	47b0      	blx	r6
		pwm_update_dutycycle(message.data[3]);
   80534:	79a0      	ldrb	r0, [r4, #6]
   80536:	47a8      	blx	r5
		//solenoid_push(message.data[4]);
		//printf("Joystick button: %d \r\n", message.data[4]);
		
		
		
		position_x = message.data[0];
   80538:	78e0      	ldrb	r0, [r4, #3]
   8053a:	4b12      	ldr	r3, [pc, #72]	; (80584 <main+0x94>)
   8053c:	7018      	strb	r0, [r3, #0]
		
		//Move the servo position (joystick)
		pid2_ref(position_x);
   8053e:	4b12      	ldr	r3, [pc, #72]	; (80588 <main+0x98>)
   80540:	4798      	blx	r3
		pid2_update_controller();
   80542:	4b12      	ldr	r3, [pc, #72]	; (8058c <main+0x9c>)
   80544:	4798      	blx	r3
   80546:	e7f2      	b.n	8052e <main+0x3e>
   80548:	0008044d 	.word	0x0008044d
   8054c:	00080c79 	.word	0x00080c79
   80550:	00290561 	.word	0x00290561
   80554:	00080191 	.word	0x00080191
   80558:	400e1a50 	.word	0x400e1a50
   8055c:	000807dd 	.word	0x000807dd
   80560:	00080161 	.word	0x00080161
   80564:	00080375 	.word	0x00080375
   80568:	000808c1 	.word	0x000808c1
   8056c:	00080591 	.word	0x00080591
   80570:	00080685 	.word	0x00080685
   80574:	00080919 	.word	0x00080919
   80578:	20000470 	.word	0x20000470
   8057c:	00080281 	.word	0x00080281
   80580:	00080849 	.word	0x00080849
   80584:	20000468 	.word	0x20000468
   80588:	000806b1 	.word	0x000806b1
   8058c:	000807b1 	.word	0x000807b1

00080590 <motor_init>:

uint8_t encoderdataLSB;
uint8_t encoderdataMSB;
uint16_t encoderdata;

void motor_init(){
   80590:	b410      	push	{r4}

	PMC->PMC_WPMR |= PMC_WPMR_WPEN;
   80592:	4b23      	ldr	r3, [pc, #140]	; (80620 <motor_init+0x90>)
   80594:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   80598:	f042 0201 	orr.w	r2, r2, #1
   8059c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_WPMR |= PMC_WPMR_WPKEY_PASSWD;
   805a0:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
   805a4:	4a1f      	ldr	r2, [pc, #124]	; (80624 <motor_init+0x94>)
   805a6:	430a      	orrs	r2, r1
   805a8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PMC->PMC_PCER0 |= 1<<(ID_PIOD);
   805ac:	691a      	ldr	r2, [r3, #16]
   805ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   805b2:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER0 |= 1<<(ID_PIOC);
   805b4:	691a      	ldr	r2, [r3, #16]
   805b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   805ba:	611a      	str	r2, [r3, #16]
	
	 //Enable !OE
	 PIOD->PIO_PER = PIO_PD0;
   805bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
   805c0:	2201      	movs	r2, #1
   805c2:	601a      	str	r2, [r3, #0]
	 
	 // Enable EN
	 PIOD->PIO_PER = PIO_PD9;
   805c4:	f44f 7400 	mov.w	r4, #512	; 0x200
   805c8:	601c      	str	r4, [r3, #0]
	 
	 // Enable DIR
	 PIOD->PIO_PER = PIO_PD10;
   805ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
   805ce:	601a      	str	r2, [r3, #0]
	 
	 // Enable SEL
	 PIOD->PIO_PER = PIO_PD2;
   805d0:	2204      	movs	r2, #4
   805d2:	601a      	str	r2, [r3, #0]
	 
	 // Enable !RST
	 PIOD->PIO_PER = PIO_PD1;
   805d4:	2202      	movs	r2, #2
   805d6:	601a      	str	r2, [r3, #0]
	 
	 // Enable D0-D7
	 PIOC->PIO_PER |= PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC6 | PIO_PC7 | PIO_PC8;
   805d8:	4a13      	ldr	r2, [pc, #76]	; (80628 <motor_init+0x98>)
   805da:	6811      	ldr	r1, [r2, #0]
   805dc:	f441 71ff 	orr.w	r1, r1, #510	; 0x1fe
   805e0:	6011      	str	r1, [r2, #0]
	 
	 // Enable write
	 PIOD->PIO_OWER |= PIO_PD0 | PIO_PD9 | PIO_PD10 | PIO_PD2 | PIO_PD1;
   805e2:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   805e6:	f240 6007 	movw	r0, #1543	; 0x607
   805ea:	4301      	orrs	r1, r0
   805ec:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0

	// Disable write
	 PIOC->PIO_OWDR |= PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC6 | PIO_PC7 | PIO_PC8;
   805f0:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
   805f4:	f441 71ff 	orr.w	r1, r1, #510	; 0x1fe
   805f8:	f8c2 10a4 	str.w	r1, [r2, #164]	; 0xa4
	
	
	// Disable interrupts
	PIOD->PIO_IDR |= PIO_PD0 | PIO_PD9 | PIO_PD10 | PIO_PD2 | PIO_PD1;
   805fc:	6c59      	ldr	r1, [r3, #68]	; 0x44
   805fe:	4301      	orrs	r1, r0
   80600:	6459      	str	r1, [r3, #68]	; 0x44

	PIOC->PIO_IDR |= PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC6 | PIO_PC7 | PIO_PC8;
   80602:	6c51      	ldr	r1, [r2, #68]	; 0x44
   80604:	f441 71ff 	orr.w	r1, r1, #510	; 0x1fe
   80608:	6451      	str	r1, [r2, #68]	; 0x44
	
	// Output enable 
	PIOD->PIO_OER |= PIO_PD0 | PIO_PD9 | PIO_PD10 | PIO_PD2 | PIO_PD1;
   8060a:	6919      	ldr	r1, [r3, #16]
   8060c:	4301      	orrs	r1, r0
   8060e:	6119      	str	r1, [r3, #16]
	
	// Disable output
	PIOC->PIO_ODR |= PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC6 | PIO_PC7 | PIO_PC8;
   80610:	6951      	ldr	r1, [r2, #20]
   80612:	f441 71ff 	orr.w	r1, r1, #510	; 0x1fe
   80616:	6151      	str	r1, [r2, #20]


	// Set 
	 PIOD->PIO_SODR = PIO_PD9;
   80618:	631c      	str	r4, [r3, #48]	; 0x30
	 
}
   8061a:	bc10      	pop	{r4}
   8061c:	4770      	bx	lr
   8061e:	bf00      	nop
   80620:	400e0600 	.word	0x400e0600
   80624:	504d4300 	.word	0x504d4300
   80628:	400e1200 	.word	0x400e1200

0008062c <motor_read_encoder>:

uint16_t motor_read_encoder(void){
   8062c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PIOD->PIO_SODR = PIO_PD0;*/



	//Set SEL og !OE low
	PIOD->PIO_CODR = PIO_CODR_P0 | PIO_CODR_P2;
   8062e:	4c0f      	ldr	r4, [pc, #60]	; (8066c <motor_read_encoder+0x40>)
   80630:	2305      	movs	r3, #5
   80632:	6363      	str	r3, [r4, #52]	; 0x34
	
	//Delay 20us
	systick_delay_us(20);
   80634:	2014      	movs	r0, #20
   80636:	4f0e      	ldr	r7, [pc, #56]	; (80670 <motor_read_encoder+0x44>)
   80638:	47b8      	blx	r7
	
	//Read MSB
	encoderdataMSB = (PIOC->PIO_PDSR >> 1) & 0xFF;
   8063a:	4e0e      	ldr	r6, [pc, #56]	; (80674 <motor_read_encoder+0x48>)
   8063c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   8063e:	4d0e      	ldr	r5, [pc, #56]	; (80678 <motor_read_encoder+0x4c>)
   80640:	085b      	lsrs	r3, r3, #1
   80642:	702b      	strb	r3, [r5, #0]
	
	//Set SEL high
	PIOD->PIO_SODR = PIO_SODR_P2;
   80644:	2304      	movs	r3, #4
   80646:	6323      	str	r3, [r4, #48]	; 0x30

	//Delay 20us
	systick_delay_us(20);
   80648:	2014      	movs	r0, #20
   8064a:	47b8      	blx	r7
	
	//Read LSB
	encoderdataLSB = (PIOC->PIO_PDSR >> 1) & 0xFF;
   8064c:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
   8064e:	f3c0 0047 	ubfx	r0, r0, #1, #8
   80652:	4b0a      	ldr	r3, [pc, #40]	; (8067c <motor_read_encoder+0x50>)
   80654:	7018      	strb	r0, [r3, #0]
	
	//Toggle !RST
	PIOD->PIO_CODR = PIO_CODR_P1;
   80656:	2302      	movs	r3, #2
   80658:	6363      	str	r3, [r4, #52]	; 0x34
	
	PIOD->PIO_SODR = PIO_SODR_P1;
   8065a:	6323      	str	r3, [r4, #48]	; 0x30
	
	//Set !OE high
	PIOD->PIO_SODR = PIO_SODR_P0;
   8065c:	2301      	movs	r3, #1
   8065e:	6323      	str	r3, [r4, #48]	; 0x30
	
	encoderdata = (encoderdataMSB<<8) | encoderdataLSB;
   80660:	782b      	ldrb	r3, [r5, #0]
   80662:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   80666:	4b06      	ldr	r3, [pc, #24]	; (80680 <motor_read_encoder+0x54>)
   80668:	8018      	strh	r0, [r3, #0]
	
	return encoderdata;
}
   8066a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8066c:	400e1400 	.word	0x400e1400
   80670:	000808f5 	.word	0x000808f5
   80674:	400e1200 	.word	0x400e1200
   80678:	20000483 	.word	0x20000483
   8067c:	20000482 	.word	0x20000482
   80680:	20000480 	.word	0x20000480

00080684 <pid2_init>:
int16_t kd = 1;


void pid2_init(void){
	//init values
	sum_error = 0;
   80684:	4b07      	ldr	r3, [pc, #28]	; (806a4 <pid2_init+0x20>)
   80686:	2200      	movs	r2, #0
   80688:	601a      	str	r2, [r3, #0]
	last_error = 0;
   8068a:	809a      	strh	r2, [r3, #4]
	
	//limit the summing of errors
	max_sum_error = (INT12_MAX/2)/(ki+1);
   8068c:	4b06      	ldr	r3, [pc, #24]	; (806a8 <pid2_init+0x24>)
   8068e:	f9b3 3000 	ldrsh.w	r3, [r3]
   80692:	1c5a      	adds	r2, r3, #1
   80694:	f240 73ff 	movw	r3, #2047	; 0x7ff
   80698:	fb93 f3f2 	sdiv	r3, r3, r2
   8069c:	4a03      	ldr	r2, [pc, #12]	; (806ac <pid2_init+0x28>)
   8069e:	6013      	str	r3, [r2, #0]
   806a0:	4770      	bx	lr
   806a2:	bf00      	nop
   806a4:	20000458 	.word	0x20000458
   806a8:	20000004 	.word	0x20000004
   806ac:	2000046c 	.word	0x2000046c

000806b0 <pid2_ref>:

//!!!!!
void pid2_ref(uint8_t joy_pos){
	//deadzone 

	if (joy_pos<6){
   806b0:	2805      	cmp	r0, #5
   806b2:	d90d      	bls.n	806d0 <pid2_ref+0x20>
		ref = 0;
	}else{
		ref = (((int32_t) (ENCODER_MAX-2*ENCODER_SAFEZONE)*(int32_t)joy_pos)/SETPOINT_MAX) + ENCODER_SAFEZONE; //PLS ENDRE
   806b4:	f242 1334 	movw	r3, #8500	; 0x2134
   806b8:	fb03 f000 	mul.w	r0, r3, r0
   806bc:	4b06      	ldr	r3, [pc, #24]	; (806d8 <pid2_ref+0x28>)
   806be:	fb83 2300 	smull	r2, r3, r3, r0
   806c2:	4403      	add	r3, r0
   806c4:	17c0      	asrs	r0, r0, #31
   806c6:	ebc0 10e3 	rsb	r0, r0, r3, asr #7
   806ca:	4b04      	ldr	r3, [pc, #16]	; (806dc <pid2_ref+0x2c>)
   806cc:	6098      	str	r0, [r3, #8]
   806ce:	4770      	bx	lr
		ref = 0;
   806d0:	2200      	movs	r2, #0
   806d2:	4b02      	ldr	r3, [pc, #8]	; (806dc <pid2_ref+0x2c>)
   806d4:	609a      	str	r2, [r3, #8]
   806d6:	4770      	bx	lr
   806d8:	80808081 	.word	0x80808081
   806dc:	20000458 	.word	0x20000458

000806e0 <pid2_controller>:

	
//	printf("REf: %d \r\n", ref);
}

int32_t pid2_controller(int16_t measurement){
   806e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   806e2:	f242 1534 	movw	r5, #8500	; 0x2134
   806e6:	42a8      	cmp	r0, r5
   806e8:	bfa8      	it	ge
   806ea:	4628      	movge	r0, r5
		measurement = 0;
	} else if (measurement > 8500){
		measurement = 8500;
	}
	
	error = ref - measurement;
   806ec:	4b27      	ldr	r3, [pc, #156]	; (8078c <pid2_controller+0xac>)
   806ee:	689d      	ldr	r5, [r3, #8]
   806f0:	2800      	cmp	r0, #0
   806f2:	bfa8      	it	ge
   806f4:	1a2d      	subge	r5, r5, r0
	
	if(error < 0){
   806f6:	2d00      	cmp	r5, #0
		PIOD->PIO_SODR = PIO_PD10;
   806f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   806fc:	4b24      	ldr	r3, [pc, #144]	; (80790 <pid2_controller+0xb0>)
   806fe:	bfb4      	ite	lt
   80700:	631a      	strlt	r2, [r3, #48]	; 0x30
		}else{
		PIOD->PIO_CODR = PIO_PD10;
   80702:	635a      	strge	r2, [r3, #52]	; 0x34
	}
	error = abs(error);
   80704:	2d00      	cmp	r5, #0
   80706:	bfb8      	it	lt
   80708:	426d      	neglt	r5, r5
	
	p_term = kp*error;
   8070a:	4c22      	ldr	r4, [pc, #136]	; (80794 <pid2_controller+0xb4>)
   8070c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   80710:	fb05 f703 	mul.w	r7, r5, r3
	printf("error: %d \r\n", error);
   80714:	4629      	mov	r1, r5
   80716:	4820      	ldr	r0, [pc, #128]	; (80798 <pid2_controller+0xb8>)
   80718:	4e20      	ldr	r6, [pc, #128]	; (8079c <pid2_controller+0xbc>)
   8071a:	47b0      	blx	r6

//	printf("JOYSTICK: %d \r\n\r\n", ref);
	//printf("ENCODER: %d \r\n\r\n", measurement);

	temp = (sum_error+error)/10;
   8071c:	481b      	ldr	r0, [pc, #108]	; (8078c <pid2_controller+0xac>)
   8071e:	6801      	ldr	r1, [r0, #0]
   80720:	4429      	add	r1, r5
   80722:	4a1f      	ldr	r2, [pc, #124]	; (807a0 <pid2_controller+0xc0>)
   80724:	fb82 3201 	smull	r3, r2, r2, r1
   80728:	17cb      	asrs	r3, r1, #31
   8072a:	ebc3 02a2 	rsb	r2, r3, r2, asr #2
	sum_error = temp;
   8072e:	6002      	str	r2, [r0, #0]
	i_term = ki*sum_error;
   80730:	f9b4 3000 	ldrsh.w	r3, [r4]
	
	d_term = kd*(error-last_error)*10;
   80734:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
   80738:	1a69      	subs	r1, r5, r1
   8073a:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
   8073e:	fb04 f401 	mul.w	r4, r4, r1
   80742:	eb04 0484 	add.w	r4, r4, r4, lsl #2
	last_error = error;
   80746:	8085      	strh	r5, [r0, #4]
	
	//set input
	input = (p_term+i_term+d_term)/SCALING_FACTOR;
   80748:	fb02 7303 	mla	r3, r2, r3, r7
   8074c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
   80750:	4c14      	ldr	r4, [pc, #80]	; (807a4 <pid2_controller+0xc4>)
   80752:	fb84 2403 	smull	r2, r4, r4, r3
   80756:	441c      	add	r4, r3
   80758:	17db      	asrs	r3, r3, #31
   8075a:	ebc3 14e4 	rsb	r4, r3, r4, asr #7
	printf("input: %d \r\n\r\n", input);
   8075e:	4621      	mov	r1, r4
   80760:	4811      	ldr	r0, [pc, #68]	; (807a8 <pid2_controller+0xc8>)
   80762:	47b0      	blx	r6

	if(input > INT12_MAX){
   80764:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   80768:	db07      	blt.n	8077a <pid2_controller+0x9a>
		input = INT12_MAX;
		sum_error = sum_error-error;
   8076a:	4b08      	ldr	r3, [pc, #32]	; (8078c <pid2_controller+0xac>)
   8076c:	6818      	ldr	r0, [r3, #0]
   8076e:	1b45      	subs	r5, r0, r5
   80770:	601d      	str	r5, [r3, #0]
		input = INT12_MAX;
   80772:	f640 74ff 	movw	r4, #4095	; 0xfff
		input = -INT12_MAX;
		sum_error = sum_error-error;
	}
	
	return input;
}
   80776:	4620      	mov	r0, r4
   80778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if(input < -INT12_MAX){
   8077a:	f514 5f80 	cmn.w	r4, #4096	; 0x1000
   8077e:	dcfa      	bgt.n	80776 <pid2_controller+0x96>
		sum_error = sum_error-error;
   80780:	4a02      	ldr	r2, [pc, #8]	; (8078c <pid2_controller+0xac>)
   80782:	6813      	ldr	r3, [r2, #0]
   80784:	1b5b      	subs	r3, r3, r5
   80786:	6013      	str	r3, [r2, #0]
		input = -INT12_MAX;
   80788:	4c08      	ldr	r4, [pc, #32]	; (807ac <pid2_controller+0xcc>)
	return input;
   8078a:	e7f4      	b.n	80776 <pid2_controller+0x96>
   8078c:	20000458 	.word	0x20000458
   80790:	400e1400 	.word	0x400e1400
   80794:	20000004 	.word	0x20000004
   80798:	000816dc 	.word	0x000816dc
   8079c:	00080c55 	.word	0x00080c55
   807a0:	66666667 	.word	0x66666667
   807a4:	80808081 	.word	0x80808081
   807a8:	000816ec 	.word	0x000816ec
   807ac:	fffff001 	.word	0xfffff001

000807b0 <pid2_update_controller>:

void pid2_update_controller(void){
   807b0:	b508      	push	{r3, lr}
	//update PID contoller values at time interval
	if(PWM_ISR1_CHID3){
		int16_t input = pid2_controller(motor_read_encoder())*6;		
   807b2:	4b07      	ldr	r3, [pc, #28]	; (807d0 <pid2_update_controller+0x20>)
   807b4:	4798      	blx	r3
   807b6:	b200      	sxth	r0, r0
   807b8:	4b06      	ldr	r3, [pc, #24]	; (807d4 <pid2_update_controller+0x24>)
   807ba:	4798      	blx	r3
   807bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   807c0:	0040      	lsls	r0, r0, #1
		dac_write(abs(input));
   807c2:	b200      	sxth	r0, r0
   807c4:	2800      	cmp	r0, #0
   807c6:	bfb8      	it	lt
   807c8:	4240      	neglt	r0, r0
   807ca:	4b03      	ldr	r3, [pc, #12]	; (807d8 <pid2_update_controller+0x28>)
   807cc:	4798      	blx	r3
   807ce:	bd08      	pop	{r3, pc}
   807d0:	0008062d 	.word	0x0008062d
   807d4:	000806e1 	.word	0x000806e1
   807d8:	000803b5 	.word	0x000803b5

000807dc <pwm_timercounter_init>:
   807dc:	4b17      	ldr	r3, [pc, #92]	; (8083c <pwm_timercounter_init+0x60>)
   807de:	691a      	ldr	r2, [r3, #16]
   807e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   807e4:	611a      	str	r2, [r3, #16]
   807e6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   807ea:	f042 0210 	orr.w	r2, r2, #16
   807ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   807f2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   807f6:	685a      	ldr	r2, [r3, #4]
   807f8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   807fc:	605a      	str	r2, [r3, #4]
   807fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80800:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80804:	671a      	str	r2, [r3, #112]	; 0x70
   80806:	4b0e      	ldr	r3, [pc, #56]	; (80840 <pwm_timercounter_init+0x64>)
   80808:	681a      	ldr	r2, [r3, #0]
   8080a:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
   8080e:	f042 0201 	orr.w	r2, r2, #1
   80812:	601a      	str	r2, [r3, #0]
   80814:	f8d3 22a0 	ldr.w	r2, [r3, #672]	; 0x2a0
   80818:	f042 020b 	orr.w	r2, r2, #11
   8081c:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
   80820:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
   80824:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
   80828:	f645 62d0 	movw	r2, #24272	; 0x5ed0
   8082c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
   80830:	685a      	ldr	r2, [r3, #4]
   80832:	f042 0220 	orr.w	r2, r2, #32
   80836:	605a      	str	r2, [r3, #4]
   80838:	4770      	bx	lr
   8083a:	bf00      	nop
   8083c:	400e0600 	.word	0x400e0600
   80840:	40094000 	.word	0x40094000
   80844:	00000000 	.word	0x00000000

00080848 <pwm_update_dutycycle>:
   80848:	b510      	push	{r4, lr}
   8084a:	f380 0008 	usat	r0, #8, r0
   8084e:	4b16      	ldr	r3, [pc, #88]	; (808a8 <pwm_update_dutycycle+0x60>)
   80850:	4798      	blx	r3
   80852:	a30f      	add	r3, pc, #60	; (adr r3, 80890 <pwm_update_dutycycle+0x48>)
   80854:	e9d3 2300 	ldrd	r2, r3, [r3]
   80858:	4c14      	ldr	r4, [pc, #80]	; (808ac <pwm_update_dutycycle+0x64>)
   8085a:	47a0      	blx	r4
   8085c:	a30e      	add	r3, pc, #56	; (adr r3, 80898 <pwm_update_dutycycle+0x50>)
   8085e:	e9d3 2300 	ldrd	r2, r3, [r3]
   80862:	4c13      	ldr	r4, [pc, #76]	; (808b0 <pwm_update_dutycycle+0x68>)
   80864:	47a0      	blx	r4
   80866:	a30e      	add	r3, pc, #56	; (adr r3, 808a0 <pwm_update_dutycycle+0x58>)
   80868:	e9d3 2300 	ldrd	r2, r3, [r3]
   8086c:	4c11      	ldr	r4, [pc, #68]	; (808b4 <pwm_update_dutycycle+0x6c>)
   8086e:	47a0      	blx	r4
   80870:	4b11      	ldr	r3, [pc, #68]	; (808b8 <pwm_update_dutycycle+0x70>)
   80872:	4798      	blx	r3
   80874:	f645 33c2 	movw	r3, #23490	; 0x5bc2
   80878:	4298      	cmp	r0, r3
   8087a:	bf38      	it	cc
   8087c:	4618      	movcc	r0, r3
   8087e:	f246 13df 	movw	r3, #25055	; 0x61df
   80882:	4298      	cmp	r0, r3
   80884:	bf28      	it	cs
   80886:	4618      	movcs	r0, r3
   80888:	4b0c      	ldr	r3, [pc, #48]	; (808bc <pwm_update_dutycycle+0x74>)
   8088a:	f8c3 02a8 	str.w	r0, [r3, #680]	; 0x2a8
   8088e:	bd10      	pop	{r4, pc}
   80890:	00000000 	.word	0x00000000
   80894:	406fe000 	.word	0x406fe000
   80898:	00000000 	.word	0x00000000
   8089c:	40987400 	.word	0x40987400
   808a0:	00000000 	.word	0x00000000
   808a4:	40d6f080 	.word	0x40d6f080
   808a8:	00081011 	.word	0x00081011
   808ac:	00081331 	.word	0x00081331
   808b0:	000810dd 	.word	0x000810dd
   808b4:	00080d79 	.word	0x00080d79
   808b8:	00081501 	.word	0x00081501
   808bc:	40094000 	.word	0x40094000

000808c0 <solenoid_init>:
   808c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   808c4:	4b04      	ldr	r3, [pc, #16]	; (808d8 <solenoid_init+0x18>)
   808c6:	611a      	str	r2, [r3, #16]
   808c8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   808cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
   808ce:	4311      	orrs	r1, r2
   808d0:	6719      	str	r1, [r3, #112]	; 0x70
   808d2:	601a      	str	r2, [r3, #0]
   808d4:	611a      	str	r2, [r3, #16]
   808d6:	4770      	bx	lr
   808d8:	400e0600 	.word	0x400e0600

000808dc <systick_init_us>:
   808dc:	4b04      	ldr	r3, [pc, #16]	; (808f0 <systick_init_us+0x14>)
   808de:	220a      	movs	r2, #10
   808e0:	605a      	str	r2, [r3, #4]
   808e2:	2200      	movs	r2, #0
   808e4:	609a      	str	r2, [r3, #8]
   808e6:	681a      	ldr	r2, [r3, #0]
   808e8:	f042 0203 	orr.w	r2, r2, #3
   808ec:	601a      	str	r2, [r3, #0]
   808ee:	4770      	bx	lr
   808f0:	e000e010 	.word	0xe000e010

000808f4 <systick_delay_us>:
   808f4:	b510      	push	{r4, lr}
   808f6:	4c06      	ldr	r4, [pc, #24]	; (80910 <systick_delay_us+0x1c>)
   808f8:	6020      	str	r0, [r4, #0]
   808fa:	4b06      	ldr	r3, [pc, #24]	; (80914 <systick_delay_us+0x20>)
   808fc:	4798      	blx	r3
   808fe:	6823      	ldr	r3, [r4, #0]
   80900:	b123      	cbz	r3, 8090c <systick_delay_us+0x18>
   80902:	4622      	mov	r2, r4
   80904:	bf00      	nop
   80906:	6813      	ldr	r3, [r2, #0]
   80908:	2b00      	cmp	r3, #0
   8090a:	d1fb      	bne.n	80904 <systick_delay_us+0x10>
   8090c:	bd10      	pop	{r4, pc}
   8090e:	bf00      	nop
   80910:	20000464 	.word	0x20000464
   80914:	000808dd 	.word	0x000808dd

00080918 <pid_timercounter_init>:
   80918:	4b11      	ldr	r3, [pc, #68]	; (80960 <pid_timercounter_init+0x48>)
   8091a:	2208      	movs	r2, #8
   8091c:	611a      	str	r2, [r3, #16]
   8091e:	4911      	ldr	r1, [pc, #68]	; (80964 <pid_timercounter_init+0x4c>)
   80920:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   80924:	f042 0210 	orr.w	r2, r2, #16
   80928:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
   8092c:	681a      	ldr	r2, [r3, #0]
   8092e:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
   80932:	f042 0201 	orr.w	r2, r2, #1
   80936:	601a      	str	r2, [r3, #0]
   80938:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
   8093c:	f042 020b 	orr.w	r2, r2, #11
   80940:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
   80944:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
   80948:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
   8094c:	f645 62d0 	movw	r2, #24272	; 0x5ed0
   80950:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
   80954:	685a      	ldr	r2, [r3, #4]
   80956:	f042 0208 	orr.w	r2, r2, #8
   8095a:	605a      	str	r2, [r3, #4]
   8095c:	4770      	bx	lr
   8095e:	bf00      	nop
   80960:	40094000 	.word	0x40094000
   80964:	400e0600 	.word	0x400e0600

00080968 <SysTick_Handler>:
   80968:	4b06      	ldr	r3, [pc, #24]	; (80984 <SysTick_Handler+0x1c>)
   8096a:	681b      	ldr	r3, [r3, #0]
   8096c:	b123      	cbz	r3, 80978 <SysTick_Handler+0x10>
   8096e:	4a05      	ldr	r2, [pc, #20]	; (80984 <SysTick_Handler+0x1c>)
   80970:	6813      	ldr	r3, [r2, #0]
   80972:	3b01      	subs	r3, #1
   80974:	6013      	str	r3, [r2, #0]
   80976:	4770      	bx	lr
   80978:	4b03      	ldr	r3, [pc, #12]	; (80988 <SysTick_Handler+0x20>)
   8097a:	2200      	movs	r2, #0
   8097c:	601a      	str	r2, [r3, #0]
   8097e:	609a      	str	r2, [r3, #8]
   80980:	4770      	bx	lr
   80982:	bf00      	nop
   80984:	20000464 	.word	0x20000464
   80988:	e000e010 	.word	0xe000e010

0008098c <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   8098c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80990:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80992:	1e16      	subs	r6, r2, #0
   80994:	dd48      	ble.n	80a28 <prints+0x9c>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   80996:	780a      	ldrb	r2, [r1, #0]
   80998:	2a00      	cmp	r2, #0
   8099a:	d035      	beq.n	80a08 <prints+0x7c>
   8099c:	460a      	mov	r2, r1
   8099e:	2400      	movs	r4, #0
   809a0:	3401      	adds	r4, #1
   809a2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   809a6:	2900      	cmp	r1, #0
   809a8:	d1fa      	bne.n	809a0 <prints+0x14>
		if (len >= width) width = 0;
   809aa:	42a6      	cmp	r6, r4
   809ac:	dc2d      	bgt.n	80a0a <prints+0x7e>
   809ae:	2400      	movs	r4, #0
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
   809b0:	f003 0202 	and.w	r2, r3, #2
   809b4:	2a00      	cmp	r2, #0
   809b6:	bf0c      	ite	eq
   809b8:	f04f 0820 	moveq.w	r8, #32
   809bc:	f04f 0830 	movne.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
   809c0:	f013 0301 	ands.w	r3, r3, #1
   809c4:	d123      	bne.n	80a0e <prints+0x82>
		for ( ; width > 0; --width) {
   809c6:	2c00      	cmp	r4, #0
   809c8:	dd28      	ble.n	80a1c <prints+0x90>
   809ca:	4626      	mov	r6, r4
	(void) uart_putchar(c);  //Send characters to uart
   809cc:	fa5f f988 	uxtb.w	r9, r8
   809d0:	4f18      	ldr	r7, [pc, #96]	; (80a34 <prints+0xa8>)
   809d2:	4648      	mov	r0, r9
   809d4:	47b8      	blx	r7
		for ( ; width > 0; --width) {
   809d6:	3e01      	subs	r6, #1
   809d8:	d1fb      	bne.n	809d2 <prints+0x46>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   809da:	7828      	ldrb	r0, [r5, #0]
   809dc:	b188      	cbz	r0, 80a02 <prints+0x76>
	(void) uart_putchar(c);  //Send characters to uart
   809de:	4f15      	ldr	r7, [pc, #84]	; (80a34 <prints+0xa8>)
   809e0:	47b8      	blx	r7
		printchar (out, *string);
		++pc;
   809e2:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   809e4:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   809e8:	2800      	cmp	r0, #0
   809ea:	d1f9      	bne.n	809e0 <prints+0x54>
	}
	for ( ; width > 0; --width) {
   809ec:	2e00      	cmp	r6, #0
   809ee:	dd08      	ble.n	80a02 <prints+0x76>
   809f0:	4635      	mov	r5, r6
	(void) uart_putchar(c);  //Send characters to uart
   809f2:	fa5f f888 	uxtb.w	r8, r8
   809f6:	4f0f      	ldr	r7, [pc, #60]	; (80a34 <prints+0xa8>)
   809f8:	4640      	mov	r0, r8
   809fa:	47b8      	blx	r7
	for ( ; width > 0; --width) {
   809fc:	3d01      	subs	r5, #1
   809fe:	d1fb      	bne.n	809f8 <prints+0x6c>
   80a00:	4434      	add	r4, r6
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
   80a02:	4620      	mov	r0, r4
   80a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (ptr = string; *ptr; ++ptr) ++len;
   80a08:	2400      	movs	r4, #0
		else width -= len;
   80a0a:	1b34      	subs	r4, r6, r4
   80a0c:	e7d0      	b.n	809b0 <prints+0x24>
   80a0e:	4626      	mov	r6, r4
	for ( ; *string ; ++string) {
   80a10:	7828      	ldrb	r0, [r5, #0]
   80a12:	b108      	cbz	r0, 80a18 <prints+0x8c>
	register int pc = 0, padchar = ' ';
   80a14:	2400      	movs	r4, #0
   80a16:	e7e2      	b.n	809de <prints+0x52>
   80a18:	2400      	movs	r4, #0
   80a1a:	e7e7      	b.n	809ec <prints+0x60>
		for ( ; width > 0; --width) {
   80a1c:	4626      	mov	r6, r4
   80a1e:	461c      	mov	r4, r3
   80a20:	e7db      	b.n	809da <prints+0x4e>
	register int pc = 0, padchar = ' ';
   80a22:	f04f 0820 	mov.w	r8, #32
   80a26:	e7d8      	b.n	809da <prints+0x4e>
	if (!(pad & PAD_RIGHT)) {
   80a28:	f013 0401 	ands.w	r4, r3, #1
   80a2c:	d0f9      	beq.n	80a22 <prints+0x96>
	register int pc = 0, padchar = ' ';
   80a2e:	f04f 0820 	mov.w	r8, #32
   80a32:	e7ed      	b.n	80a10 <prints+0x84>
   80a34:	00080ce1 	.word	0x00080ce1

00080a38 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80a38:	b5f0      	push	{r4, r5, r6, r7, lr}
   80a3a:	b085      	sub	sp, #20
   80a3c:	4607      	mov	r7, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80a3e:	b381      	cbz	r1, 80aa2 <printi+0x6a>
   80a40:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80a42:	b10b      	cbz	r3, 80a48 <printi+0x10>
   80a44:	2a0a      	cmp	r2, #10
   80a46:	d038      	beq.n	80aba <printi+0x82>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   80a48:	2300      	movs	r3, #0
   80a4a:	f88d 300f 	strb.w	r3, [sp, #15]

	while (u) {
   80a4e:	2600      	movs	r6, #0
   80a50:	2900      	cmp	r1, #0
   80a52:	d046      	beq.n	80ae2 <printi+0xaa>
   80a54:	f10d 050f 	add.w	r5, sp, #15
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
   80a58:	990c      	ldr	r1, [sp, #48]	; 0x30
   80a5a:	393a      	subs	r1, #58	; 0x3a
		t = u % b;
   80a5c:	fbb4 f3f2 	udiv	r3, r4, r2
   80a60:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   80a64:	2b09      	cmp	r3, #9
			t += letbase - '0' - 10;
   80a66:	bfc8      	it	gt
   80a68:	185b      	addgt	r3, r3, r1
		*--s = t + '0';
   80a6a:	3330      	adds	r3, #48	; 0x30
   80a6c:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   80a70:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   80a74:	2c00      	cmp	r4, #0
   80a76:	d1f1      	bne.n	80a5c <printi+0x24>
	}

	if (neg) {
   80a78:	b156      	cbz	r6, 80a90 <printi+0x58>
		if( width && (pad & PAD_ZERO) ) {
   80a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a7c:	b11b      	cbz	r3, 80a86 <printi+0x4e>
   80a7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a80:	f013 0f02 	tst.w	r3, #2
   80a84:	d125      	bne.n	80ad2 <printi+0x9a>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80a86:	232d      	movs	r3, #45	; 0x2d
   80a88:	f805 3c01 	strb.w	r3, [r5, #-1]
   80a8c:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80a8e:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80a94:	4629      	mov	r1, r5
   80a96:	4638      	mov	r0, r7
   80a98:	4c14      	ldr	r4, [pc, #80]	; (80aec <printi+0xb4>)
   80a9a:	47a0      	blx	r4
   80a9c:	4430      	add	r0, r6
}
   80a9e:	b005      	add	sp, #20
   80aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_buf[0] = '0';
   80aa2:	2330      	movs	r3, #48	; 0x30
   80aa4:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80aa8:	2300      	movs	r3, #0
   80aaa:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80aae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80ab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80ab2:	a901      	add	r1, sp, #4
   80ab4:	4c0d      	ldr	r4, [pc, #52]	; (80aec <printi+0xb4>)
   80ab6:	47a0      	blx	r4
   80ab8:	e7f1      	b.n	80a9e <printi+0x66>
	if (sg && b == 10 && i < 0) {
   80aba:	2900      	cmp	r1, #0
   80abc:	dac4      	bge.n	80a48 <printi+0x10>
		u = -i;
   80abe:	424c      	negs	r4, r1
	*s = '\0';
   80ac0:	2300      	movs	r3, #0
   80ac2:	f88d 300f 	strb.w	r3, [sp, #15]
	s = print_buf + PRINT_BUF_LEN-1;
   80ac6:	f10d 050f 	add.w	r5, sp, #15
	while (u) {
   80aca:	2c00      	cmp	r4, #0
   80acc:	d0d5      	beq.n	80a7a <printi+0x42>
		neg = 1;
   80ace:	2601      	movs	r6, #1
   80ad0:	e7c0      	b.n	80a54 <printi+0x1c>
	(void) uart_putchar(c);  //Send characters to uart
   80ad2:	202d      	movs	r0, #45	; 0x2d
   80ad4:	4b06      	ldr	r3, [pc, #24]	; (80af0 <printi+0xb8>)
   80ad6:	4798      	blx	r3
			--width;
   80ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80ada:	3b01      	subs	r3, #1
   80adc:	930a      	str	r3, [sp, #40]	; 0x28
			++pc;
   80ade:	2601      	movs	r6, #1
			--width;
   80ae0:	e7d6      	b.n	80a90 <printi+0x58>
	register int t, neg = 0, pc = 0;
   80ae2:	461e      	mov	r6, r3
	s = print_buf + PRINT_BUF_LEN-1;
   80ae4:	f10d 050f 	add.w	r5, sp, #15
   80ae8:	e7d2      	b.n	80a90 <printi+0x58>
   80aea:	bf00      	nop
   80aec:	0008098d 	.word	0x0008098d
   80af0:	00080ce1 	.word	0x00080ce1

00080af4 <print>:

static int print( char **out, const char *format, va_list args )
{
   80af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80af8:	b087      	sub	sp, #28
   80afa:	4680      	mov	r8, r0
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   80afc:	780b      	ldrb	r3, [r1, #0]
   80afe:	2b00      	cmp	r3, #0
   80b00:	f000 8094 	beq.w	80c2c <print+0x138>
   80b04:	468b      	mov	fp, r1
   80b06:	4617      	mov	r7, r2
   80b08:	2500      	movs	r5, #0
	(void) uart_putchar(c);  //Send characters to uart
   80b0a:	4e4e      	ldr	r6, [pc, #312]	; (80c44 <print+0x150>)
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
   80b0c:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80c4c <print+0x158>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80b10:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80c50 <print+0x15c>
   80b14:	e046      	b.n	80ba4 <print+0xb0>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80b16:	2200      	movs	r2, #0
   80b18:	e070      	b.n	80bfc <print+0x108>
				register char *s = (char *)va_arg( args, int );
   80b1a:	6839      	ldr	r1, [r7, #0]
   80b1c:	3704      	adds	r7, #4
				pc += prints (out, s?s:"(null)", width, pad);
   80b1e:	484a      	ldr	r0, [pc, #296]	; (80c48 <print+0x154>)
   80b20:	2900      	cmp	r1, #0
   80b22:	bf08      	it	eq
   80b24:	4601      	moveq	r1, r0
   80b26:	4640      	mov	r0, r8
   80b28:	47d0      	blx	sl
   80b2a:	4405      	add	r5, r0
				continue;
   80b2c:	e035      	b.n	80b9a <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80b2e:	6839      	ldr	r1, [r7, #0]
   80b30:	3704      	adds	r7, #4
   80b32:	2061      	movs	r0, #97	; 0x61
   80b34:	9002      	str	r0, [sp, #8]
   80b36:	9301      	str	r3, [sp, #4]
   80b38:	9200      	str	r2, [sp, #0]
   80b3a:	2301      	movs	r3, #1
   80b3c:	220a      	movs	r2, #10
   80b3e:	4640      	mov	r0, r8
   80b40:	47c8      	blx	r9
   80b42:	4405      	add	r5, r0
				continue;
   80b44:	e029      	b.n	80b9a <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80b46:	6839      	ldr	r1, [r7, #0]
   80b48:	3704      	adds	r7, #4
   80b4a:	2061      	movs	r0, #97	; 0x61
   80b4c:	9002      	str	r0, [sp, #8]
   80b4e:	9301      	str	r3, [sp, #4]
   80b50:	9200      	str	r2, [sp, #0]
   80b52:	2300      	movs	r3, #0
   80b54:	2210      	movs	r2, #16
   80b56:	4640      	mov	r0, r8
   80b58:	47c8      	blx	r9
   80b5a:	4405      	add	r5, r0
				continue;
   80b5c:	e01d      	b.n	80b9a <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80b5e:	6839      	ldr	r1, [r7, #0]
   80b60:	3704      	adds	r7, #4
   80b62:	2041      	movs	r0, #65	; 0x41
   80b64:	9002      	str	r0, [sp, #8]
   80b66:	9301      	str	r3, [sp, #4]
   80b68:	9200      	str	r2, [sp, #0]
   80b6a:	2300      	movs	r3, #0
   80b6c:	2210      	movs	r2, #16
   80b6e:	4640      	mov	r0, r8
   80b70:	47c8      	blx	r9
   80b72:	4405      	add	r5, r0
				continue;
   80b74:	e011      	b.n	80b9a <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80b76:	6839      	ldr	r1, [r7, #0]
   80b78:	3704      	adds	r7, #4
   80b7a:	2061      	movs	r0, #97	; 0x61
   80b7c:	9002      	str	r0, [sp, #8]
   80b7e:	9301      	str	r3, [sp, #4]
   80b80:	9200      	str	r2, [sp, #0]
   80b82:	2300      	movs	r3, #0
   80b84:	220a      	movs	r2, #10
   80b86:	4640      	mov	r0, r8
   80b88:	47c8      	blx	r9
   80b8a:	4405      	add	r5, r0
				continue;
   80b8c:	e005      	b.n	80b9a <print+0xa6>
			++format;
   80b8e:	46a3      	mov	fp, r4
	(void) uart_putchar(c);  //Send characters to uart
   80b90:	f89b 0000 	ldrb.w	r0, [fp]
   80b94:	47b0      	blx	r6
			}
		}
		else {
		out:
			printchar (out, *format);
			++pc;
   80b96:	3501      	adds	r5, #1
   80b98:	465c      	mov	r4, fp
	for (; *format != 0; ++format) {
   80b9a:	f104 0b01 	add.w	fp, r4, #1
   80b9e:	7863      	ldrb	r3, [r4, #1]
   80ba0:	2b00      	cmp	r3, #0
   80ba2:	d044      	beq.n	80c2e <print+0x13a>
		if (*format == '%') {
   80ba4:	2b25      	cmp	r3, #37	; 0x25
   80ba6:	d1f3      	bne.n	80b90 <print+0x9c>
			++format;
   80ba8:	f10b 0401 	add.w	r4, fp, #1
			if (*format == '\0') break;
   80bac:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80bb0:	2b00      	cmp	r3, #0
   80bb2:	d03c      	beq.n	80c2e <print+0x13a>
			if (*format == '%') goto out;
   80bb4:	2b25      	cmp	r3, #37	; 0x25
   80bb6:	d0ea      	beq.n	80b8e <print+0x9a>
			if (*format == '-') {
   80bb8:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
   80bba:	bf06      	itte	eq
   80bbc:	f10b 0402 	addeq.w	r4, fp, #2
				pad = PAD_RIGHT;
   80bc0:	2301      	moveq	r3, #1
			width = pad = 0;
   80bc2:	2300      	movne	r3, #0
			while (*format == '0') {
   80bc4:	7822      	ldrb	r2, [r4, #0]
   80bc6:	2a30      	cmp	r2, #48	; 0x30
   80bc8:	d105      	bne.n	80bd6 <print+0xe2>
				pad |= PAD_ZERO;
   80bca:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80bce:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80bd2:	2a30      	cmp	r2, #48	; 0x30
   80bd4:	d0f9      	beq.n	80bca <print+0xd6>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80bd6:	7821      	ldrb	r1, [r4, #0]
   80bd8:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80bdc:	b2d2      	uxtb	r2, r2
   80bde:	2a09      	cmp	r2, #9
   80be0:	d899      	bhi.n	80b16 <print+0x22>
   80be2:	2200      	movs	r2, #0
				width *= 10;
   80be4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
				width += *format - '0';
   80be8:	3930      	subs	r1, #48	; 0x30
   80bea:	eb01 0242 	add.w	r2, r1, r2, lsl #1
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80bee:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80bf2:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80bf6:	b2c0      	uxtb	r0, r0
   80bf8:	2809      	cmp	r0, #9
   80bfa:	d9f3      	bls.n	80be4 <print+0xf0>
			if( *format == 's' ) {
   80bfc:	2973      	cmp	r1, #115	; 0x73
   80bfe:	d08c      	beq.n	80b1a <print+0x26>
			if( *format == 'd' ) {
   80c00:	2964      	cmp	r1, #100	; 0x64
   80c02:	d094      	beq.n	80b2e <print+0x3a>
			if( *format == 'x' ) {
   80c04:	2978      	cmp	r1, #120	; 0x78
   80c06:	d09e      	beq.n	80b46 <print+0x52>
			if( *format == 'X' ) {
   80c08:	2958      	cmp	r1, #88	; 0x58
   80c0a:	d0a8      	beq.n	80b5e <print+0x6a>
			if( *format == 'u' ) {
   80c0c:	2975      	cmp	r1, #117	; 0x75
   80c0e:	d0b2      	beq.n	80b76 <print+0x82>
			if( *format == 'c' ) {
   80c10:	2963      	cmp	r1, #99	; 0x63
   80c12:	d1c2      	bne.n	80b9a <print+0xa6>
				scr[0] = (char)va_arg( args, int );
   80c14:	6839      	ldr	r1, [r7, #0]
   80c16:	3704      	adds	r7, #4
   80c18:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
   80c1c:	2100      	movs	r1, #0
   80c1e:	f88d 1015 	strb.w	r1, [sp, #21]
				pc += prints (out, scr, width, pad);
   80c22:	a905      	add	r1, sp, #20
   80c24:	4640      	mov	r0, r8
   80c26:	47d0      	blx	sl
   80c28:	4405      	add	r5, r0
				continue;
   80c2a:	e7b6      	b.n	80b9a <print+0xa6>
	register int pc = 0;
   80c2c:	2500      	movs	r5, #0
		}
	}
	if (out) **out = '\0';
   80c2e:	f1b8 0f00 	cmp.w	r8, #0
   80c32:	d003      	beq.n	80c3c <print+0x148>
   80c34:	f8d8 3000 	ldr.w	r3, [r8]
   80c38:	2200      	movs	r2, #0
   80c3a:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80c3c:	4628      	mov	r0, r5
   80c3e:	b007      	add	sp, #28
   80c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80c44:	00080ce1 	.word	0x00080ce1
   80c48:	000816fc 	.word	0x000816fc
   80c4c:	0008098d 	.word	0x0008098d
   80c50:	00080a39 	.word	0x00080a39

00080c54 <printf>:

int printf(const char *format, ...)
{
   80c54:	b40f      	push	{r0, r1, r2, r3}
   80c56:	b500      	push	{lr}
   80c58:	b083      	sub	sp, #12
   80c5a:	aa04      	add	r2, sp, #16
   80c5c:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80c60:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80c62:	2000      	movs	r0, #0
   80c64:	4b03      	ldr	r3, [pc, #12]	; (80c74 <printf+0x20>)
   80c66:	4798      	blx	r3
}
   80c68:	b003      	add	sp, #12
   80c6a:	f85d eb04 	ldr.w	lr, [sp], #4
   80c6e:	b004      	add	sp, #16
   80c70:	4770      	bx	lr
   80c72:	bf00      	nop
   80c74:	00080af5 	.word	0x00080af5

00080c78 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80c78:	4b16      	ldr	r3, [pc, #88]	; (80cd4 <configure_uart+0x5c>)
   80c7a:	2200      	movs	r2, #0
   80c7c:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80c7e:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80c80:	4b15      	ldr	r3, [pc, #84]	; (80cd8 <configure_uart+0x60>)
   80c82:	f44f 7140 	mov.w	r1, #768	; 0x300
   80c86:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80c88:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80c8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80c8c:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80c8e:	4002      	ands	r2, r0
   80c90:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80c94:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80c96:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80c98:	f44f 7280 	mov.w	r2, #256	; 0x100
   80c9c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80ca0:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80ca2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80ca6:	21ac      	movs	r1, #172	; 0xac
   80ca8:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80caa:	f240 2123 	movw	r1, #547	; 0x223
   80cae:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80cb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80cb4:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80cb6:	f240 2102 	movw	r1, #514	; 0x202
   80cba:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80cbe:	f04f 31ff 	mov.w	r1, #4294967295
   80cc2:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80cc4:	21e1      	movs	r1, #225	; 0xe1
   80cc6:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80cc8:	4904      	ldr	r1, [pc, #16]	; (80cdc <configure_uart+0x64>)
   80cca:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80ccc:	2250      	movs	r2, #80	; 0x50
   80cce:	601a      	str	r2, [r3, #0]
   80cd0:	4770      	bx	lr
   80cd2:	bf00      	nop
   80cd4:	20000484 	.word	0x20000484
   80cd8:	400e0e00 	.word	0x400e0e00
   80cdc:	e000e100 	.word	0xe000e100

00080ce0 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80ce0:	4b07      	ldr	r3, [pc, #28]	; (80d00 <uart_putchar+0x20>)
   80ce2:	695b      	ldr	r3, [r3, #20]
   80ce4:	f013 0f02 	tst.w	r3, #2
   80ce8:	d008      	beq.n	80cfc <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80cea:	4b05      	ldr	r3, [pc, #20]	; (80d00 <uart_putchar+0x20>)
   80cec:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80cee:	461a      	mov	r2, r3
   80cf0:	6953      	ldr	r3, [r2, #20]
   80cf2:	f413 7f00 	tst.w	r3, #512	; 0x200
   80cf6:	d0fb      	beq.n	80cf0 <uart_putchar+0x10>
	return 0;
   80cf8:	2000      	movs	r0, #0
   80cfa:	4770      	bx	lr
	return 1;
   80cfc:	2001      	movs	r0, #1
}
   80cfe:	4770      	bx	lr
   80d00:	400e0800 	.word	0x400e0800

00080d04 <UART_Handler>:

void UART_Handler(void)
{
   80d04:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80d06:	4b15      	ldr	r3, [pc, #84]	; (80d5c <UART_Handler+0x58>)
   80d08:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80d0a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80d0e:	d003      	beq.n	80d18 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80d10:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80d14:	4a11      	ldr	r2, [pc, #68]	; (80d5c <UART_Handler+0x58>)
   80d16:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80d18:	f013 0f01 	tst.w	r3, #1
   80d1c:	d012      	beq.n	80d44 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80d1e:	4810      	ldr	r0, [pc, #64]	; (80d60 <UART_Handler+0x5c>)
   80d20:	7842      	ldrb	r2, [r0, #1]
   80d22:	1c53      	adds	r3, r2, #1
   80d24:	4259      	negs	r1, r3
   80d26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80d2a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80d2e:	bf58      	it	pl
   80d30:	424b      	negpl	r3, r1
   80d32:	7801      	ldrb	r1, [r0, #0]
   80d34:	428b      	cmp	r3, r1
   80d36:	d006      	beq.n	80d46 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80d38:	4908      	ldr	r1, [pc, #32]	; (80d5c <UART_Handler+0x58>)
   80d3a:	6988      	ldr	r0, [r1, #24]
   80d3c:	4908      	ldr	r1, [pc, #32]	; (80d60 <UART_Handler+0x5c>)
   80d3e:	440a      	add	r2, r1
   80d40:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80d42:	704b      	strb	r3, [r1, #1]
   80d44:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80d46:	4807      	ldr	r0, [pc, #28]	; (80d64 <UART_Handler+0x60>)
   80d48:	4b07      	ldr	r3, [pc, #28]	; (80d68 <UART_Handler+0x64>)
   80d4a:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80d4c:	4b03      	ldr	r3, [pc, #12]	; (80d5c <UART_Handler+0x58>)
   80d4e:	699a      	ldr	r2, [r3, #24]
   80d50:	4b03      	ldr	r3, [pc, #12]	; (80d60 <UART_Handler+0x5c>)
   80d52:	7859      	ldrb	r1, [r3, #1]
   80d54:	440b      	add	r3, r1
   80d56:	709a      	strb	r2, [r3, #2]
			return;
   80d58:	bd08      	pop	{r3, pc}
   80d5a:	bf00      	nop
   80d5c:	400e0800 	.word	0x400e0800
   80d60:	20000484 	.word	0x20000484
   80d64:	00081704 	.word	0x00081704
   80d68:	00080c55 	.word	0x00080c55

00080d6c <__aeabi_drsub>:
   80d6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80d70:	e002      	b.n	80d78 <__adddf3>
   80d72:	bf00      	nop

00080d74 <__aeabi_dsub>:
   80d74:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080d78 <__adddf3>:
   80d78:	b530      	push	{r4, r5, lr}
   80d7a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80d7e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80d82:	ea94 0f05 	teq	r4, r5
   80d86:	bf08      	it	eq
   80d88:	ea90 0f02 	teqeq	r0, r2
   80d8c:	bf1f      	itttt	ne
   80d8e:	ea54 0c00 	orrsne.w	ip, r4, r0
   80d92:	ea55 0c02 	orrsne.w	ip, r5, r2
   80d96:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80d9a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80d9e:	f000 80e2 	beq.w	80f66 <__adddf3+0x1ee>
   80da2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80da6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80daa:	bfb8      	it	lt
   80dac:	426d      	neglt	r5, r5
   80dae:	dd0c      	ble.n	80dca <__adddf3+0x52>
   80db0:	442c      	add	r4, r5
   80db2:	ea80 0202 	eor.w	r2, r0, r2
   80db6:	ea81 0303 	eor.w	r3, r1, r3
   80dba:	ea82 0000 	eor.w	r0, r2, r0
   80dbe:	ea83 0101 	eor.w	r1, r3, r1
   80dc2:	ea80 0202 	eor.w	r2, r0, r2
   80dc6:	ea81 0303 	eor.w	r3, r1, r3
   80dca:	2d36      	cmp	r5, #54	; 0x36
   80dcc:	bf88      	it	hi
   80dce:	bd30      	pophi	{r4, r5, pc}
   80dd0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80dd4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80dd8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80ddc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80de0:	d002      	beq.n	80de8 <__adddf3+0x70>
   80de2:	4240      	negs	r0, r0
   80de4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80de8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80dec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80df0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80df4:	d002      	beq.n	80dfc <__adddf3+0x84>
   80df6:	4252      	negs	r2, r2
   80df8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80dfc:	ea94 0f05 	teq	r4, r5
   80e00:	f000 80a7 	beq.w	80f52 <__adddf3+0x1da>
   80e04:	f1a4 0401 	sub.w	r4, r4, #1
   80e08:	f1d5 0e20 	rsbs	lr, r5, #32
   80e0c:	db0d      	blt.n	80e2a <__adddf3+0xb2>
   80e0e:	fa02 fc0e 	lsl.w	ip, r2, lr
   80e12:	fa22 f205 	lsr.w	r2, r2, r5
   80e16:	1880      	adds	r0, r0, r2
   80e18:	f141 0100 	adc.w	r1, r1, #0
   80e1c:	fa03 f20e 	lsl.w	r2, r3, lr
   80e20:	1880      	adds	r0, r0, r2
   80e22:	fa43 f305 	asr.w	r3, r3, r5
   80e26:	4159      	adcs	r1, r3
   80e28:	e00e      	b.n	80e48 <__adddf3+0xd0>
   80e2a:	f1a5 0520 	sub.w	r5, r5, #32
   80e2e:	f10e 0e20 	add.w	lr, lr, #32
   80e32:	2a01      	cmp	r2, #1
   80e34:	fa03 fc0e 	lsl.w	ip, r3, lr
   80e38:	bf28      	it	cs
   80e3a:	f04c 0c02 	orrcs.w	ip, ip, #2
   80e3e:	fa43 f305 	asr.w	r3, r3, r5
   80e42:	18c0      	adds	r0, r0, r3
   80e44:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80e48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80e4c:	d507      	bpl.n	80e5e <__adddf3+0xe6>
   80e4e:	f04f 0e00 	mov.w	lr, #0
   80e52:	f1dc 0c00 	rsbs	ip, ip, #0
   80e56:	eb7e 0000 	sbcs.w	r0, lr, r0
   80e5a:	eb6e 0101 	sbc.w	r1, lr, r1
   80e5e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80e62:	d31b      	bcc.n	80e9c <__adddf3+0x124>
   80e64:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80e68:	d30c      	bcc.n	80e84 <__adddf3+0x10c>
   80e6a:	0849      	lsrs	r1, r1, #1
   80e6c:	ea5f 0030 	movs.w	r0, r0, rrx
   80e70:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80e74:	f104 0401 	add.w	r4, r4, #1
   80e78:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80e7c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80e80:	f080 809a 	bcs.w	80fb8 <__adddf3+0x240>
   80e84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80e88:	bf08      	it	eq
   80e8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80e8e:	f150 0000 	adcs.w	r0, r0, #0
   80e92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80e96:	ea41 0105 	orr.w	r1, r1, r5
   80e9a:	bd30      	pop	{r4, r5, pc}
   80e9c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80ea0:	4140      	adcs	r0, r0
   80ea2:	eb41 0101 	adc.w	r1, r1, r1
   80ea6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80eaa:	f1a4 0401 	sub.w	r4, r4, #1
   80eae:	d1e9      	bne.n	80e84 <__adddf3+0x10c>
   80eb0:	f091 0f00 	teq	r1, #0
   80eb4:	bf04      	itt	eq
   80eb6:	4601      	moveq	r1, r0
   80eb8:	2000      	moveq	r0, #0
   80eba:	fab1 f381 	clz	r3, r1
   80ebe:	bf08      	it	eq
   80ec0:	3320      	addeq	r3, #32
   80ec2:	f1a3 030b 	sub.w	r3, r3, #11
   80ec6:	f1b3 0220 	subs.w	r2, r3, #32
   80eca:	da0c      	bge.n	80ee6 <__adddf3+0x16e>
   80ecc:	320c      	adds	r2, #12
   80ece:	dd08      	ble.n	80ee2 <__adddf3+0x16a>
   80ed0:	f102 0c14 	add.w	ip, r2, #20
   80ed4:	f1c2 020c 	rsb	r2, r2, #12
   80ed8:	fa01 f00c 	lsl.w	r0, r1, ip
   80edc:	fa21 f102 	lsr.w	r1, r1, r2
   80ee0:	e00c      	b.n	80efc <__adddf3+0x184>
   80ee2:	f102 0214 	add.w	r2, r2, #20
   80ee6:	bfd8      	it	le
   80ee8:	f1c2 0c20 	rsble	ip, r2, #32
   80eec:	fa01 f102 	lsl.w	r1, r1, r2
   80ef0:	fa20 fc0c 	lsr.w	ip, r0, ip
   80ef4:	bfdc      	itt	le
   80ef6:	ea41 010c 	orrle.w	r1, r1, ip
   80efa:	4090      	lslle	r0, r2
   80efc:	1ae4      	subs	r4, r4, r3
   80efe:	bfa2      	ittt	ge
   80f00:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   80f04:	4329      	orrge	r1, r5
   80f06:	bd30      	popge	{r4, r5, pc}
   80f08:	ea6f 0404 	mvn.w	r4, r4
   80f0c:	3c1f      	subs	r4, #31
   80f0e:	da1c      	bge.n	80f4a <__adddf3+0x1d2>
   80f10:	340c      	adds	r4, #12
   80f12:	dc0e      	bgt.n	80f32 <__adddf3+0x1ba>
   80f14:	f104 0414 	add.w	r4, r4, #20
   80f18:	f1c4 0220 	rsb	r2, r4, #32
   80f1c:	fa20 f004 	lsr.w	r0, r0, r4
   80f20:	fa01 f302 	lsl.w	r3, r1, r2
   80f24:	ea40 0003 	orr.w	r0, r0, r3
   80f28:	fa21 f304 	lsr.w	r3, r1, r4
   80f2c:	ea45 0103 	orr.w	r1, r5, r3
   80f30:	bd30      	pop	{r4, r5, pc}
   80f32:	f1c4 040c 	rsb	r4, r4, #12
   80f36:	f1c4 0220 	rsb	r2, r4, #32
   80f3a:	fa20 f002 	lsr.w	r0, r0, r2
   80f3e:	fa01 f304 	lsl.w	r3, r1, r4
   80f42:	ea40 0003 	orr.w	r0, r0, r3
   80f46:	4629      	mov	r1, r5
   80f48:	bd30      	pop	{r4, r5, pc}
   80f4a:	fa21 f004 	lsr.w	r0, r1, r4
   80f4e:	4629      	mov	r1, r5
   80f50:	bd30      	pop	{r4, r5, pc}
   80f52:	f094 0f00 	teq	r4, #0
   80f56:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   80f5a:	bf06      	itte	eq
   80f5c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   80f60:	3401      	addeq	r4, #1
   80f62:	3d01      	subne	r5, #1
   80f64:	e74e      	b.n	80e04 <__adddf3+0x8c>
   80f66:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80f6a:	bf18      	it	ne
   80f6c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80f70:	d029      	beq.n	80fc6 <__adddf3+0x24e>
   80f72:	ea94 0f05 	teq	r4, r5
   80f76:	bf08      	it	eq
   80f78:	ea90 0f02 	teqeq	r0, r2
   80f7c:	d005      	beq.n	80f8a <__adddf3+0x212>
   80f7e:	ea54 0c00 	orrs.w	ip, r4, r0
   80f82:	bf04      	itt	eq
   80f84:	4619      	moveq	r1, r3
   80f86:	4610      	moveq	r0, r2
   80f88:	bd30      	pop	{r4, r5, pc}
   80f8a:	ea91 0f03 	teq	r1, r3
   80f8e:	bf1e      	ittt	ne
   80f90:	2100      	movne	r1, #0
   80f92:	2000      	movne	r0, #0
   80f94:	bd30      	popne	{r4, r5, pc}
   80f96:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   80f9a:	d105      	bne.n	80fa8 <__adddf3+0x230>
   80f9c:	0040      	lsls	r0, r0, #1
   80f9e:	4149      	adcs	r1, r1
   80fa0:	bf28      	it	cs
   80fa2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   80fa6:	bd30      	pop	{r4, r5, pc}
   80fa8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   80fac:	bf3c      	itt	cc
   80fae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   80fb2:	bd30      	popcc	{r4, r5, pc}
   80fb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80fb8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   80fbc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   80fc0:	f04f 0000 	mov.w	r0, #0
   80fc4:	bd30      	pop	{r4, r5, pc}
   80fc6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80fca:	bf1a      	itte	ne
   80fcc:	4619      	movne	r1, r3
   80fce:	4610      	movne	r0, r2
   80fd0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   80fd4:	bf1c      	itt	ne
   80fd6:	460b      	movne	r3, r1
   80fd8:	4602      	movne	r2, r0
   80fda:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   80fde:	bf06      	itte	eq
   80fe0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   80fe4:	ea91 0f03 	teqeq	r1, r3
   80fe8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   80fec:	bd30      	pop	{r4, r5, pc}
   80fee:	bf00      	nop

00080ff0 <__aeabi_ui2d>:
   80ff0:	f090 0f00 	teq	r0, #0
   80ff4:	bf04      	itt	eq
   80ff6:	2100      	moveq	r1, #0
   80ff8:	4770      	bxeq	lr
   80ffa:	b530      	push	{r4, r5, lr}
   80ffc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81000:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81004:	f04f 0500 	mov.w	r5, #0
   81008:	f04f 0100 	mov.w	r1, #0
   8100c:	e750      	b.n	80eb0 <__adddf3+0x138>
   8100e:	bf00      	nop

00081010 <__aeabi_i2d>:
   81010:	f090 0f00 	teq	r0, #0
   81014:	bf04      	itt	eq
   81016:	2100      	moveq	r1, #0
   81018:	4770      	bxeq	lr
   8101a:	b530      	push	{r4, r5, lr}
   8101c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81020:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81024:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81028:	bf48      	it	mi
   8102a:	4240      	negmi	r0, r0
   8102c:	f04f 0100 	mov.w	r1, #0
   81030:	e73e      	b.n	80eb0 <__adddf3+0x138>
   81032:	bf00      	nop

00081034 <__aeabi_f2d>:
   81034:	0042      	lsls	r2, r0, #1
   81036:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8103a:	ea4f 0131 	mov.w	r1, r1, rrx
   8103e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81042:	bf1f      	itttt	ne
   81044:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81048:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8104c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81050:	4770      	bxne	lr
   81052:	f092 0f00 	teq	r2, #0
   81056:	bf14      	ite	ne
   81058:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8105c:	4770      	bxeq	lr
   8105e:	b530      	push	{r4, r5, lr}
   81060:	f44f 7460 	mov.w	r4, #896	; 0x380
   81064:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81068:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8106c:	e720      	b.n	80eb0 <__adddf3+0x138>
   8106e:	bf00      	nop

00081070 <__aeabi_ul2d>:
   81070:	ea50 0201 	orrs.w	r2, r0, r1
   81074:	bf08      	it	eq
   81076:	4770      	bxeq	lr
   81078:	b530      	push	{r4, r5, lr}
   8107a:	f04f 0500 	mov.w	r5, #0
   8107e:	e00a      	b.n	81096 <__aeabi_l2d+0x16>

00081080 <__aeabi_l2d>:
   81080:	ea50 0201 	orrs.w	r2, r0, r1
   81084:	bf08      	it	eq
   81086:	4770      	bxeq	lr
   81088:	b530      	push	{r4, r5, lr}
   8108a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8108e:	d502      	bpl.n	81096 <__aeabi_l2d+0x16>
   81090:	4240      	negs	r0, r0
   81092:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81096:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8109a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8109e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   810a2:	f43f aedc 	beq.w	80e5e <__adddf3+0xe6>
   810a6:	f04f 0203 	mov.w	r2, #3
   810aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   810ae:	bf18      	it	ne
   810b0:	3203      	addne	r2, #3
   810b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   810b6:	bf18      	it	ne
   810b8:	3203      	addne	r2, #3
   810ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   810be:	f1c2 0320 	rsb	r3, r2, #32
   810c2:	fa00 fc03 	lsl.w	ip, r0, r3
   810c6:	fa20 f002 	lsr.w	r0, r0, r2
   810ca:	fa01 fe03 	lsl.w	lr, r1, r3
   810ce:	ea40 000e 	orr.w	r0, r0, lr
   810d2:	fa21 f102 	lsr.w	r1, r1, r2
   810d6:	4414      	add	r4, r2
   810d8:	e6c1      	b.n	80e5e <__adddf3+0xe6>
   810da:	bf00      	nop

000810dc <__aeabi_dmul>:
   810dc:	b570      	push	{r4, r5, r6, lr}
   810de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   810e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   810e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   810ea:	bf1d      	ittte	ne
   810ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   810f0:	ea94 0f0c 	teqne	r4, ip
   810f4:	ea95 0f0c 	teqne	r5, ip
   810f8:	f000 f8de 	bleq	812b8 <__aeabi_dmul+0x1dc>
   810fc:	442c      	add	r4, r5
   810fe:	ea81 0603 	eor.w	r6, r1, r3
   81102:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   81106:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8110a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8110e:	bf18      	it	ne
   81110:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81114:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8111c:	d038      	beq.n	81190 <__aeabi_dmul+0xb4>
   8111e:	fba0 ce02 	umull	ip, lr, r0, r2
   81122:	f04f 0500 	mov.w	r5, #0
   81126:	fbe1 e502 	umlal	lr, r5, r1, r2
   8112a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8112e:	fbe0 e503 	umlal	lr, r5, r0, r3
   81132:	f04f 0600 	mov.w	r6, #0
   81136:	fbe1 5603 	umlal	r5, r6, r1, r3
   8113a:	f09c 0f00 	teq	ip, #0
   8113e:	bf18      	it	ne
   81140:	f04e 0e01 	orrne.w	lr, lr, #1
   81144:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81148:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8114c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81150:	d204      	bcs.n	8115c <__aeabi_dmul+0x80>
   81152:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81156:	416d      	adcs	r5, r5
   81158:	eb46 0606 	adc.w	r6, r6, r6
   8115c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81160:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81164:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81168:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8116c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81170:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81174:	bf88      	it	hi
   81176:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8117a:	d81e      	bhi.n	811ba <__aeabi_dmul+0xde>
   8117c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81180:	bf08      	it	eq
   81182:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81186:	f150 0000 	adcs.w	r0, r0, #0
   8118a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8118e:	bd70      	pop	{r4, r5, r6, pc}
   81190:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81194:	ea46 0101 	orr.w	r1, r6, r1
   81198:	ea40 0002 	orr.w	r0, r0, r2
   8119c:	ea81 0103 	eor.w	r1, r1, r3
   811a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   811a4:	bfc2      	ittt	gt
   811a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   811aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   811ae:	bd70      	popgt	{r4, r5, r6, pc}
   811b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   811b4:	f04f 0e00 	mov.w	lr, #0
   811b8:	3c01      	subs	r4, #1
   811ba:	f300 80ab 	bgt.w	81314 <__aeabi_dmul+0x238>
   811be:	f114 0f36 	cmn.w	r4, #54	; 0x36
   811c2:	bfde      	ittt	le
   811c4:	2000      	movle	r0, #0
   811c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   811ca:	bd70      	pople	{r4, r5, r6, pc}
   811cc:	f1c4 0400 	rsb	r4, r4, #0
   811d0:	3c20      	subs	r4, #32
   811d2:	da35      	bge.n	81240 <__aeabi_dmul+0x164>
   811d4:	340c      	adds	r4, #12
   811d6:	dc1b      	bgt.n	81210 <__aeabi_dmul+0x134>
   811d8:	f104 0414 	add.w	r4, r4, #20
   811dc:	f1c4 0520 	rsb	r5, r4, #32
   811e0:	fa00 f305 	lsl.w	r3, r0, r5
   811e4:	fa20 f004 	lsr.w	r0, r0, r4
   811e8:	fa01 f205 	lsl.w	r2, r1, r5
   811ec:	ea40 0002 	orr.w	r0, r0, r2
   811f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   811f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   811f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   811fc:	fa21 f604 	lsr.w	r6, r1, r4
   81200:	eb42 0106 	adc.w	r1, r2, r6
   81204:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81208:	bf08      	it	eq
   8120a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8120e:	bd70      	pop	{r4, r5, r6, pc}
   81210:	f1c4 040c 	rsb	r4, r4, #12
   81214:	f1c4 0520 	rsb	r5, r4, #32
   81218:	fa00 f304 	lsl.w	r3, r0, r4
   8121c:	fa20 f005 	lsr.w	r0, r0, r5
   81220:	fa01 f204 	lsl.w	r2, r1, r4
   81224:	ea40 0002 	orr.w	r0, r0, r2
   81228:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8122c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81230:	f141 0100 	adc.w	r1, r1, #0
   81234:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81238:	bf08      	it	eq
   8123a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8123e:	bd70      	pop	{r4, r5, r6, pc}
   81240:	f1c4 0520 	rsb	r5, r4, #32
   81244:	fa00 f205 	lsl.w	r2, r0, r5
   81248:	ea4e 0e02 	orr.w	lr, lr, r2
   8124c:	fa20 f304 	lsr.w	r3, r0, r4
   81250:	fa01 f205 	lsl.w	r2, r1, r5
   81254:	ea43 0302 	orr.w	r3, r3, r2
   81258:	fa21 f004 	lsr.w	r0, r1, r4
   8125c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81260:	fa21 f204 	lsr.w	r2, r1, r4
   81264:	ea20 0002 	bic.w	r0, r0, r2
   81268:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8126c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81270:	bf08      	it	eq
   81272:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81276:	bd70      	pop	{r4, r5, r6, pc}
   81278:	f094 0f00 	teq	r4, #0
   8127c:	d10f      	bne.n	8129e <__aeabi_dmul+0x1c2>
   8127e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   81282:	0040      	lsls	r0, r0, #1
   81284:	eb41 0101 	adc.w	r1, r1, r1
   81288:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8128c:	bf08      	it	eq
   8128e:	3c01      	subeq	r4, #1
   81290:	d0f7      	beq.n	81282 <__aeabi_dmul+0x1a6>
   81292:	ea41 0106 	orr.w	r1, r1, r6
   81296:	f095 0f00 	teq	r5, #0
   8129a:	bf18      	it	ne
   8129c:	4770      	bxne	lr
   8129e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   812a2:	0052      	lsls	r2, r2, #1
   812a4:	eb43 0303 	adc.w	r3, r3, r3
   812a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   812ac:	bf08      	it	eq
   812ae:	3d01      	subeq	r5, #1
   812b0:	d0f7      	beq.n	812a2 <__aeabi_dmul+0x1c6>
   812b2:	ea43 0306 	orr.w	r3, r3, r6
   812b6:	4770      	bx	lr
   812b8:	ea94 0f0c 	teq	r4, ip
   812bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   812c0:	bf18      	it	ne
   812c2:	ea95 0f0c 	teqne	r5, ip
   812c6:	d00c      	beq.n	812e2 <__aeabi_dmul+0x206>
   812c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   812cc:	bf18      	it	ne
   812ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   812d2:	d1d1      	bne.n	81278 <__aeabi_dmul+0x19c>
   812d4:	ea81 0103 	eor.w	r1, r1, r3
   812d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   812dc:	f04f 0000 	mov.w	r0, #0
   812e0:	bd70      	pop	{r4, r5, r6, pc}
   812e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   812e6:	bf06      	itte	eq
   812e8:	4610      	moveq	r0, r2
   812ea:	4619      	moveq	r1, r3
   812ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   812f0:	d019      	beq.n	81326 <__aeabi_dmul+0x24a>
   812f2:	ea94 0f0c 	teq	r4, ip
   812f6:	d102      	bne.n	812fe <__aeabi_dmul+0x222>
   812f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   812fc:	d113      	bne.n	81326 <__aeabi_dmul+0x24a>
   812fe:	ea95 0f0c 	teq	r5, ip
   81302:	d105      	bne.n	81310 <__aeabi_dmul+0x234>
   81304:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81308:	bf1c      	itt	ne
   8130a:	4610      	movne	r0, r2
   8130c:	4619      	movne	r1, r3
   8130e:	d10a      	bne.n	81326 <__aeabi_dmul+0x24a>
   81310:	ea81 0103 	eor.w	r1, r1, r3
   81314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81318:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8131c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81320:	f04f 0000 	mov.w	r0, #0
   81324:	bd70      	pop	{r4, r5, r6, pc}
   81326:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8132a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8132e:	bd70      	pop	{r4, r5, r6, pc}

00081330 <__aeabi_ddiv>:
   81330:	b570      	push	{r4, r5, r6, lr}
   81332:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81336:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8133a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8133e:	bf1d      	ittte	ne
   81340:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81344:	ea94 0f0c 	teqne	r4, ip
   81348:	ea95 0f0c 	teqne	r5, ip
   8134c:	f000 f8a7 	bleq	8149e <__aeabi_ddiv+0x16e>
   81350:	eba4 0405 	sub.w	r4, r4, r5
   81354:	ea81 0e03 	eor.w	lr, r1, r3
   81358:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8135c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81360:	f000 8088 	beq.w	81474 <__aeabi_ddiv+0x144>
   81364:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81368:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8136c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81370:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81374:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81378:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8137c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81380:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81384:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81388:	429d      	cmp	r5, r3
   8138a:	bf08      	it	eq
   8138c:	4296      	cmpeq	r6, r2
   8138e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   81392:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81396:	d202      	bcs.n	8139e <__aeabi_ddiv+0x6e>
   81398:	085b      	lsrs	r3, r3, #1
   8139a:	ea4f 0232 	mov.w	r2, r2, rrx
   8139e:	1ab6      	subs	r6, r6, r2
   813a0:	eb65 0503 	sbc.w	r5, r5, r3
   813a4:	085b      	lsrs	r3, r3, #1
   813a6:	ea4f 0232 	mov.w	r2, r2, rrx
   813aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   813ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   813b2:	ebb6 0e02 	subs.w	lr, r6, r2
   813b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   813ba:	bf22      	ittt	cs
   813bc:	1ab6      	subcs	r6, r6, r2
   813be:	4675      	movcs	r5, lr
   813c0:	ea40 000c 	orrcs.w	r0, r0, ip
   813c4:	085b      	lsrs	r3, r3, #1
   813c6:	ea4f 0232 	mov.w	r2, r2, rrx
   813ca:	ebb6 0e02 	subs.w	lr, r6, r2
   813ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   813d2:	bf22      	ittt	cs
   813d4:	1ab6      	subcs	r6, r6, r2
   813d6:	4675      	movcs	r5, lr
   813d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   813dc:	085b      	lsrs	r3, r3, #1
   813de:	ea4f 0232 	mov.w	r2, r2, rrx
   813e2:	ebb6 0e02 	subs.w	lr, r6, r2
   813e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   813ea:	bf22      	ittt	cs
   813ec:	1ab6      	subcs	r6, r6, r2
   813ee:	4675      	movcs	r5, lr
   813f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   813f4:	085b      	lsrs	r3, r3, #1
   813f6:	ea4f 0232 	mov.w	r2, r2, rrx
   813fa:	ebb6 0e02 	subs.w	lr, r6, r2
   813fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   81402:	bf22      	ittt	cs
   81404:	1ab6      	subcs	r6, r6, r2
   81406:	4675      	movcs	r5, lr
   81408:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8140c:	ea55 0e06 	orrs.w	lr, r5, r6
   81410:	d018      	beq.n	81444 <__aeabi_ddiv+0x114>
   81412:	ea4f 1505 	mov.w	r5, r5, lsl #4
   81416:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8141a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8141e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   81422:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   81426:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8142a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8142e:	d1c0      	bne.n	813b2 <__aeabi_ddiv+0x82>
   81430:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81434:	d10b      	bne.n	8144e <__aeabi_ddiv+0x11e>
   81436:	ea41 0100 	orr.w	r1, r1, r0
   8143a:	f04f 0000 	mov.w	r0, #0
   8143e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   81442:	e7b6      	b.n	813b2 <__aeabi_ddiv+0x82>
   81444:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81448:	bf04      	itt	eq
   8144a:	4301      	orreq	r1, r0
   8144c:	2000      	moveq	r0, #0
   8144e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81452:	bf88      	it	hi
   81454:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81458:	f63f aeaf 	bhi.w	811ba <__aeabi_dmul+0xde>
   8145c:	ebb5 0c03 	subs.w	ip, r5, r3
   81460:	bf04      	itt	eq
   81462:	ebb6 0c02 	subseq.w	ip, r6, r2
   81466:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8146a:	f150 0000 	adcs.w	r0, r0, #0
   8146e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81472:	bd70      	pop	{r4, r5, r6, pc}
   81474:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81478:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8147c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81480:	bfc2      	ittt	gt
   81482:	ebd4 050c 	rsbsgt	r5, r4, ip
   81486:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8148a:	bd70      	popgt	{r4, r5, r6, pc}
   8148c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81490:	f04f 0e00 	mov.w	lr, #0
   81494:	3c01      	subs	r4, #1
   81496:	e690      	b.n	811ba <__aeabi_dmul+0xde>
   81498:	ea45 0e06 	orr.w	lr, r5, r6
   8149c:	e68d      	b.n	811ba <__aeabi_dmul+0xde>
   8149e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   814a2:	ea94 0f0c 	teq	r4, ip
   814a6:	bf08      	it	eq
   814a8:	ea95 0f0c 	teqeq	r5, ip
   814ac:	f43f af3b 	beq.w	81326 <__aeabi_dmul+0x24a>
   814b0:	ea94 0f0c 	teq	r4, ip
   814b4:	d10a      	bne.n	814cc <__aeabi_ddiv+0x19c>
   814b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   814ba:	f47f af34 	bne.w	81326 <__aeabi_dmul+0x24a>
   814be:	ea95 0f0c 	teq	r5, ip
   814c2:	f47f af25 	bne.w	81310 <__aeabi_dmul+0x234>
   814c6:	4610      	mov	r0, r2
   814c8:	4619      	mov	r1, r3
   814ca:	e72c      	b.n	81326 <__aeabi_dmul+0x24a>
   814cc:	ea95 0f0c 	teq	r5, ip
   814d0:	d106      	bne.n	814e0 <__aeabi_ddiv+0x1b0>
   814d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   814d6:	f43f aefd 	beq.w	812d4 <__aeabi_dmul+0x1f8>
   814da:	4610      	mov	r0, r2
   814dc:	4619      	mov	r1, r3
   814de:	e722      	b.n	81326 <__aeabi_dmul+0x24a>
   814e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   814e4:	bf18      	it	ne
   814e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   814ea:	f47f aec5 	bne.w	81278 <__aeabi_dmul+0x19c>
   814ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   814f2:	f47f af0d 	bne.w	81310 <__aeabi_dmul+0x234>
   814f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   814fa:	f47f aeeb 	bne.w	812d4 <__aeabi_dmul+0x1f8>
   814fe:	e712      	b.n	81326 <__aeabi_dmul+0x24a>

00081500 <__aeabi_d2uiz>:
   81500:	004a      	lsls	r2, r1, #1
   81502:	d211      	bcs.n	81528 <__aeabi_d2uiz+0x28>
   81504:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81508:	d211      	bcs.n	8152e <__aeabi_d2uiz+0x2e>
   8150a:	d50d      	bpl.n	81528 <__aeabi_d2uiz+0x28>
   8150c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81510:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81514:	d40e      	bmi.n	81534 <__aeabi_d2uiz+0x34>
   81516:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8151a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8151e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81522:	fa23 f002 	lsr.w	r0, r3, r2
   81526:	4770      	bx	lr
   81528:	f04f 0000 	mov.w	r0, #0
   8152c:	4770      	bx	lr
   8152e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   81532:	d102      	bne.n	8153a <__aeabi_d2uiz+0x3a>
   81534:	f04f 30ff 	mov.w	r0, #4294967295
   81538:	4770      	bx	lr
   8153a:	f04f 0000 	mov.w	r0, #0
   8153e:	4770      	bx	lr

00081540 <__libc_init_array>:
   81540:	b570      	push	{r4, r5, r6, lr}
   81542:	4e0f      	ldr	r6, [pc, #60]	; (81580 <__libc_init_array+0x40>)
   81544:	4d0f      	ldr	r5, [pc, #60]	; (81584 <__libc_init_array+0x44>)
   81546:	1b76      	subs	r6, r6, r5
   81548:	10b6      	asrs	r6, r6, #2
   8154a:	bf18      	it	ne
   8154c:	2400      	movne	r4, #0
   8154e:	d005      	beq.n	8155c <__libc_init_array+0x1c>
   81550:	3401      	adds	r4, #1
   81552:	f855 3b04 	ldr.w	r3, [r5], #4
   81556:	4798      	blx	r3
   81558:	42a6      	cmp	r6, r4
   8155a:	d1f9      	bne.n	81550 <__libc_init_array+0x10>
   8155c:	4e0a      	ldr	r6, [pc, #40]	; (81588 <__libc_init_array+0x48>)
   8155e:	4d0b      	ldr	r5, [pc, #44]	; (8158c <__libc_init_array+0x4c>)
   81560:	f000 f8e2 	bl	81728 <_init>
   81564:	1b76      	subs	r6, r6, r5
   81566:	10b6      	asrs	r6, r6, #2
   81568:	bf18      	it	ne
   8156a:	2400      	movne	r4, #0
   8156c:	d006      	beq.n	8157c <__libc_init_array+0x3c>
   8156e:	3401      	adds	r4, #1
   81570:	f855 3b04 	ldr.w	r3, [r5], #4
   81574:	4798      	blx	r3
   81576:	42a6      	cmp	r6, r4
   81578:	d1f9      	bne.n	8156e <__libc_init_array+0x2e>
   8157a:	bd70      	pop	{r4, r5, r6, pc}
   8157c:	bd70      	pop	{r4, r5, r6, pc}
   8157e:	bf00      	nop
   81580:	00081734 	.word	0x00081734
   81584:	00081734 	.word	0x00081734
   81588:	0008173c 	.word	0x0008173c
   8158c:	00081734 	.word	0x00081734

00081590 <register_fini>:
   81590:	4b02      	ldr	r3, [pc, #8]	; (8159c <register_fini+0xc>)
   81592:	b113      	cbz	r3, 8159a <register_fini+0xa>
   81594:	4802      	ldr	r0, [pc, #8]	; (815a0 <register_fini+0x10>)
   81596:	f000 b805 	b.w	815a4 <atexit>
   8159a:	4770      	bx	lr
   8159c:	00000000 	.word	0x00000000
   815a0:	000815b1 	.word	0x000815b1

000815a4 <atexit>:
   815a4:	2300      	movs	r3, #0
   815a6:	4601      	mov	r1, r0
   815a8:	461a      	mov	r2, r3
   815aa:	4618      	mov	r0, r3
   815ac:	f000 b81e 	b.w	815ec <__register_exitproc>

000815b0 <__libc_fini_array>:
   815b0:	b538      	push	{r3, r4, r5, lr}
   815b2:	4c0a      	ldr	r4, [pc, #40]	; (815dc <__libc_fini_array+0x2c>)
   815b4:	4d0a      	ldr	r5, [pc, #40]	; (815e0 <__libc_fini_array+0x30>)
   815b6:	1b64      	subs	r4, r4, r5
   815b8:	10a4      	asrs	r4, r4, #2
   815ba:	d00a      	beq.n	815d2 <__libc_fini_array+0x22>
   815bc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   815c0:	3b01      	subs	r3, #1
   815c2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   815c6:	3c01      	subs	r4, #1
   815c8:	f855 3904 	ldr.w	r3, [r5], #-4
   815cc:	4798      	blx	r3
   815ce:	2c00      	cmp	r4, #0
   815d0:	d1f9      	bne.n	815c6 <__libc_fini_array+0x16>
   815d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   815d6:	f000 b8b1 	b.w	8173c <_fini>
   815da:	bf00      	nop
   815dc:	0008174c 	.word	0x0008174c
   815e0:	00081748 	.word	0x00081748

000815e4 <__retarget_lock_acquire_recursive>:
   815e4:	4770      	bx	lr
   815e6:	bf00      	nop

000815e8 <__retarget_lock_release_recursive>:
   815e8:	4770      	bx	lr
   815ea:	bf00      	nop

000815ec <__register_exitproc>:
   815ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   815f0:	4d2c      	ldr	r5, [pc, #176]	; (816a4 <__register_exitproc+0xb8>)
   815f2:	4606      	mov	r6, r0
   815f4:	6828      	ldr	r0, [r5, #0]
   815f6:	4698      	mov	r8, r3
   815f8:	460f      	mov	r7, r1
   815fa:	4691      	mov	r9, r2
   815fc:	f7ff fff2 	bl	815e4 <__retarget_lock_acquire_recursive>
   81600:	4b29      	ldr	r3, [pc, #164]	; (816a8 <__register_exitproc+0xbc>)
   81602:	681c      	ldr	r4, [r3, #0]
   81604:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81608:	2b00      	cmp	r3, #0
   8160a:	d03e      	beq.n	8168a <__register_exitproc+0x9e>
   8160c:	685a      	ldr	r2, [r3, #4]
   8160e:	2a1f      	cmp	r2, #31
   81610:	dc1c      	bgt.n	8164c <__register_exitproc+0x60>
   81612:	f102 0e01 	add.w	lr, r2, #1
   81616:	b176      	cbz	r6, 81636 <__register_exitproc+0x4a>
   81618:	2101      	movs	r1, #1
   8161a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8161e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81622:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81626:	4091      	lsls	r1, r2
   81628:	4308      	orrs	r0, r1
   8162a:	2e02      	cmp	r6, #2
   8162c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81630:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81634:	d023      	beq.n	8167e <__register_exitproc+0x92>
   81636:	3202      	adds	r2, #2
   81638:	f8c3 e004 	str.w	lr, [r3, #4]
   8163c:	6828      	ldr	r0, [r5, #0]
   8163e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81642:	f7ff ffd1 	bl	815e8 <__retarget_lock_release_recursive>
   81646:	2000      	movs	r0, #0
   81648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8164c:	4b17      	ldr	r3, [pc, #92]	; (816ac <__register_exitproc+0xc0>)
   8164e:	b30b      	cbz	r3, 81694 <__register_exitproc+0xa8>
   81650:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81654:	f3af 8000 	nop.w
   81658:	4603      	mov	r3, r0
   8165a:	b1d8      	cbz	r0, 81694 <__register_exitproc+0xa8>
   8165c:	2000      	movs	r0, #0
   8165e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81662:	f04f 0e01 	mov.w	lr, #1
   81666:	6058      	str	r0, [r3, #4]
   81668:	6019      	str	r1, [r3, #0]
   8166a:	4602      	mov	r2, r0
   8166c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81670:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81674:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81678:	2e00      	cmp	r6, #0
   8167a:	d0dc      	beq.n	81636 <__register_exitproc+0x4a>
   8167c:	e7cc      	b.n	81618 <__register_exitproc+0x2c>
   8167e:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81682:	4301      	orrs	r1, r0
   81684:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81688:	e7d5      	b.n	81636 <__register_exitproc+0x4a>
   8168a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8168e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81692:	e7bb      	b.n	8160c <__register_exitproc+0x20>
   81694:	6828      	ldr	r0, [r5, #0]
   81696:	f7ff ffa7 	bl	815e8 <__retarget_lock_release_recursive>
   8169a:	f04f 30ff 	mov.w	r0, #4294967295
   8169e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   816a2:	bf00      	nop
   816a4:	20000438 	.word	0x20000438
   816a8:	00081724 	.word	0x00081724
   816ac:	00000000 	.word	0x00000000
   816b0:	304e4143 	.word	0x304e4143
   816b4:	73656d20 	.word	0x73656d20
   816b8:	65676173 	.word	0x65676173
   816bc:	72726120 	.word	0x72726120
   816c0:	64657669 	.word	0x64657669
   816c4:	206e6920 	.word	0x206e6920
   816c8:	2d6e6f6e 	.word	0x2d6e6f6e
   816cc:	64657375 	.word	0x64657375
   816d0:	69616d20 	.word	0x69616d20
   816d4:	786f626c 	.word	0x786f626c
   816d8:	00000d0a 	.word	0x00000d0a
   816dc:	6f727265 	.word	0x6f727265
   816e0:	25203a72 	.word	0x25203a72
   816e4:	0a0d2064 	.word	0x0a0d2064
   816e8:	00000000 	.word	0x00000000
   816ec:	75706e69 	.word	0x75706e69
   816f0:	25203a74 	.word	0x25203a74
   816f4:	0a0d2064 	.word	0x0a0d2064
   816f8:	00000a0d 	.word	0x00000a0d
   816fc:	6c756e28 	.word	0x6c756e28
   81700:	0000296c 	.word	0x0000296c
   81704:	3a525245 	.word	0x3a525245
   81708:	52415520 	.word	0x52415520
   8170c:	58522054 	.word	0x58522054
   81710:	66756220 	.word	0x66756220
   81714:	20726566 	.word	0x20726566
   81718:	66207369 	.word	0x66207369
   8171c:	0a6c6c75 	.word	0x0a6c6c75
   81720:	0000000d 	.word	0x0000000d

00081724 <_global_impure_ptr>:
   81724:	20000010                                ... 

00081728 <_init>:
   81728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8172a:	bf00      	nop
   8172c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8172e:	bc08      	pop	{r3}
   81730:	469e      	mov	lr, r3
   81732:	4770      	bx	lr

00081734 <__init_array_start>:
   81734:	00081591 	.word	0x00081591

00081738 <__frame_dummy_init_array_entry>:
   81738:	00080119                                ....

0008173c <_fini>:
   8173c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8173e:	bf00      	nop
   81740:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81742:	bc08      	pop	{r3}
   81744:	469e      	mov	lr, r3
   81746:	4770      	bx	lr

00081748 <__fini_array_start>:
   81748:	000800f5 	.word	0x000800f5
