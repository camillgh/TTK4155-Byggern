
GccApplication2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001868  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  00081868  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a4  2000043c  00081ca4  0002043c  2**2
                  ALLOC
  3 .stack        00000400  200004e0  00081d48  0002043c  2**0
                  ALLOC
  4 .heap         00000200  200008e0  00082148  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020465  2**0
                  CONTENTS, READONLY
  7 .debug_info   00007cc5  00000000  00000000  000204be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015bc  00000000  00000000  00028183  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000145e  00000000  00000000  0002973f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000002a0  00000000  00000000  0002ab9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000258  00000000  00000000  0002ae3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000131f5  00000000  00000000  0002b095  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006368  00000000  00000000  0003e28a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00054809  00000000  00000000  000445f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000007cc  00000000  00000000  00098dfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	e0 08 00 20 0d 04 08 00 09 04 08 00 09 04 08 00     ... ............
   80010:	09 04 08 00 09 04 08 00 09 04 08 00 00 00 00 00     ................
	...
   8002c:	09 04 08 00 09 04 08 00 00 00 00 00 09 04 08 00     ................
   8003c:	51 0a 08 00 09 04 08 00 09 04 08 00 09 04 08 00     Q...............
   8004c:	09 04 08 00 09 04 08 00 09 04 08 00 09 04 08 00     ................
   8005c:	09 04 08 00 ed 0d 08 00 09 04 08 00 00 00 00 00     ................
   8006c:	09 04 08 00 09 04 08 00 09 04 08 00 09 04 08 00     ................
	...
   80084:	09 04 08 00 09 04 08 00 09 04 08 00 09 04 08 00     ................
   80094:	09 04 08 00 09 04 08 00 09 04 08 00 09 04 08 00     ................
   800a4:	00 00 00 00 09 04 08 00 09 04 08 00 09 04 08 00     ................
   800b4:	09 04 08 00 09 04 08 00 09 04 08 00 09 04 08 00     ................
   800c4:	09 04 08 00 09 04 08 00 09 04 08 00 09 04 08 00     ................
   800d4:	09 04 08 00 09 04 08 00 09 04 08 00 09 04 08 00     ................
   800e4:	09 04 08 00 09 04 08 00 4d 03 08 00 09 04 08 00     ........M.......

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2000043c 	.word	0x2000043c
   80110:	00000000 	.word	0x00000000
   80114:	00081868 	.word	0x00081868

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081868 	.word	0x00081868
   80154:	20000440 	.word	0x20000440
   80158:	00081868 	.word	0x00081868
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:
 * \retval void
 */
void adc_init(){

	// Peripheral clock enable. Peripheral ID 37 corresponds to the ADC instance.
	PMC->PMC_PCER1 = PMC_PCER1_PID37;
   80160:	2220      	movs	r2, #32
   80162:	4b08      	ldr	r3, [pc, #32]	; (80184 <adc_init+0x24>)
   80164:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
	// Enables the PIO to control SAM3X pin PA2 and Due pin 61 (disables peripheral control of the pin).
	PIOA->PIO_PER |= PIO_PA2;
   80168:	4a07      	ldr	r2, [pc, #28]	; (80188 <adc_init+0x28>)
   8016a:	6813      	ldr	r3, [r2, #0]
   8016c:	f043 0304 	orr.w	r3, r3, #4
   80170:	6013      	str	r3, [r2, #0]
	
	// Enable channel 0
	ADC->ADC_CHER = ADC_CHER_CH0;
   80172:	4b06      	ldr	r3, [pc, #24]	; (8018c <adc_init+0x2c>)
   80174:	2201      	movs	r2, #1
   80176:	611a      	str	r2, [r3, #16]
	
	// Enable freerun mode
	ADC->ADC_MR |= ADC_MR_FREERUN;
   80178:	685a      	ldr	r2, [r3, #4]
   8017a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8017e:	605a      	str	r2, [r3, #4]
   80180:	4770      	bx	lr
   80182:	bf00      	nop
   80184:	400e0600 	.word	0x400e0600
   80188:	400e0e00 	.word	0x400e0e00
   8018c:	400c0000 	.word	0x400c0000

00080190 <adc_count_score>:
 */

uint32_t adc_read(void){
	
	// Start conversion
	ADC->ADC_CR = ADC_CR_START;
   80190:	4b10      	ldr	r3, [pc, #64]	; (801d4 <adc_count_score+0x44>)
   80192:	2202      	movs	r2, #2
   80194:	601a      	str	r2, [r3, #0]
	
	uint32_t data;
	
	// Read from channel 0
	data = ADC->ADC_CDR[0];
   80196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
	
	uint16_t data;
	data = adc_read();
	
	// When blocked IR is blocked, the value from adc is below 10000
	while (data < 1000){
   80198:	b29b      	uxth	r3, r3
   8019a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8019e:	d215      	bcs.n	801cc <adc_count_score+0x3c>
	ADC->ADC_CR = ADC_CR_START;
   801a0:	4b0c      	ldr	r3, [pc, #48]	; (801d4 <adc_count_score+0x44>)
   801a2:	601a      	str	r2, [r3, #0]
	data = ADC->ADC_CDR[0];
   801a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
		data = adc_read();
   801a6:	b29b      	uxth	r3, r3
		if (data > 1000){
   801a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   801ac:	d810      	bhi.n	801d0 <adc_count_score+0x40>
	ADC->ADC_CR = ADC_CR_START;
   801ae:	4a09      	ldr	r2, [pc, #36]	; (801d4 <adc_count_score+0x44>)
   801b0:	2102      	movs	r1, #2
	while (data < 1000){
   801b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   801b6:	d207      	bcs.n	801c8 <adc_count_score+0x38>
	ADC->ADC_CR = ADC_CR_START;
   801b8:	6011      	str	r1, [r2, #0]
	data = ADC->ADC_CDR[0];
   801ba:	6d13      	ldr	r3, [r2, #80]	; 0x50
		data = adc_read();
   801bc:	b29b      	uxth	r3, r3
		if (data > 1000){
   801be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   801c2:	d9f6      	bls.n	801b2 <adc_count_score+0x22>
			return 1;
   801c4:	2001      	movs	r0, #1
			break;
		}
	}
	return 0;
	
}
   801c6:	4770      	bx	lr
	return 0;
   801c8:	2000      	movs	r0, #0
   801ca:	4770      	bx	lr
   801cc:	2000      	movs	r0, #0
   801ce:	4770      	bx	lr
			return 1;
   801d0:	2001      	movs	r0, #1
   801d2:	4770      	bx	lr
   801d4:	400c0000 	.word	0x400c0000

000801d8 <can_init>:
   801d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   801dc:	1855      	adds	r5, r2, r1
   801de:	2908      	cmp	r1, #8
   801e0:	bf98      	it	ls
   801e2:	2a08      	cmpls	r2, #8
   801e4:	d864      	bhi.n	802b0 <can_init+0xd8>
   801e6:	460e      	mov	r6, r1
   801e8:	2d08      	cmp	r5, #8
   801ea:	dc61      	bgt.n	802b0 <can_init+0xd8>
   801ec:	4a32      	ldr	r2, [pc, #200]	; (802b8 <can_init+0xe0>)
   801ee:	6813      	ldr	r3, [r2, #0]
   801f0:	f023 0301 	bic.w	r3, r3, #1
   801f4:	6013      	str	r3, [r2, #0]
   801f6:	6913      	ldr	r3, [r2, #16]
   801f8:	4b30      	ldr	r3, [pc, #192]	; (802bc <can_init+0xe4>)
   801fa:	f44f 7440 	mov.w	r4, #768	; 0x300
   801fe:	645c      	str	r4, [r3, #68]	; 0x44
   80200:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   80202:	f024 0403 	bic.w	r4, r4, #3
   80206:	671c      	str	r4, [r3, #112]	; 0x70
   80208:	2403      	movs	r4, #3
   8020a:	605c      	str	r4, [r3, #4]
   8020c:	665c      	str	r4, [r3, #100]	; 0x64
   8020e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80212:	4c2b      	ldr	r4, [pc, #172]	; (802c0 <can_init+0xe8>)
   80214:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
   80218:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   8021c:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   80220:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   80224:	6150      	str	r0, [r2, #20]
   80226:	42a9      	cmp	r1, r5
   80228:	dc40      	bgt.n	802ac <can_init+0xd4>
   8022a:	460a      	mov	r2, r1
   8022c:	2400      	movs	r4, #0
   8022e:	46a1      	mov	r9, r4
   80230:	f8df 8084 	ldr.w	r8, [pc, #132]	; 802b8 <can_init+0xe0>
   80234:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
   80238:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
   8023c:	2701      	movs	r7, #1
   8023e:	0153      	lsls	r3, r2, #5
   80240:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   80244:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
   80248:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
   8024c:	4443      	add	r3, r8
   8024e:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
   80252:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
   80256:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   8025a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8025e:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
   80262:	fa07 f302 	lsl.w	r3, r7, r2
   80266:	431c      	orrs	r4, r3
   80268:	3201      	adds	r2, #1
   8026a:	4295      	cmp	r5, r2
   8026c:	dae7      	bge.n	8023e <can_init+0x66>
   8026e:	b181      	cbz	r1, 80292 <can_init+0xba>
   80270:	2300      	movs	r3, #0
   80272:	4911      	ldr	r1, [pc, #68]	; (802b8 <can_init+0xe0>)
   80274:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   80278:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   8027c:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80280:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
   80284:	f103 0210 	add.w	r2, r3, #16
   80288:	0152      	lsls	r2, r2, #5
   8028a:	5088      	str	r0, [r1, r2]
   8028c:	3301      	adds	r3, #1
   8028e:	429e      	cmp	r6, r3
   80290:	d1f4      	bne.n	8027c <can_init+0xa4>
   80292:	4b09      	ldr	r3, [pc, #36]	; (802b8 <can_init+0xe0>)
   80294:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80296:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8029a:	4a0a      	ldr	r2, [pc, #40]	; (802c4 <can_init+0xec>)
   8029c:	6051      	str	r1, [r2, #4]
   8029e:	681a      	ldr	r2, [r3, #0]
   802a0:	f042 0201 	orr.w	r2, r2, #1
   802a4:	601a      	str	r2, [r3, #0]
   802a6:	2000      	movs	r0, #0
   802a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   802ac:	2400      	movs	r4, #0
   802ae:	e7de      	b.n	8026e <can_init+0x96>
   802b0:	2001      	movs	r0, #1
   802b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   802b6:	bf00      	nop
   802b8:	400b4000 	.word	0x400b4000
   802bc:	400e0e00 	.word	0x400e0e00
   802c0:	1000102b 	.word	0x1000102b
   802c4:	e000e100 	.word	0xe000e100

000802c8 <can_receive>:
   802c8:	014b      	lsls	r3, r1, #5
   802ca:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802ce:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   802d6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   802da:	d033      	beq.n	80344 <can_receive+0x7c>
   802dc:	b430      	push	{r4, r5}
   802de:	014b      	lsls	r3, r1, #5
   802e0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802e4:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   802ec:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
   802f0:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   802f4:	f3c5 458a 	ubfx	r5, r5, #18, #11
   802f8:	8005      	strh	r5, [r0, #0]
   802fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   802fe:	f3c3 4303 	ubfx	r3, r3, #16, #4
   80302:	7083      	strb	r3, [r0, #2]
   80304:	461d      	mov	r5, r3
   80306:	b15b      	cbz	r3, 80320 <can_receive+0x58>
   80308:	3003      	adds	r0, #3
   8030a:	2300      	movs	r3, #0
   8030c:	2b03      	cmp	r3, #3
   8030e:	bfd9      	ittee	le
   80310:	7002      	strble	r2, [r0, #0]
   80312:	0a12      	lsrle	r2, r2, #8
   80314:	7004      	strbgt	r4, [r0, #0]
   80316:	0a24      	lsrgt	r4, r4, #8
   80318:	3301      	adds	r3, #1
   8031a:	3001      	adds	r0, #1
   8031c:	42ab      	cmp	r3, r5
   8031e:	d1f5      	bne.n	8030c <can_receive+0x44>
   80320:	4b09      	ldr	r3, [pc, #36]	; (80348 <can_receive+0x80>)
   80322:	f101 0210 	add.w	r2, r1, #16
   80326:	0152      	lsls	r2, r2, #5
   80328:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   8032c:	5098      	str	r0, [r3, r2]
   8032e:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   80332:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   80336:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8033a:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
   8033e:	2000      	movs	r0, #0
   80340:	bc30      	pop	{r4, r5}
   80342:	4770      	bx	lr
   80344:	2001      	movs	r0, #1
   80346:	4770      	bx	lr
   80348:	400b4000 	.word	0x400b4000

0008034c <CAN0_Handler>:
   8034c:	b510      	push	{r4, lr}
   8034e:	b084      	sub	sp, #16
   80350:	4b15      	ldr	r3, [pc, #84]	; (803a8 <CAN0_Handler+0x5c>)
   80352:	691c      	ldr	r4, [r3, #16]
   80354:	f014 0f06 	tst.w	r4, #6
   80358:	d010      	beq.n	8037c <CAN0_Handler+0x30>
   8035a:	f014 0f02 	tst.w	r4, #2
   8035e:	d11a      	bne.n	80396 <CAN0_Handler+0x4a>
   80360:	f014 0f04 	tst.w	r4, #4
   80364:	d01c      	beq.n	803a0 <CAN0_Handler+0x54>
   80366:	2102      	movs	r1, #2
   80368:	a801      	add	r0, sp, #4
   8036a:	4b10      	ldr	r3, [pc, #64]	; (803ac <CAN0_Handler+0x60>)
   8036c:	4798      	blx	r3
   8036e:	f89d 2006 	ldrb.w	r2, [sp, #6]
   80372:	b11a      	cbz	r2, 8037c <CAN0_Handler+0x30>
   80374:	2300      	movs	r3, #0
   80376:	3301      	adds	r3, #1
   80378:	4293      	cmp	r3, r2
   8037a:	d1fc      	bne.n	80376 <CAN0_Handler+0x2a>
   8037c:	f014 0f01 	tst.w	r4, #1
   80380:	d002      	beq.n	80388 <CAN0_Handler+0x3c>
   80382:	2201      	movs	r2, #1
   80384:	4b08      	ldr	r3, [pc, #32]	; (803a8 <CAN0_Handler+0x5c>)
   80386:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80388:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8038c:	4b08      	ldr	r3, [pc, #32]	; (803b0 <CAN0_Handler+0x64>)
   8038e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   80392:	b004      	add	sp, #16
   80394:	bd10      	pop	{r4, pc}
   80396:	2101      	movs	r1, #1
   80398:	a801      	add	r0, sp, #4
   8039a:	4b04      	ldr	r3, [pc, #16]	; (803ac <CAN0_Handler+0x60>)
   8039c:	4798      	blx	r3
   8039e:	e7e6      	b.n	8036e <CAN0_Handler+0x22>
   803a0:	4804      	ldr	r0, [pc, #16]	; (803b4 <CAN0_Handler+0x68>)
   803a2:	4b05      	ldr	r3, [pc, #20]	; (803b8 <CAN0_Handler+0x6c>)
   803a4:	4798      	blx	r3
   803a6:	e7e2      	b.n	8036e <CAN0_Handler+0x22>
   803a8:	400b4000 	.word	0x400b4000
   803ac:	000802c9 	.word	0x000802c9
   803b0:	e000e100 	.word	0xe000e100
   803b4:	00081798 	.word	0x00081798
   803b8:	00080d3d 	.word	0x00080d3d

000803bc <dac_init>:
 */

void dac_init(){
	
	// Enable PMC
	PMC->PMC_PCER1 |= PMC_PCER1_PID38;
   803bc:	4a0c      	ldr	r2, [pc, #48]	; (803f0 <dac_init+0x34>)
   803be:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   803c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   803c6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	// Disable trigger, enable free running mode
	DACC->DACC_MR |= DACC_MR_TRGEN_DIS;
   803ca:	4b0a      	ldr	r3, [pc, #40]	; (803f4 <dac_init+0x38>)
   803cc:	685a      	ldr	r2, [r3, #4]
   803ce:	605a      	str	r2, [r3, #4]
	
	// Select channel 1
	DACC->DACC_MR |= DACC_MR_USER_SEL_CHANNEL1;
   803d0:	685a      	ldr	r2, [r3, #4]
   803d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   803d6:	605a      	str	r2, [r3, #4]
	
	// Select half-word transfer
	DACC->DACC_MR |= DACC_MR_WORD_HALF;
   803d8:	685a      	ldr	r2, [r3, #4]
   803da:	605a      	str	r2, [r3, #4]
	
	// Enable channel DAC1
	DACC->DACC_CHER |= DACC_CHER_CH1;
   803dc:	691a      	ldr	r2, [r3, #16]
   803de:	f042 0202 	orr.w	r2, r2, #2
   803e2:	611a      	str	r2, [r3, #16]
	
	// Set output data register PD9, or pin 30 on the Due, to be driven on the I/O line.
	PIOD->PIO_SODR |= PIO_SODR_P9;
   803e4:	4a04      	ldr	r2, [pc, #16]	; (803f8 <dac_init+0x3c>)
   803e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   803e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   803ec:	6313      	str	r3, [r2, #48]	; 0x30
   803ee:	4770      	bx	lr
   803f0:	400e0600 	.word	0x400e0600
   803f4:	400c8000 	.word	0x400c8000
   803f8:	400e1400 	.word	0x400e1400

000803fc <dac_write>:
 */

void dac_write(uint16_t data){
	
	// Add data to register, scale value such that DAC1 = [0.5-2.75], AOUT = [0,5V]
	DACC->DACC_CDR = DACC_CDR_DATA(data*16);
   803fc:	0100      	lsls	r0, r0, #4
   803fe:	4b01      	ldr	r3, [pc, #4]	; (80404 <dac_write+0x8>)
   80400:	6218      	str	r0, [r3, #32]
   80402:	4770      	bx	lr
   80404:	400c8000 	.word	0x400c8000

00080408 <Dummy_Handler>:
   80408:	e7fe      	b.n	80408 <Dummy_Handler>
	...

0008040c <Reset_Handler>:
   8040c:	b508      	push	{r3, lr}
   8040e:	4b18      	ldr	r3, [pc, #96]	; (80470 <Reset_Handler+0x64>)
   80410:	4a18      	ldr	r2, [pc, #96]	; (80474 <Reset_Handler+0x68>)
   80412:	429a      	cmp	r2, r3
   80414:	d010      	beq.n	80438 <Reset_Handler+0x2c>
   80416:	4b18      	ldr	r3, [pc, #96]	; (80478 <Reset_Handler+0x6c>)
   80418:	4a15      	ldr	r2, [pc, #84]	; (80470 <Reset_Handler+0x64>)
   8041a:	429a      	cmp	r2, r3
   8041c:	d20c      	bcs.n	80438 <Reset_Handler+0x2c>
   8041e:	3b01      	subs	r3, #1
   80420:	1a9b      	subs	r3, r3, r2
   80422:	f023 0303 	bic.w	r3, r3, #3
   80426:	3304      	adds	r3, #4
   80428:	4413      	add	r3, r2
   8042a:	4912      	ldr	r1, [pc, #72]	; (80474 <Reset_Handler+0x68>)
   8042c:	f851 0b04 	ldr.w	r0, [r1], #4
   80430:	f842 0b04 	str.w	r0, [r2], #4
   80434:	429a      	cmp	r2, r3
   80436:	d1f9      	bne.n	8042c <Reset_Handler+0x20>
   80438:	4b10      	ldr	r3, [pc, #64]	; (8047c <Reset_Handler+0x70>)
   8043a:	4a11      	ldr	r2, [pc, #68]	; (80480 <Reset_Handler+0x74>)
   8043c:	429a      	cmp	r2, r3
   8043e:	d20a      	bcs.n	80456 <Reset_Handler+0x4a>
   80440:	3b01      	subs	r3, #1
   80442:	1a9b      	subs	r3, r3, r2
   80444:	f023 0303 	bic.w	r3, r3, #3
   80448:	3304      	adds	r3, #4
   8044a:	4413      	add	r3, r2
   8044c:	2100      	movs	r1, #0
   8044e:	f842 1b04 	str.w	r1, [r2], #4
   80452:	4293      	cmp	r3, r2
   80454:	d1fb      	bne.n	8044e <Reset_Handler+0x42>
   80456:	4b0b      	ldr	r3, [pc, #44]	; (80484 <Reset_Handler+0x78>)
   80458:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8045c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80460:	4a09      	ldr	r2, [pc, #36]	; (80488 <Reset_Handler+0x7c>)
   80462:	6093      	str	r3, [r2, #8]
   80464:	4b09      	ldr	r3, [pc, #36]	; (8048c <Reset_Handler+0x80>)
   80466:	4798      	blx	r3
   80468:	4b09      	ldr	r3, [pc, #36]	; (80490 <Reset_Handler+0x84>)
   8046a:	4798      	blx	r3
   8046c:	e7fe      	b.n	8046c <Reset_Handler+0x60>
   8046e:	bf00      	nop
   80470:	20000000 	.word	0x20000000
   80474:	00081868 	.word	0x00081868
   80478:	2000043c 	.word	0x2000043c
   8047c:	200004e0 	.word	0x200004e0
   80480:	2000043c 	.word	0x2000043c
   80484:	00080000 	.word	0x00080000
   80488:	e000ed00 	.word	0xe000ed00
   8048c:	00081629 	.word	0x00081629
   80490:	00080539 	.word	0x00080539

00080494 <SystemInit>:
   80494:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80498:	4a20      	ldr	r2, [pc, #128]	; (8051c <SystemInit+0x88>)
   8049a:	6013      	str	r3, [r2, #0]
   8049c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   804a0:	6013      	str	r3, [r2, #0]
   804a2:	4b1f      	ldr	r3, [pc, #124]	; (80520 <SystemInit+0x8c>)
   804a4:	6a1b      	ldr	r3, [r3, #32]
   804a6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   804aa:	d107      	bne.n	804bc <SystemInit+0x28>
   804ac:	4a1d      	ldr	r2, [pc, #116]	; (80524 <SystemInit+0x90>)
   804ae:	4b1c      	ldr	r3, [pc, #112]	; (80520 <SystemInit+0x8c>)
   804b0:	621a      	str	r2, [r3, #32]
   804b2:	461a      	mov	r2, r3
   804b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804b6:	f013 0f01 	tst.w	r3, #1
   804ba:	d0fb      	beq.n	804b4 <SystemInit+0x20>
   804bc:	4a1a      	ldr	r2, [pc, #104]	; (80528 <SystemInit+0x94>)
   804be:	4b18      	ldr	r3, [pc, #96]	; (80520 <SystemInit+0x8c>)
   804c0:	621a      	str	r2, [r3, #32]
   804c2:	461a      	mov	r2, r3
   804c4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   804ca:	d0fb      	beq.n	804c4 <SystemInit+0x30>
   804cc:	4a14      	ldr	r2, [pc, #80]	; (80520 <SystemInit+0x8c>)
   804ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
   804d0:	f023 0303 	bic.w	r3, r3, #3
   804d4:	f043 0301 	orr.w	r3, r3, #1
   804d8:	6313      	str	r3, [r2, #48]	; 0x30
   804da:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804dc:	f013 0f08 	tst.w	r3, #8
   804e0:	d0fb      	beq.n	804da <SystemInit+0x46>
   804e2:	4a12      	ldr	r2, [pc, #72]	; (8052c <SystemInit+0x98>)
   804e4:	4b0e      	ldr	r3, [pc, #56]	; (80520 <SystemInit+0x8c>)
   804e6:	629a      	str	r2, [r3, #40]	; 0x28
   804e8:	461a      	mov	r2, r3
   804ea:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804ec:	f013 0f02 	tst.w	r3, #2
   804f0:	d0fb      	beq.n	804ea <SystemInit+0x56>
   804f2:	2211      	movs	r2, #17
   804f4:	4b0a      	ldr	r3, [pc, #40]	; (80520 <SystemInit+0x8c>)
   804f6:	631a      	str	r2, [r3, #48]	; 0x30
   804f8:	461a      	mov	r2, r3
   804fa:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804fc:	f013 0f08 	tst.w	r3, #8
   80500:	d0fb      	beq.n	804fa <SystemInit+0x66>
   80502:	2212      	movs	r2, #18
   80504:	4b06      	ldr	r3, [pc, #24]	; (80520 <SystemInit+0x8c>)
   80506:	631a      	str	r2, [r3, #48]	; 0x30
   80508:	461a      	mov	r2, r3
   8050a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8050c:	f013 0f08 	tst.w	r3, #8
   80510:	d0fb      	beq.n	8050a <SystemInit+0x76>
   80512:	4a07      	ldr	r2, [pc, #28]	; (80530 <SystemInit+0x9c>)
   80514:	4b07      	ldr	r3, [pc, #28]	; (80534 <SystemInit+0xa0>)
   80516:	601a      	str	r2, [r3, #0]
   80518:	4770      	bx	lr
   8051a:	bf00      	nop
   8051c:	400e0a00 	.word	0x400e0a00
   80520:	400e0600 	.word	0x400e0600
   80524:	00370809 	.word	0x00370809
   80528:	01370809 	.word	0x01370809
   8052c:	200d3f01 	.word	0x200d3f01
   80530:	0501bd00 	.word	0x0501bd00
   80534:	20000000 	.word	0x20000000

00080538 <main>:
#define TIME_INTERVAL 157



int main(void)
{
   80538:	b5f0      	push	{r4, r5, r6, r7, lr}
   8053a:	b085      	sub	sp, #20
	// Systeminit
	SystemInit();
   8053c:	4b25      	ldr	r3, [pc, #148]	; (805d4 <main+0x9c>)
   8053e:	4798      	blx	r3
	
	// Init: Assignment 6
	configure_uart();
   80540:	4b25      	ldr	r3, [pc, #148]	; (805d8 <main+0xa0>)
   80542:	4798      	blx	r3
	can_init(CAN_BR, 1,1);
   80544:	2201      	movs	r2, #1
   80546:	4611      	mov	r1, r2
   80548:	4824      	ldr	r0, [pc, #144]	; (805dc <main+0xa4>)
   8054a:	4b25      	ldr	r3, [pc, #148]	; (805e0 <main+0xa8>)
   8054c:	4798      	blx	r3
	//can_init_def_tx_rx_mb(CAN_BR);
	WDT->WDT_MR = WDT_MR_WDDIS;
   8054e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80552:	4b24      	ldr	r3, [pc, #144]	; (805e4 <main+0xac>)
   80554:	605a      	str	r2, [r3, #4]
	
	CAN_MESSAGE message;
	
	// Init: Assignment 7
	pwm_timercounter_init();
   80556:	4b24      	ldr	r3, [pc, #144]	; (805e8 <main+0xb0>)
   80558:	4798      	blx	r3
	adc_init();
   8055a:	4b24      	ldr	r3, [pc, #144]	; (805ec <main+0xb4>)
   8055c:	4798      	blx	r3
	
	// Init: Assignment 8
	dac_init();
   8055e:	4b24      	ldr	r3, [pc, #144]	; (805f0 <main+0xb8>)
   80560:	4798      	blx	r3
	solenoid_init();
   80562:	4b24      	ldr	r3, [pc, #144]	; (805f4 <main+0xbc>)
   80564:	4798      	blx	r3
	motor_init();
   80566:	4b24      	ldr	r3, [pc, #144]	; (805f8 <main+0xc0>)
   80568:	4798      	blx	r3
	pid_init();
   8056a:	4b24      	ldr	r3, [pc, #144]	; (805fc <main+0xc4>)
   8056c:	4798      	blx	r3
	pid_timercounter_init();
   8056e:	4b24      	ldr	r3, [pc, #144]	; (80600 <main+0xc8>)
   80570:	4798      	blx	r3
	
	
	
	/////   MAIN GAME   /////

	printf("Ye haveth %d lives left in yer soul \r\n\r\n", max_lives);
   80572:	2103      	movs	r1, #3
   80574:	4823      	ldr	r0, [pc, #140]	; (80604 <main+0xcc>)
   80576:	4b24      	ldr	r3, [pc, #144]	; (80608 <main+0xd0>)
   80578:	4798      	blx	r3
	int max_lives = 3;
   8057a:	2403      	movs	r4, #3
	
	while (max_lives)
	{
		can_receive(&message,0);
   8057c:	4e23      	ldr	r6, [pc, #140]	; (8060c <main+0xd4>)
		
	
		//Move the servo angle (slider)
		pwm_update_dutycycle(message.data[3]);
   8057e:	4d24      	ldr	r5, [pc, #144]	; (80610 <main+0xd8>)
		
		
		//Push the servo (joystick button)
		if (message.data[4]){
			solenoid_push();
   80580:	4f24      	ldr	r7, [pc, #144]	; (80614 <main+0xdc>)
		can_receive(&message,0);
   80582:	2100      	movs	r1, #0
   80584:	a801      	add	r0, sp, #4
   80586:	47b0      	blx	r6
		pwm_update_dutycycle(message.data[3]);
   80588:	f89d 000a 	ldrb.w	r0, [sp, #10]
   8058c:	47a8      	blx	r5
		if (message.data[4]){
   8058e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   80592:	b993      	cbnz	r3, 805ba <main+0x82>
			systick_delay_ms(300);
		}
		//printf("Joystick button: %d \r\n", message.data[4]);
		
		
		position_x = message.data[0];
   80594:	f89d 0007 	ldrb.w	r0, [sp, #7]
   80598:	4b1f      	ldr	r3, [pc, #124]	; (80618 <main+0xe0>)
   8059a:	7018      	strb	r0, [r3, #0]
		
		//Move the servo position (joystick)
		pid_ref(position_x);
   8059c:	4b1f      	ldr	r3, [pc, #124]	; (8061c <main+0xe4>)
   8059e:	4798      	blx	r3
		pid_update();
   805a0:	4b1f      	ldr	r3, [pc, #124]	; (80620 <main+0xe8>)
   805a2:	4798      	blx	r3
		
		
		
		
		//Send highscore back to oled!
		if(adc_count_score()){
   805a4:	4b1f      	ldr	r3, [pc, #124]	; (80624 <main+0xec>)
   805a6:	4798      	blx	r3
   805a8:	b968      	cbnz	r0, 805c6 <main+0x8e>
			max_lives -= 1;
			printf("Lives left: %d \r\n", max_lives);
		}
		if(max_lives==0){
   805aa:	2c00      	cmp	r4, #0
   805ac:	d1e9      	bne.n	80582 <main+0x4a>
			printf("\r\nGame Over kek!");
   805ae:	481e      	ldr	r0, [pc, #120]	; (80628 <main+0xf0>)
   805b0:	4b15      	ldr	r3, [pc, #84]	; (80608 <main+0xd0>)
   805b2:	4798      	blx	r3
		}
		
	}
		
}
   805b4:	2000      	movs	r0, #0
   805b6:	b005      	add	sp, #20
   805b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			solenoid_push();
   805ba:	47b8      	blx	r7
			systick_delay_ms(300);
   805bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
   805c0:	4b1a      	ldr	r3, [pc, #104]	; (8062c <main+0xf4>)
   805c2:	4798      	blx	r3
   805c4:	e7e6      	b.n	80594 <main+0x5c>
			max_lives -= 1;
   805c6:	3c01      	subs	r4, #1
			printf("Lives left: %d \r\n", max_lives);
   805c8:	4621      	mov	r1, r4
   805ca:	4819      	ldr	r0, [pc, #100]	; (80630 <main+0xf8>)
   805cc:	4b0e      	ldr	r3, [pc, #56]	; (80608 <main+0xd0>)
   805ce:	4798      	blx	r3
   805d0:	e7eb      	b.n	805aa <main+0x72>
   805d2:	bf00      	nop
   805d4:	00080495 	.word	0x00080495
   805d8:	00080d61 	.word	0x00080d61
   805dc:	00290561 	.word	0x00290561
   805e0:	000801d9 	.word	0x000801d9
   805e4:	400e1a50 	.word	0x400e1a50
   805e8:	000808b9 	.word	0x000808b9
   805ec:	00080161 	.word	0x00080161
   805f0:	000803bd 	.word	0x000803bd
   805f4:	00080999 	.word	0x00080999
   805f8:	00080635 	.word	0x00080635
   805fc:	00080731 	.word	0x00080731
   80600:	00080869 	.word	0x00080869
   80604:	000817c4 	.word	0x000817c4
   80608:	00080d3d 	.word	0x00080d3d
   8060c:	000802c9 	.word	0x000802c9
   80610:	00080921 	.word	0x00080921
   80614:	000809b5 	.word	0x000809b5
   80618:	20000468 	.word	0x20000468
   8061c:	0008075d 	.word	0x0008075d
   80620:	0008083d 	.word	0x0008083d
   80624:	00080191 	.word	0x00080191
   80628:	00081804 	.word	0x00081804
   8062c:	00080a09 	.word	0x00080a09
   80630:	000817f0 	.word	0x000817f0

00080634 <motor_init>:
 *
 * \param void
 * \retval void
 */

void motor_init(){
   80634:	b410      	push	{r4}
	
	// Enables the Write Protect Mode Register
	PMC->PMC_WPMR |= PMC_WPMR_WPEN;
   80636:	4b23      	ldr	r3, [pc, #140]	; (806c4 <motor_init+0x90>)
   80638:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   8063c:	f042 0201 	orr.w	r2, r2, #1
   80640:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_WPMR |= PMC_WPMR_WPKEY_PASSWD;
   80644:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
   80648:	4a1f      	ldr	r2, [pc, #124]	; (806c8 <motor_init+0x94>)
   8064a:	430a      	orrs	r2, r1
   8064c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	//Enable PMC on peripheral C and D	
	PMC->PMC_PCER0 |= 1<<(ID_PIOD);
   80650:	691a      	ldr	r2, [r3, #16]
   80652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   80656:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER0 |= 1<<(ID_PIOC);
   80658:	691a      	ldr	r2, [r3, #16]
   8065a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8065e:	611a      	str	r2, [r3, #16]
	
	 //Enable !OE
	 PIOD->PIO_PER = PIO_PD0;
   80660:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
   80664:	2201      	movs	r2, #1
   80666:	601a      	str	r2, [r3, #0]
	 
	 // Enable EN
	 PIOD->PIO_PER = PIO_PD9;
   80668:	f44f 7400 	mov.w	r4, #512	; 0x200
   8066c:	601c      	str	r4, [r3, #0]
	 
	 // Enable DIR
	 PIOD->PIO_PER = PIO_PD10;
   8066e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80672:	601a      	str	r2, [r3, #0]
	 
	 // Enable SEL
	 PIOD->PIO_PER = PIO_PD2;
   80674:	2204      	movs	r2, #4
   80676:	601a      	str	r2, [r3, #0]
	 
	 // Enable !RST
	 PIOD->PIO_PER = PIO_PD1;
   80678:	2202      	movs	r2, #2
   8067a:	601a      	str	r2, [r3, #0]
	 
	 // Enable D0-D7
	 PIOC->PIO_PER |= PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC6 | PIO_PC7 | PIO_PC8;
   8067c:	4a13      	ldr	r2, [pc, #76]	; (806cc <motor_init+0x98>)
   8067e:	6811      	ldr	r1, [r2, #0]
   80680:	f441 71ff 	orr.w	r1, r1, #510	; 0x1fe
   80684:	6011      	str	r1, [r2, #0]
	 
	 // Enable write
	 PIOD->PIO_OWER |= PIO_PD0 | PIO_PD9 | PIO_PD10 | PIO_PD2 | PIO_PD1;
   80686:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   8068a:	f240 6007 	movw	r0, #1543	; 0x607
   8068e:	4301      	orrs	r1, r0
   80690:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0

	// Disable write
	 PIOC->PIO_OWDR |= PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC6 | PIO_PC7 | PIO_PC8;
   80694:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
   80698:	f441 71ff 	orr.w	r1, r1, #510	; 0x1fe
   8069c:	f8c2 10a4 	str.w	r1, [r2, #164]	; 0xa4
	
	// Disable interrupts
	PIOD->PIO_IDR |= PIO_PD0 | PIO_PD9 | PIO_PD10 | PIO_PD2 | PIO_PD1;
   806a0:	6c59      	ldr	r1, [r3, #68]	; 0x44
   806a2:	4301      	orrs	r1, r0
   806a4:	6459      	str	r1, [r3, #68]	; 0x44
	PIOC->PIO_IDR |= PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC6 | PIO_PC7 | PIO_PC8;
   806a6:	6c51      	ldr	r1, [r2, #68]	; 0x44
   806a8:	f441 71ff 	orr.w	r1, r1, #510	; 0x1fe
   806ac:	6451      	str	r1, [r2, #68]	; 0x44
	
	// Output enable 
	PIOD->PIO_OER |= PIO_PD0 | PIO_PD9 | PIO_PD10 | PIO_PD2 | PIO_PD1;
   806ae:	6919      	ldr	r1, [r3, #16]
   806b0:	4301      	orrs	r1, r0
   806b2:	6119      	str	r1, [r3, #16]
	
	// Disable output
	PIOC->PIO_ODR |= PIO_PC1 | PIO_PC2 | PIO_PC3 | PIO_PC4 | PIO_PC5 | PIO_PC6 | PIO_PC7 | PIO_PC8;
   806b4:	6951      	ldr	r1, [r2, #20]
   806b6:	f441 71ff 	orr.w	r1, r1, #510	; 0x1fe
   806ba:	6151      	str	r1, [r2, #20]

	// Set output data register PD9, or pin 30 on the Due, to be driven on the I/O line.
	 PIOD->PIO_SODR = PIO_PD9;
   806bc:	631c      	str	r4, [r3, #48]	; 0x30
	 
}
   806be:	bc10      	pop	{r4}
   806c0:	4770      	bx	lr
   806c2:	bf00      	nop
   806c4:	400e0600 	.word	0x400e0600
   806c8:	504d4300 	.word	0x504d4300
   806cc:	400e1200 	.word	0x400e1200

000806d0 <motor_read_encoder>:
 *
 * \param void
 * \retval Returns the servo position from the encoder
 */

uint16_t motor_read_encoder(void){
   806d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	//Set SEL og !OE low
	PIOD->PIO_CODR = PIO_PD0;
   806d4:	4c10      	ldr	r4, [pc, #64]	; (80718 <motor_read_encoder+0x48>)
   806d6:	2501      	movs	r5, #1
   806d8:	6365      	str	r5, [r4, #52]	; 0x34
	PIOD->PIO_CODR = PIO_PD2;
   806da:	f04f 0904 	mov.w	r9, #4
   806de:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
	
	//Delay 20us
	systick_delay_us(20);
   806e2:	2014      	movs	r0, #20
   806e4:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8072c <motor_read_encoder+0x5c>
   806e8:	47c0      	blx	r8
	
	//Read MSB
	encoderdataMSB = PIOC->PIO_PDSR;
   806ea:	4f0c      	ldr	r7, [pc, #48]	; (8071c <motor_read_encoder+0x4c>)
   806ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   806ee:	4e0c      	ldr	r6, [pc, #48]	; (80720 <motor_read_encoder+0x50>)
   806f0:	7033      	strb	r3, [r6, #0]
	
	//Set SEL high
	PIOD->PIO_SODR = PIO_PD2;
   806f2:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30

	//Delay 20us
	systick_delay_us(20);
   806f6:	2014      	movs	r0, #20
   806f8:	47c0      	blx	r8
		
	//Read LSB	
	encoderdataLSB = PIOC->PIO_PDSR;
   806fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   806fc:	b2c0      	uxtb	r0, r0
   806fe:	4b09      	ldr	r3, [pc, #36]	; (80724 <motor_read_encoder+0x54>)
   80700:	7018      	strb	r0, [r3, #0]
	
	//Toggle !RST 
	PIOD->PIO_CODR = PIO_PD1;
   80702:	2302      	movs	r3, #2
   80704:	6363      	str	r3, [r4, #52]	; 0x34
	
	PIOD->PIO_SODR = PIO_PD1;
   80706:	6323      	str	r3, [r4, #48]	; 0x30
	
	// Combine the high and low bytes of the encoder data to one variable
	
	encoderdata = (encoderdataMSB<<8) | encoderdataLSB;
   80708:	7833      	ldrb	r3, [r6, #0]
   8070a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   8070e:	4b06      	ldr	r3, [pc, #24]	; (80728 <motor_read_encoder+0x58>)
   80710:	8018      	strh	r0, [r3, #0]
	
	//Set !OE high
	PIOD->PIO_SODR = PIO_PD0;
   80712:	6325      	str	r5, [r4, #48]	; 0x30
	
	return encoderdata;
}
   80714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80718:	400e1400 	.word	0x400e1400
   8071c:	400e1200 	.word	0x400e1200
   80720:	20000477 	.word	0x20000477
   80724:	20000476 	.word	0x20000476
   80728:	20000474 	.word	0x20000474
   8072c:	00080a2d 	.word	0x00080a2d

00080730 <pid_init>:
 * \param void
 * \retval void
 */

void pid_init(void){
	sum_error = 0;
   80730:	4b07      	ldr	r3, [pc, #28]	; (80750 <pid_init+0x20>)
   80732:	2200      	movs	r2, #0
   80734:	601a      	str	r2, [r3, #0]
	last_error = 0;
   80736:	809a      	strh	r2, [r3, #4]
	
	// Limit the summing of errors
	max_sum_error = (DEC_INT12/2)/(ki+1);
   80738:	4b06      	ldr	r3, [pc, #24]	; (80754 <pid_init+0x24>)
   8073a:	f9b3 3000 	ldrsh.w	r3, [r3]
   8073e:	1c5a      	adds	r2, r3, #1
   80740:	f240 73ff 	movw	r3, #2047	; 0x7ff
   80744:	fb93 f3f2 	sdiv	r3, r3, r2
   80748:	4a03      	ldr	r2, [pc, #12]	; (80758 <pid_init+0x28>)
   8074a:	6013      	str	r3, [r2, #0]
   8074c:	4770      	bx	lr
   8074e:	bf00      	nop
   80750:	20000458 	.word	0x20000458
   80754:	20000004 	.word	0x20000004
   80758:	2000046c 	.word	0x2000046c

0008075c <pid_ref>:

void pid_ref(uint8_t joy_pos){
	
	// Sets joy_ref = 0 when inside of deadzone.

	if (joy_pos < 6){
   8075c:	2805      	cmp	r0, #5
   8075e:	d90d      	bls.n	8077c <pid_ref+0x20>
		joy_ref = 0;
		
	} else {
		
		// Scales joy_pos range to the same range as the encoder position is in.
		joy_ref = ((int32_t) (ENC_MAX)*(int32_t)joy_pos)/JOY_MAX; //PLS ENDRE
   80760:	f242 1334 	movw	r3, #8500	; 0x2134
   80764:	fb03 f000 	mul.w	r0, r3, r0
   80768:	4b06      	ldr	r3, [pc, #24]	; (80784 <pid_ref+0x28>)
   8076a:	fb83 2300 	smull	r2, r3, r3, r0
   8076e:	4403      	add	r3, r0
   80770:	17c0      	asrs	r0, r0, #31
   80772:	ebc0 10e3 	rsb	r0, r0, r3, asr #7
   80776:	4b04      	ldr	r3, [pc, #16]	; (80788 <pid_ref+0x2c>)
   80778:	6098      	str	r0, [r3, #8]
   8077a:	4770      	bx	lr
		joy_ref = 0;
   8077c:	2200      	movs	r2, #0
   8077e:	4b02      	ldr	r3, [pc, #8]	; (80788 <pid_ref+0x2c>)
   80780:	609a      	str	r2, [r3, #8]
   80782:	4770      	bx	lr
   80784:	80808081 	.word	0x80808081
   80788:	20000458 	.word	0x20000458

0008078c <pid_controller>:
 *
 * \param enc_pos Servo position from encoder data.
 * \retval input Control input.
 */

int32_t pid_controller(int16_t enc_pos){
   8078c:	b4f0      	push	{r4, r5, r6, r7}
   8078e:	f242 1434 	movw	r4, #8500	; 0x2134
   80792:	42a0      	cmp	r0, r4
   80794:	bfa8      	it	ge
   80796:	4620      	movge	r0, r4
	} else if (enc_pos > 8500){
		enc_pos = 8500;
	}

	// Sets servo direction	
	error = joy_ref - enc_pos;
   80798:	4b22      	ldr	r3, [pc, #136]	; (80824 <pid_controller+0x98>)
   8079a:	689c      	ldr	r4, [r3, #8]
   8079c:	2800      	cmp	r0, #0
   8079e:	bfa8      	it	ge
   807a0:	1a24      	subge	r4, r4, r0
	
	if(error < 0){
   807a2:	2c00      	cmp	r4, #0
		PIOD->PIO_SODR = PIO_PD10;
   807a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   807a8:	4b1f      	ldr	r3, [pc, #124]	; (80828 <pid_controller+0x9c>)
   807aa:	bfb4      	ite	lt
   807ac:	631a      	strlt	r2, [r3, #48]	; 0x30
		}else{
		PIOD->PIO_CODR = PIO_PD10;
   807ae:	635a      	strge	r2, [r3, #52]	; 0x34
	}
	
	error = abs(error);
   807b0:	2c00      	cmp	r4, #0
   807b2:	bfb8      	it	lt
   807b4:	4264      	neglt	r4, r4
	
	
	// Calculates p_term
	p_term = kp*error;
   807b6:	4f1d      	ldr	r7, [pc, #116]	; (8082c <pid_controller+0xa0>)
   807b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
	
	// Calculates i_term, with dt
	temp = (sum_error+error)/10;
   807bc:	4d19      	ldr	r5, [pc, #100]	; (80824 <pid_controller+0x98>)
   807be:	6829      	ldr	r1, [r5, #0]
   807c0:	4421      	add	r1, r4
   807c2:	4a1b      	ldr	r2, [pc, #108]	; (80830 <pid_controller+0xa4>)
   807c4:	fb82 0201 	smull	r0, r2, r2, r1
   807c8:	17c9      	asrs	r1, r1, #31
   807ca:	ebc1 02a2 	rsb	r2, r1, r2, asr #2
	sum_error = temp;
   807ce:	602a      	str	r2, [r5, #0]
	i_term = ki*sum_error;
   807d0:	f9b7 1000 	ldrsh.w	r1, [r7]
   807d4:	fb02 f101 	mul.w	r1, r2, r1
	
	// Calculates d_term, with dt
	d_term = kd*(error-last_error)*10;
   807d8:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
   807dc:	1a26      	subs	r6, r4, r0
   807de:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
   807e2:	fb00 f006 	mul.w	r0, r0, r6
   807e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	last_error = error;
   807ea:	80ac      	strh	r4, [r5, #4]
	
	// Calculates (scaled) control function
	input = (p_term+i_term+d_term)/SCALING_FACTOR;
   807ec:	fb04 1303 	mla	r3, r4, r3, r1
   807f0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   807f4:	480f      	ldr	r0, [pc, #60]	; (80834 <pid_controller+0xa8>)
   807f6:	fb80 1003 	smull	r1, r0, r0, r3
   807fa:	18c1      	adds	r1, r0, r3
   807fc:	17d8      	asrs	r0, r3, #31
   807fe:	ebc0 10e1 	rsb	r0, r0, r1, asr #7


	// Limits control input range
	if(input > DEC_INT12){
   80802:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   80806:	db05      	blt.n	80814 <pid_controller+0x88>
		input = DEC_INT12;
		sum_error = sum_error-error;
   80808:	1b12      	subs	r2, r2, r4
   8080a:	602a      	str	r2, [r5, #0]
		input = DEC_INT12;
   8080c:	f640 70ff 	movw	r0, #4095	; 0xfff
		input = -DEC_INT12;
		sum_error = sum_error-error;
	}
	
	return input;
}
   80810:	bcf0      	pop	{r4, r5, r6, r7}
   80812:	4770      	bx	lr
	} else if(input < -DEC_INT12){
   80814:	f510 5f80 	cmn.w	r0, #4096	; 0x1000
   80818:	dcfa      	bgt.n	80810 <pid_controller+0x84>
		sum_error = sum_error-error;
   8081a:	1b12      	subs	r2, r2, r4
   8081c:	4b01      	ldr	r3, [pc, #4]	; (80824 <pid_controller+0x98>)
   8081e:	601a      	str	r2, [r3, #0]
		input = -DEC_INT12;
   80820:	4805      	ldr	r0, [pc, #20]	; (80838 <pid_controller+0xac>)
	return input;
   80822:	e7f5      	b.n	80810 <pid_controller+0x84>
   80824:	20000458 	.word	0x20000458
   80828:	400e1400 	.word	0x400e1400
   8082c:	20000004 	.word	0x20000004
   80830:	66666667 	.word	0x66666667
   80834:	80808081 	.word	0x80808081
   80838:	fffff001 	.word	0xfffff001

0008083c <pid_update>:
 *
 * \param void
 * \retval void
 */

void pid_update(void){
   8083c:	b508      	push	{r3, lr}

	// Checks for interrupts
	if(PWM_ISR1_CHID3){
		
		// Declares the upscaled control input
		int16_t input = pid_controller(motor_read_encoder())*6;	
   8083e:	4b07      	ldr	r3, [pc, #28]	; (8085c <pid_update+0x20>)
   80840:	4798      	blx	r3
   80842:	b200      	sxth	r0, r0
   80844:	4b06      	ldr	r3, [pc, #24]	; (80860 <pid_update+0x24>)
   80846:	4798      	blx	r3
   80848:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   8084c:	0040      	lsls	r0, r0, #1
			
		// Writes the input to a_out on the shield		
		dac_write(abs(input));
   8084e:	b200      	sxth	r0, r0
   80850:	2800      	cmp	r0, #0
   80852:	bfb8      	it	lt
   80854:	4240      	neglt	r0, r0
   80856:	4b03      	ldr	r3, [pc, #12]	; (80864 <pid_update+0x28>)
   80858:	4798      	blx	r3
   8085a:	bd08      	pop	{r3, pc}
   8085c:	000806d1 	.word	0x000806d1
   80860:	0008078d 	.word	0x0008078d
   80864:	000803fd 	.word	0x000803fd

00080868 <pid_timercounter_init>:
 */

void pid_timercounter_init(void){
	
	// Interrupt enable
	PWM->PWM_IER1 = PWM_IER1_CHID3;
   80868:	4b11      	ldr	r3, [pc, #68]	; (808b0 <pid_timercounter_init+0x48>)
   8086a:	2208      	movs	r2, #8
   8086c:	611a      	str	r2, [r3, #16]
	
	// Enable clock
	PMC->PMC_PCER1 |= (1 << ID_PWM-32);
   8086e:	4911      	ldr	r1, [pc, #68]	; (808b4 <pid_timercounter_init+0x4c>)
   80870:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   80874:	f042 0210 	orr.w	r2, r2, #16
   80878:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
	
	// Select CLKA, MCK/2
	PWM->PWM_CLK |= PWM_CLK_DIVA(1) | PWM_CLK_PREA(6);
   8087c:	681a      	ldr	r2, [r3, #0]
   8087e:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
   80882:	f042 0201 	orr.w	r2, r2, #1
   80886:	601a      	str	r2, [r3, #0]
	
	// Select pre-scaler CLKA
	PWM->PWM_CH_NUM[3].PWM_CMR |= (PWM_CMR_CPRE_CLKA);
   80888:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
   8088c:	f042 020b 	orr.w	r2, r2, #11
   80890:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	
	// Set period, 20 ms
	PWM->PWM_CH_NUM[3].PWM_CPRD = 1640*16;
   80894:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
   80898:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
	
	// Set start duty cycle, 1.5ms (7.5% pulse width)
	PWM->PWM_CH_NUM[3].PWM_CDTY = 24272; //CPRD - CPRD*7.5%
   8089c:	f645 62d0 	movw	r2, #24272	; 0x5ed0
   808a0:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	
	// Enable channel 3
	PWM->PWM_ENA |= (PWM_ENA_CHID3);
   808a4:	685a      	ldr	r2, [r3, #4]
   808a6:	f042 0208 	orr.w	r2, r2, #8
   808aa:	605a      	str	r2, [r3, #4]
   808ac:	4770      	bx	lr
   808ae:	bf00      	nop
   808b0:	40094000 	.word	0x40094000
   808b4:	400e0600 	.word	0x400e0600

000808b8 <pwm_timercounter_init>:
 */

void pwm_timercounter_init(void){
	
	// Enable clock on port C
	PMC->PMC_PCER0 |= (1 << ID_PIOC);
   808b8:	4b17      	ldr	r3, [pc, #92]	; (80918 <pwm_timercounter_init+0x60>)
   808ba:	691a      	ldr	r2, [r3, #16]
   808bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   808c0:	611a      	str	r2, [r3, #16]
	
	// Enable clock
	PMC->PMC_PCER1 |= (1 << ID_PWM-32);
   808c2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   808c6:	f042 0210 	orr.w	r2, r2, #16
   808ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
	// Disable input P44, used by PWM
	PIOC->PIO_PDR |= PIO_PDR_P19;
   808ce:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   808d2:	685a      	ldr	r2, [r3, #4]
   808d4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   808d8:	605a      	str	r2, [r3, #4]
	
	// Set peripheral C on P44
	PIOC->PIO_ABSR |= PIO_ABSR_P19;
   808da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   808dc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   808e0:	671a      	str	r2, [r3, #112]	; 0x70
	
	// Select CLKA, MCK/2
	PWM->PWM_CLK |= PWM_CLK_DIVA(1) | PWM_CLK_PREA(6);
   808e2:	4b0e      	ldr	r3, [pc, #56]	; (8091c <pwm_timercounter_init+0x64>)
   808e4:	681a      	ldr	r2, [r3, #0]
   808e6:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
   808ea:	f042 0201 	orr.w	r2, r2, #1
   808ee:	601a      	str	r2, [r3, #0]

	//Select pre-scaler CLKA	
	PWM->PWM_CH_NUM[5].PWM_CMR |= (PWM_CMR_CPRE_CLKA);
   808f0:	f8d3 22a0 	ldr.w	r2, [r3, #672]	; 0x2a0
   808f4:	f042 020b 	orr.w	r2, r2, #11
   808f8:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	
	// Set period, 20 ms 
	PWM->PWM_CH_NUM[5].PWM_CPRD = 1640*16;
   808fc:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
   80900:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	
	// Set start duty cycle, 1.5ms (7.5% pulse width)
	PWM->PWM_CH_NUM[5].PWM_CDTY = 24272; //CPRD - CPRD*7.5%
   80904:	f645 62d0 	movw	r2, #24272	; 0x5ed0
   80908:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	
	// Enable channel 5
	PWM->PWM_ENA |= (PWM_ENA_CHID5);
   8090c:	685a      	ldr	r2, [r3, #4]
   8090e:	f042 0220 	orr.w	r2, r2, #32
   80912:	605a      	str	r2, [r3, #4]
   80914:	4770      	bx	lr
   80916:	bf00      	nop
   80918:	400e0600 	.word	0x400e0600
   8091c:	40094000 	.word	0x40094000

00080920 <pwm_update_dutycycle>:
 *
 * \param position Joystick position 
 * \retval void
 */

void pwm_update_dutycycle(int32_t position){
   80920:	b510      	push	{r4, lr}
	if (position < 0) {
		position = 0;
	}

	// Calculates the new duty cycle	
	dutycycle = (position/255.0)*diff + max_duty;
   80922:	f380 0008 	usat	r0, #8, r0
   80926:	4b16      	ldr	r3, [pc, #88]	; (80980 <pwm_update_dutycycle+0x60>)
   80928:	4798      	blx	r3
   8092a:	a30f      	add	r3, pc, #60	; (adr r3, 80968 <pwm_update_dutycycle+0x48>)
   8092c:	e9d3 2300 	ldrd	r2, r3, [r3]
   80930:	4c14      	ldr	r4, [pc, #80]	; (80984 <pwm_update_dutycycle+0x64>)
   80932:	47a0      	blx	r4
   80934:	a30e      	add	r3, pc, #56	; (adr r3, 80970 <pwm_update_dutycycle+0x50>)
   80936:	e9d3 2300 	ldrd	r2, r3, [r3]
   8093a:	4c13      	ldr	r4, [pc, #76]	; (80988 <pwm_update_dutycycle+0x68>)
   8093c:	47a0      	blx	r4
   8093e:	a30e      	add	r3, pc, #56	; (adr r3, 80978 <pwm_update_dutycycle+0x58>)
   80940:	e9d3 2300 	ldrd	r2, r3, [r3]
   80944:	4c11      	ldr	r4, [pc, #68]	; (8098c <pwm_update_dutycycle+0x6c>)
   80946:	47a0      	blx	r4
   80948:	4b11      	ldr	r3, [pc, #68]	; (80990 <pwm_update_dutycycle+0x70>)
   8094a:	4798      	blx	r3
   8094c:	f645 33c2 	movw	r3, #23490	; 0x5bc2
   80950:	4298      	cmp	r0, r3
   80952:	bf38      	it	cc
   80954:	4618      	movcc	r0, r3
   80956:	f246 13df 	movw	r3, #25055	; 0x61df
   8095a:	4298      	cmp	r0, r3
   8095c:	bf28      	it	cs
   8095e:	4618      	movcs	r0, r3
	if (dutycycle > min_duty){
		dutycycle = min_duty;
	}
	
	// Updates duty cycle
	PWM->PWM_CH_NUM[5].PWM_CDTYUPD = dutycycle;
   80960:	4b0c      	ldr	r3, [pc, #48]	; (80994 <pwm_update_dutycycle+0x74>)
   80962:	f8c3 02a8 	str.w	r0, [r3, #680]	; 0x2a8
   80966:	bd10      	pop	{r4, pc}
   80968:	00000000 	.word	0x00000000
   8096c:	406fe000 	.word	0x406fe000
   80970:	00000000 	.word	0x00000000
   80974:	40987400 	.word	0x40987400
   80978:	00000000 	.word	0x00000000
   8097c:	40d6f080 	.word	0x40d6f080
   80980:	000810f9 	.word	0x000810f9
   80984:	00081419 	.word	0x00081419
   80988:	000811c5 	.word	0x000811c5
   8098c:	00080e61 	.word	0x00080e61
   80990:	000815e9 	.word	0x000815e9
   80994:	40094000 	.word	0x40094000

00080998 <solenoid_init>:
 * \retval void
 */

void solenoid_init(){
	// Activate PIO in PMC
	PMC->PMC_PCER0 = PMC_PCER0_PID18;
   80998:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   8099c:	4b04      	ldr	r3, [pc, #16]	; (809b0 <solenoid_init+0x18>)
   8099e:	611a      	str	r2, [r3, #16]
	
	// Set peripheral C on P44
	PIOC->PIO_ABSR |= PIO_ABSR_P18;
   809a0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   809a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
   809a6:	4311      	orrs	r1, r2
   809a8:	6719      	str	r1, [r3, #112]	; 0x70
	
	// Enable register PIO
	PIOC->PIO_PER = PIO_PC18;
   809aa:	601a      	str	r2, [r3, #0]
	
	// Set PIO as output
	PIOC->PIO_OER = PIO_PC18;
   809ac:	611a      	str	r2, [r3, #16]
   809ae:	4770      	bx	lr
   809b0:	400e0600 	.word	0x400e0600

000809b4 <solenoid_push>:
 *
 * \param void
 * \retval void
 */

void solenoid_push(){
   809b4:	b538      	push	{r3, r4, r5, lr}
	
	// Sets the solenoid data to be driven on the I/O line
	PIOC->PIO_SODR = PIO_PC18;
   809b6:	4c05      	ldr	r4, [pc, #20]	; (809cc <solenoid_push+0x18>)
   809b8:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   809bc:	6325      	str	r5, [r4, #48]	; 0x30
	
	systick_delay_ms(300);
   809be:	f44f 7096 	mov.w	r0, #300	; 0x12c
   809c2:	4b03      	ldr	r3, [pc, #12]	; (809d0 <solenoid_push+0x1c>)
   809c4:	4798      	blx	r3

	// Clears the solenoid data to be driven on the I/O line	
	PIOC->PIO_CODR = PIO_PC18;
   809c6:	6365      	str	r5, [r4, #52]	; 0x34
   809c8:	bd38      	pop	{r3, r4, r5, pc}
   809ca:	bf00      	nop
   809cc:	400e1200 	.word	0x400e1200
   809d0:	00080a09 	.word	0x00080a09

000809d4 <systick_init_ms>:
 */

void systick_init_ms(void){
	
	// Set the reload register with reload value corresponding to 1ms = 10500
	SysTick->LOAD = (10500 & SysTick_LOAD_RELOAD_Msk)-1;
   809d4:	4b05      	ldr	r3, [pc, #20]	; (809ec <systick_init_ms+0x18>)
   809d6:	f642 1203 	movw	r2, #10499	; 0x2903
   809da:	605a      	str	r2, [r3, #4]
	
	// Clear register
	SysTick->VAL = 0;
   809dc:	2200      	movs	r2, #0
   809de:	609a      	str	r2, [r3, #8]
	
	// Sets CLKSOURCE, TICKINT (enables SysTick exception request) and ENABLE (enables the counter)
	SysTick->CTRL |= (0b0 << SysTick_CTRL_CLKSOURCE_Pos) & SysTick_CTRL_CLKSOURCE_Msk | (0b1 << SysTick_CTRL_TICKINT_Pos) & (SysTick_CTRL_TICKINT_Msk) | (0b1 << SysTick_CTRL_ENABLE_Pos) & SysTick_CTRL_ENABLE_Msk; 
   809e0:	681a      	ldr	r2, [r3, #0]
   809e2:	f042 0203 	orr.w	r2, r2, #3
   809e6:	601a      	str	r2, [r3, #0]
   809e8:	4770      	bx	lr
   809ea:	bf00      	nop
   809ec:	e000e010 	.word	0xe000e010

000809f0 <systick_init_us>:
 */

void systick_init_us(void){
	
	// Set the reload register with reload value corresponding to 1 us = 11
	SysTick->LOAD = (11 & SysTick_LOAD_RELOAD_Msk)-1;
   809f0:	4b04      	ldr	r3, [pc, #16]	; (80a04 <systick_init_us+0x14>)
   809f2:	220a      	movs	r2, #10
   809f4:	605a      	str	r2, [r3, #4]
	
	// Clear register
	SysTick->VAL = 0;
   809f6:	2200      	movs	r2, #0
   809f8:	609a      	str	r2, [r3, #8]
	
	// Sets CLKSOURCE, TICKINT (enables SysTick exception request) and ENABLE (enables the counter)	
	SysTick->CTRL |= (0b0 << SysTick_CTRL_CLKSOURCE_Pos) & SysTick_CTRL_CLKSOURCE_Msk | (0b1 << SysTick_CTRL_TICKINT_Pos) & (SysTick_CTRL_TICKINT_Msk) | (0b1 << SysTick_CTRL_ENABLE_Pos) & SysTick_CTRL_ENABLE_Msk;
   809fa:	681a      	ldr	r2, [r3, #0]
   809fc:	f042 0203 	orr.w	r2, r2, #3
   80a00:	601a      	str	r2, [r3, #0]
   80a02:	4770      	bx	lr
   80a04:	e000e010 	.word	0xe000e010

00080a08 <systick_delay_ms>:
 *
 * \param ms Number of milliseconds
 * \retval void
 */

void systick_delay_ms(int ms){
   80a08:	b510      	push	{r4, lr}
	
	period = ms;
   80a0a:	4c06      	ldr	r4, [pc, #24]	; (80a24 <systick_delay_ms+0x1c>)
   80a0c:	6020      	str	r0, [r4, #0]
	systick_init_ms();
   80a0e:	4b06      	ldr	r3, [pc, #24]	; (80a28 <systick_delay_ms+0x20>)
   80a10:	4798      	blx	r3
	
	// Traps the system in a delay as long as period != 0
	while(period){
   80a12:	6823      	ldr	r3, [r4, #0]
   80a14:	b123      	cbz	r3, 80a20 <systick_delay_ms+0x18>
   80a16:	4622      	mov	r2, r4
		__asm__("nop");
   80a18:	bf00      	nop
	while(period){
   80a1a:	6813      	ldr	r3, [r2, #0]
   80a1c:	2b00      	cmp	r3, #0
   80a1e:	d1fb      	bne.n	80a18 <systick_delay_ms+0x10>
   80a20:	bd10      	pop	{r4, pc}
   80a22:	bf00      	nop
   80a24:	20000464 	.word	0x20000464
   80a28:	000809d5 	.word	0x000809d5

00080a2c <systick_delay_us>:
 *
 * \param ms Number of microseconds
 * \retval void
 */

void systick_delay_us(int us){
   80a2c:	b510      	push	{r4, lr}
	
	period = us;
   80a2e:	4c06      	ldr	r4, [pc, #24]	; (80a48 <systick_delay_us+0x1c>)
   80a30:	6020      	str	r0, [r4, #0]
	systick_init_us();
   80a32:	4b06      	ldr	r3, [pc, #24]	; (80a4c <systick_delay_us+0x20>)
   80a34:	4798      	blx	r3
	
	// Traps the system in a delay as long as period != 0
	while(period){
   80a36:	6823      	ldr	r3, [r4, #0]
   80a38:	b123      	cbz	r3, 80a44 <systick_delay_us+0x18>
   80a3a:	4622      	mov	r2, r4
		__asm__("nop");
   80a3c:	bf00      	nop
	while(period){
   80a3e:	6813      	ldr	r3, [r2, #0]
   80a40:	2b00      	cmp	r3, #0
   80a42:	d1fb      	bne.n	80a3c <systick_delay_us+0x10>
   80a44:	bd10      	pop	{r4, pc}
   80a46:	bf00      	nop
   80a48:	20000464 	.word	0x20000464
   80a4c:	000809f1 	.word	0x000809f1

00080a50 <SysTick_Handler>:
 * \retval void
 */

void SysTick_Handler(void){
	
	if (period == 0)
   80a50:	4b06      	ldr	r3, [pc, #24]	; (80a6c <SysTick_Handler+0x1c>)
   80a52:	681b      	ldr	r3, [r3, #0]
   80a54:	b123      	cbz	r3, 80a60 <SysTick_Handler+0x10>
		SysTick->VAL = 0;
		
	} else {
		
		// Decrements the counter
		period--;
   80a56:	4a05      	ldr	r2, [pc, #20]	; (80a6c <SysTick_Handler+0x1c>)
   80a58:	6813      	ldr	r3, [r2, #0]
   80a5a:	3b01      	subs	r3, #1
   80a5c:	6013      	str	r3, [r2, #0]
   80a5e:	4770      	bx	lr
		SysTick->CTRL = 0;
   80a60:	4b03      	ldr	r3, [pc, #12]	; (80a70 <SysTick_Handler+0x20>)
   80a62:	2200      	movs	r2, #0
   80a64:	601a      	str	r2, [r3, #0]
		SysTick->VAL = 0;
   80a66:	609a      	str	r2, [r3, #8]
   80a68:	4770      	bx	lr
   80a6a:	bf00      	nop
   80a6c:	20000464 	.word	0x20000464
   80a70:	e000e010 	.word	0xe000e010

00080a74 <prints>:
   80a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80a78:	460d      	mov	r5, r1
   80a7a:	1e16      	subs	r6, r2, #0
   80a7c:	dd48      	ble.n	80b10 <prints+0x9c>
   80a7e:	780a      	ldrb	r2, [r1, #0]
   80a80:	2a00      	cmp	r2, #0
   80a82:	d035      	beq.n	80af0 <prints+0x7c>
   80a84:	460a      	mov	r2, r1
   80a86:	2400      	movs	r4, #0
   80a88:	3401      	adds	r4, #1
   80a8a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   80a8e:	2900      	cmp	r1, #0
   80a90:	d1fa      	bne.n	80a88 <prints+0x14>
   80a92:	42a6      	cmp	r6, r4
   80a94:	dc2d      	bgt.n	80af2 <prints+0x7e>
   80a96:	2400      	movs	r4, #0
   80a98:	f003 0202 	and.w	r2, r3, #2
   80a9c:	2a00      	cmp	r2, #0
   80a9e:	bf0c      	ite	eq
   80aa0:	f04f 0820 	moveq.w	r8, #32
   80aa4:	f04f 0830 	movne.w	r8, #48	; 0x30
   80aa8:	f013 0301 	ands.w	r3, r3, #1
   80aac:	d123      	bne.n	80af6 <prints+0x82>
   80aae:	2c00      	cmp	r4, #0
   80ab0:	dd28      	ble.n	80b04 <prints+0x90>
   80ab2:	4626      	mov	r6, r4
   80ab4:	fa5f f988 	uxtb.w	r9, r8
   80ab8:	4f18      	ldr	r7, [pc, #96]	; (80b1c <prints+0xa8>)
   80aba:	4648      	mov	r0, r9
   80abc:	47b8      	blx	r7
   80abe:	3e01      	subs	r6, #1
   80ac0:	d1fb      	bne.n	80aba <prints+0x46>
   80ac2:	7828      	ldrb	r0, [r5, #0]
   80ac4:	b188      	cbz	r0, 80aea <prints+0x76>
   80ac6:	4f15      	ldr	r7, [pc, #84]	; (80b1c <prints+0xa8>)
   80ac8:	47b8      	blx	r7
   80aca:	3401      	adds	r4, #1
   80acc:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80ad0:	2800      	cmp	r0, #0
   80ad2:	d1f9      	bne.n	80ac8 <prints+0x54>
   80ad4:	2e00      	cmp	r6, #0
   80ad6:	dd08      	ble.n	80aea <prints+0x76>
   80ad8:	4635      	mov	r5, r6
   80ada:	fa5f f888 	uxtb.w	r8, r8
   80ade:	4f0f      	ldr	r7, [pc, #60]	; (80b1c <prints+0xa8>)
   80ae0:	4640      	mov	r0, r8
   80ae2:	47b8      	blx	r7
   80ae4:	3d01      	subs	r5, #1
   80ae6:	d1fb      	bne.n	80ae0 <prints+0x6c>
   80ae8:	4434      	add	r4, r6
   80aea:	4620      	mov	r0, r4
   80aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80af0:	2400      	movs	r4, #0
   80af2:	1b34      	subs	r4, r6, r4
   80af4:	e7d0      	b.n	80a98 <prints+0x24>
   80af6:	4626      	mov	r6, r4
   80af8:	7828      	ldrb	r0, [r5, #0]
   80afa:	b108      	cbz	r0, 80b00 <prints+0x8c>
   80afc:	2400      	movs	r4, #0
   80afe:	e7e2      	b.n	80ac6 <prints+0x52>
   80b00:	2400      	movs	r4, #0
   80b02:	e7e7      	b.n	80ad4 <prints+0x60>
   80b04:	4626      	mov	r6, r4
   80b06:	461c      	mov	r4, r3
   80b08:	e7db      	b.n	80ac2 <prints+0x4e>
   80b0a:	f04f 0820 	mov.w	r8, #32
   80b0e:	e7d8      	b.n	80ac2 <prints+0x4e>
   80b10:	f013 0401 	ands.w	r4, r3, #1
   80b14:	d0f9      	beq.n	80b0a <prints+0x96>
   80b16:	f04f 0820 	mov.w	r8, #32
   80b1a:	e7ed      	b.n	80af8 <prints+0x84>
   80b1c:	00080dc9 	.word	0x00080dc9

00080b20 <printi>:
   80b20:	b5f0      	push	{r4, r5, r6, r7, lr}
   80b22:	b085      	sub	sp, #20
   80b24:	4607      	mov	r7, r0
   80b26:	b381      	cbz	r1, 80b8a <printi+0x6a>
   80b28:	460c      	mov	r4, r1
   80b2a:	b10b      	cbz	r3, 80b30 <printi+0x10>
   80b2c:	2a0a      	cmp	r2, #10
   80b2e:	d038      	beq.n	80ba2 <printi+0x82>
   80b30:	2300      	movs	r3, #0
   80b32:	f88d 300f 	strb.w	r3, [sp, #15]
   80b36:	2600      	movs	r6, #0
   80b38:	2900      	cmp	r1, #0
   80b3a:	d046      	beq.n	80bca <printi+0xaa>
   80b3c:	f10d 050f 	add.w	r5, sp, #15
   80b40:	990c      	ldr	r1, [sp, #48]	; 0x30
   80b42:	393a      	subs	r1, #58	; 0x3a
   80b44:	fbb4 f3f2 	udiv	r3, r4, r2
   80b48:	fb02 4313 	mls	r3, r2, r3, r4
   80b4c:	2b09      	cmp	r3, #9
   80b4e:	bfc8      	it	gt
   80b50:	185b      	addgt	r3, r3, r1
   80b52:	3330      	adds	r3, #48	; 0x30
   80b54:	f805 3d01 	strb.w	r3, [r5, #-1]!
   80b58:	fbb4 f4f2 	udiv	r4, r4, r2
   80b5c:	2c00      	cmp	r4, #0
   80b5e:	d1f1      	bne.n	80b44 <printi+0x24>
   80b60:	b156      	cbz	r6, 80b78 <printi+0x58>
   80b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80b64:	b11b      	cbz	r3, 80b6e <printi+0x4e>
   80b66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80b68:	f013 0f02 	tst.w	r3, #2
   80b6c:	d125      	bne.n	80bba <printi+0x9a>
   80b6e:	232d      	movs	r3, #45	; 0x2d
   80b70:	f805 3c01 	strb.w	r3, [r5, #-1]
   80b74:	3d01      	subs	r5, #1
   80b76:	2600      	movs	r6, #0
   80b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80b7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80b7c:	4629      	mov	r1, r5
   80b7e:	4638      	mov	r0, r7
   80b80:	4c14      	ldr	r4, [pc, #80]	; (80bd4 <printi+0xb4>)
   80b82:	47a0      	blx	r4
   80b84:	4430      	add	r0, r6
   80b86:	b005      	add	sp, #20
   80b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80b8a:	2330      	movs	r3, #48	; 0x30
   80b8c:	f88d 3004 	strb.w	r3, [sp, #4]
   80b90:	2300      	movs	r3, #0
   80b92:	f88d 3005 	strb.w	r3, [sp, #5]
   80b96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80b98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80b9a:	a901      	add	r1, sp, #4
   80b9c:	4c0d      	ldr	r4, [pc, #52]	; (80bd4 <printi+0xb4>)
   80b9e:	47a0      	blx	r4
   80ba0:	e7f1      	b.n	80b86 <printi+0x66>
   80ba2:	2900      	cmp	r1, #0
   80ba4:	dac4      	bge.n	80b30 <printi+0x10>
   80ba6:	424c      	negs	r4, r1
   80ba8:	2300      	movs	r3, #0
   80baa:	f88d 300f 	strb.w	r3, [sp, #15]
   80bae:	f10d 050f 	add.w	r5, sp, #15
   80bb2:	2c00      	cmp	r4, #0
   80bb4:	d0d5      	beq.n	80b62 <printi+0x42>
   80bb6:	2601      	movs	r6, #1
   80bb8:	e7c0      	b.n	80b3c <printi+0x1c>
   80bba:	202d      	movs	r0, #45	; 0x2d
   80bbc:	4b06      	ldr	r3, [pc, #24]	; (80bd8 <printi+0xb8>)
   80bbe:	4798      	blx	r3
   80bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80bc2:	3b01      	subs	r3, #1
   80bc4:	930a      	str	r3, [sp, #40]	; 0x28
   80bc6:	2601      	movs	r6, #1
   80bc8:	e7d6      	b.n	80b78 <printi+0x58>
   80bca:	461e      	mov	r6, r3
   80bcc:	f10d 050f 	add.w	r5, sp, #15
   80bd0:	e7d2      	b.n	80b78 <printi+0x58>
   80bd2:	bf00      	nop
   80bd4:	00080a75 	.word	0x00080a75
   80bd8:	00080dc9 	.word	0x00080dc9

00080bdc <print>:
   80bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80be0:	b087      	sub	sp, #28
   80be2:	4680      	mov	r8, r0
   80be4:	780b      	ldrb	r3, [r1, #0]
   80be6:	2b00      	cmp	r3, #0
   80be8:	f000 8094 	beq.w	80d14 <print+0x138>
   80bec:	468b      	mov	fp, r1
   80bee:	4617      	mov	r7, r2
   80bf0:	2500      	movs	r5, #0
   80bf2:	4e4e      	ldr	r6, [pc, #312]	; (80d2c <print+0x150>)
   80bf4:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80d34 <print+0x158>
   80bf8:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80d38 <print+0x15c>
   80bfc:	e046      	b.n	80c8c <print+0xb0>
   80bfe:	2200      	movs	r2, #0
   80c00:	e070      	b.n	80ce4 <print+0x108>
   80c02:	6839      	ldr	r1, [r7, #0]
   80c04:	3704      	adds	r7, #4
   80c06:	484a      	ldr	r0, [pc, #296]	; (80d30 <print+0x154>)
   80c08:	2900      	cmp	r1, #0
   80c0a:	bf08      	it	eq
   80c0c:	4601      	moveq	r1, r0
   80c0e:	4640      	mov	r0, r8
   80c10:	47d0      	blx	sl
   80c12:	4405      	add	r5, r0
   80c14:	e035      	b.n	80c82 <print+0xa6>
   80c16:	6839      	ldr	r1, [r7, #0]
   80c18:	3704      	adds	r7, #4
   80c1a:	2061      	movs	r0, #97	; 0x61
   80c1c:	9002      	str	r0, [sp, #8]
   80c1e:	9301      	str	r3, [sp, #4]
   80c20:	9200      	str	r2, [sp, #0]
   80c22:	2301      	movs	r3, #1
   80c24:	220a      	movs	r2, #10
   80c26:	4640      	mov	r0, r8
   80c28:	47c8      	blx	r9
   80c2a:	4405      	add	r5, r0
   80c2c:	e029      	b.n	80c82 <print+0xa6>
   80c2e:	6839      	ldr	r1, [r7, #0]
   80c30:	3704      	adds	r7, #4
   80c32:	2061      	movs	r0, #97	; 0x61
   80c34:	9002      	str	r0, [sp, #8]
   80c36:	9301      	str	r3, [sp, #4]
   80c38:	9200      	str	r2, [sp, #0]
   80c3a:	2300      	movs	r3, #0
   80c3c:	2210      	movs	r2, #16
   80c3e:	4640      	mov	r0, r8
   80c40:	47c8      	blx	r9
   80c42:	4405      	add	r5, r0
   80c44:	e01d      	b.n	80c82 <print+0xa6>
   80c46:	6839      	ldr	r1, [r7, #0]
   80c48:	3704      	adds	r7, #4
   80c4a:	2041      	movs	r0, #65	; 0x41
   80c4c:	9002      	str	r0, [sp, #8]
   80c4e:	9301      	str	r3, [sp, #4]
   80c50:	9200      	str	r2, [sp, #0]
   80c52:	2300      	movs	r3, #0
   80c54:	2210      	movs	r2, #16
   80c56:	4640      	mov	r0, r8
   80c58:	47c8      	blx	r9
   80c5a:	4405      	add	r5, r0
   80c5c:	e011      	b.n	80c82 <print+0xa6>
   80c5e:	6839      	ldr	r1, [r7, #0]
   80c60:	3704      	adds	r7, #4
   80c62:	2061      	movs	r0, #97	; 0x61
   80c64:	9002      	str	r0, [sp, #8]
   80c66:	9301      	str	r3, [sp, #4]
   80c68:	9200      	str	r2, [sp, #0]
   80c6a:	2300      	movs	r3, #0
   80c6c:	220a      	movs	r2, #10
   80c6e:	4640      	mov	r0, r8
   80c70:	47c8      	blx	r9
   80c72:	4405      	add	r5, r0
   80c74:	e005      	b.n	80c82 <print+0xa6>
   80c76:	46a3      	mov	fp, r4
   80c78:	f89b 0000 	ldrb.w	r0, [fp]
   80c7c:	47b0      	blx	r6
   80c7e:	3501      	adds	r5, #1
   80c80:	465c      	mov	r4, fp
   80c82:	f104 0b01 	add.w	fp, r4, #1
   80c86:	7863      	ldrb	r3, [r4, #1]
   80c88:	2b00      	cmp	r3, #0
   80c8a:	d044      	beq.n	80d16 <print+0x13a>
   80c8c:	2b25      	cmp	r3, #37	; 0x25
   80c8e:	d1f3      	bne.n	80c78 <print+0x9c>
   80c90:	f10b 0401 	add.w	r4, fp, #1
   80c94:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80c98:	2b00      	cmp	r3, #0
   80c9a:	d03c      	beq.n	80d16 <print+0x13a>
   80c9c:	2b25      	cmp	r3, #37	; 0x25
   80c9e:	d0ea      	beq.n	80c76 <print+0x9a>
   80ca0:	2b2d      	cmp	r3, #45	; 0x2d
   80ca2:	bf06      	itte	eq
   80ca4:	f10b 0402 	addeq.w	r4, fp, #2
   80ca8:	2301      	moveq	r3, #1
   80caa:	2300      	movne	r3, #0
   80cac:	7822      	ldrb	r2, [r4, #0]
   80cae:	2a30      	cmp	r2, #48	; 0x30
   80cb0:	d105      	bne.n	80cbe <print+0xe2>
   80cb2:	f043 0302 	orr.w	r3, r3, #2
   80cb6:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80cba:	2a30      	cmp	r2, #48	; 0x30
   80cbc:	d0f9      	beq.n	80cb2 <print+0xd6>
   80cbe:	7821      	ldrb	r1, [r4, #0]
   80cc0:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80cc4:	b2d2      	uxtb	r2, r2
   80cc6:	2a09      	cmp	r2, #9
   80cc8:	d899      	bhi.n	80bfe <print+0x22>
   80cca:	2200      	movs	r2, #0
   80ccc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80cd0:	3930      	subs	r1, #48	; 0x30
   80cd2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   80cd6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80cda:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80cde:	b2c0      	uxtb	r0, r0
   80ce0:	2809      	cmp	r0, #9
   80ce2:	d9f3      	bls.n	80ccc <print+0xf0>
   80ce4:	2973      	cmp	r1, #115	; 0x73
   80ce6:	d08c      	beq.n	80c02 <print+0x26>
   80ce8:	2964      	cmp	r1, #100	; 0x64
   80cea:	d094      	beq.n	80c16 <print+0x3a>
   80cec:	2978      	cmp	r1, #120	; 0x78
   80cee:	d09e      	beq.n	80c2e <print+0x52>
   80cf0:	2958      	cmp	r1, #88	; 0x58
   80cf2:	d0a8      	beq.n	80c46 <print+0x6a>
   80cf4:	2975      	cmp	r1, #117	; 0x75
   80cf6:	d0b2      	beq.n	80c5e <print+0x82>
   80cf8:	2963      	cmp	r1, #99	; 0x63
   80cfa:	d1c2      	bne.n	80c82 <print+0xa6>
   80cfc:	6839      	ldr	r1, [r7, #0]
   80cfe:	3704      	adds	r7, #4
   80d00:	f88d 1014 	strb.w	r1, [sp, #20]
   80d04:	2100      	movs	r1, #0
   80d06:	f88d 1015 	strb.w	r1, [sp, #21]
   80d0a:	a905      	add	r1, sp, #20
   80d0c:	4640      	mov	r0, r8
   80d0e:	47d0      	blx	sl
   80d10:	4405      	add	r5, r0
   80d12:	e7b6      	b.n	80c82 <print+0xa6>
   80d14:	2500      	movs	r5, #0
   80d16:	f1b8 0f00 	cmp.w	r8, #0
   80d1a:	d003      	beq.n	80d24 <print+0x148>
   80d1c:	f8d8 3000 	ldr.w	r3, [r8]
   80d20:	2200      	movs	r2, #0
   80d22:	701a      	strb	r2, [r3, #0]
   80d24:	4628      	mov	r0, r5
   80d26:	b007      	add	sp, #28
   80d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80d2c:	00080dc9 	.word	0x00080dc9
   80d30:	00081818 	.word	0x00081818
   80d34:	00080a75 	.word	0x00080a75
   80d38:	00080b21 	.word	0x00080b21

00080d3c <printf>:
   80d3c:	b40f      	push	{r0, r1, r2, r3}
   80d3e:	b500      	push	{lr}
   80d40:	b083      	sub	sp, #12
   80d42:	aa04      	add	r2, sp, #16
   80d44:	f852 1b04 	ldr.w	r1, [r2], #4
   80d48:	9201      	str	r2, [sp, #4]
   80d4a:	2000      	movs	r0, #0
   80d4c:	4b03      	ldr	r3, [pc, #12]	; (80d5c <printf+0x20>)
   80d4e:	4798      	blx	r3
   80d50:	b003      	add	sp, #12
   80d52:	f85d eb04 	ldr.w	lr, [sp], #4
   80d56:	b004      	add	sp, #16
   80d58:	4770      	bx	lr
   80d5a:	bf00      	nop
   80d5c:	00080bdd 	.word	0x00080bdd

00080d60 <configure_uart>:
   80d60:	4b16      	ldr	r3, [pc, #88]	; (80dbc <configure_uart+0x5c>)
   80d62:	2200      	movs	r2, #0
   80d64:	701a      	strb	r2, [r3, #0]
   80d66:	705a      	strb	r2, [r3, #1]
   80d68:	4b15      	ldr	r3, [pc, #84]	; (80dc0 <configure_uart+0x60>)
   80d6a:	f44f 7140 	mov.w	r1, #768	; 0x300
   80d6e:	6459      	str	r1, [r3, #68]	; 0x44
   80d70:	6059      	str	r1, [r3, #4]
   80d72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80d74:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80d76:	4002      	ands	r2, r0
   80d78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80d7c:	671a      	str	r2, [r3, #112]	; 0x70
   80d7e:	6659      	str	r1, [r3, #100]	; 0x64
   80d80:	f44f 7280 	mov.w	r2, #256	; 0x100
   80d84:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80d88:	611a      	str	r2, [r3, #16]
   80d8a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80d8e:	21ac      	movs	r1, #172	; 0xac
   80d90:	6019      	str	r1, [r3, #0]
   80d92:	f240 2123 	movw	r1, #547	; 0x223
   80d96:	6219      	str	r1, [r3, #32]
   80d98:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80d9c:	6059      	str	r1, [r3, #4]
   80d9e:	f240 2102 	movw	r1, #514	; 0x202
   80da2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   80da6:	f04f 31ff 	mov.w	r1, #4294967295
   80daa:	60d9      	str	r1, [r3, #12]
   80dac:	21e1      	movs	r1, #225	; 0xe1
   80dae:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80db0:	4904      	ldr	r1, [pc, #16]	; (80dc4 <configure_uart+0x64>)
   80db2:	600a      	str	r2, [r1, #0]
   80db4:	2250      	movs	r2, #80	; 0x50
   80db6:	601a      	str	r2, [r3, #0]
   80db8:	4770      	bx	lr
   80dba:	bf00      	nop
   80dbc:	20000478 	.word	0x20000478
   80dc0:	400e0e00 	.word	0x400e0e00
   80dc4:	e000e100 	.word	0xe000e100

00080dc8 <uart_putchar>:
   80dc8:	4b07      	ldr	r3, [pc, #28]	; (80de8 <uart_putchar+0x20>)
   80dca:	695b      	ldr	r3, [r3, #20]
   80dcc:	f013 0f02 	tst.w	r3, #2
   80dd0:	d008      	beq.n	80de4 <uart_putchar+0x1c>
   80dd2:	4b05      	ldr	r3, [pc, #20]	; (80de8 <uart_putchar+0x20>)
   80dd4:	61d8      	str	r0, [r3, #28]
   80dd6:	461a      	mov	r2, r3
   80dd8:	6953      	ldr	r3, [r2, #20]
   80dda:	f413 7f00 	tst.w	r3, #512	; 0x200
   80dde:	d0fb      	beq.n	80dd8 <uart_putchar+0x10>
   80de0:	2000      	movs	r0, #0
   80de2:	4770      	bx	lr
   80de4:	2001      	movs	r0, #1
   80de6:	4770      	bx	lr
   80de8:	400e0800 	.word	0x400e0800

00080dec <UART_Handler>:
   80dec:	b508      	push	{r3, lr}
   80dee:	4b15      	ldr	r3, [pc, #84]	; (80e44 <UART_Handler+0x58>)
   80df0:	695b      	ldr	r3, [r3, #20]
   80df2:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80df6:	d003      	beq.n	80e00 <UART_Handler+0x14>
   80df8:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80dfc:	4a11      	ldr	r2, [pc, #68]	; (80e44 <UART_Handler+0x58>)
   80dfe:	6011      	str	r1, [r2, #0]
   80e00:	f013 0f01 	tst.w	r3, #1
   80e04:	d012      	beq.n	80e2c <UART_Handler+0x40>
   80e06:	4810      	ldr	r0, [pc, #64]	; (80e48 <UART_Handler+0x5c>)
   80e08:	7842      	ldrb	r2, [r0, #1]
   80e0a:	1c53      	adds	r3, r2, #1
   80e0c:	4259      	negs	r1, r3
   80e0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80e12:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80e16:	bf58      	it	pl
   80e18:	424b      	negpl	r3, r1
   80e1a:	7801      	ldrb	r1, [r0, #0]
   80e1c:	428b      	cmp	r3, r1
   80e1e:	d006      	beq.n	80e2e <UART_Handler+0x42>
   80e20:	4908      	ldr	r1, [pc, #32]	; (80e44 <UART_Handler+0x58>)
   80e22:	6988      	ldr	r0, [r1, #24]
   80e24:	4908      	ldr	r1, [pc, #32]	; (80e48 <UART_Handler+0x5c>)
   80e26:	440a      	add	r2, r1
   80e28:	7090      	strb	r0, [r2, #2]
   80e2a:	704b      	strb	r3, [r1, #1]
   80e2c:	bd08      	pop	{r3, pc}
   80e2e:	4807      	ldr	r0, [pc, #28]	; (80e4c <UART_Handler+0x60>)
   80e30:	4b07      	ldr	r3, [pc, #28]	; (80e50 <UART_Handler+0x64>)
   80e32:	4798      	blx	r3
   80e34:	4b03      	ldr	r3, [pc, #12]	; (80e44 <UART_Handler+0x58>)
   80e36:	699a      	ldr	r2, [r3, #24]
   80e38:	4b03      	ldr	r3, [pc, #12]	; (80e48 <UART_Handler+0x5c>)
   80e3a:	7859      	ldrb	r1, [r3, #1]
   80e3c:	440b      	add	r3, r1
   80e3e:	709a      	strb	r2, [r3, #2]
   80e40:	bd08      	pop	{r3, pc}
   80e42:	bf00      	nop
   80e44:	400e0800 	.word	0x400e0800
   80e48:	20000478 	.word	0x20000478
   80e4c:	00081820 	.word	0x00081820
   80e50:	00080d3d 	.word	0x00080d3d

00080e54 <__aeabi_drsub>:
   80e54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80e58:	e002      	b.n	80e60 <__adddf3>
   80e5a:	bf00      	nop

00080e5c <__aeabi_dsub>:
   80e5c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080e60 <__adddf3>:
   80e60:	b530      	push	{r4, r5, lr}
   80e62:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80e66:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80e6a:	ea94 0f05 	teq	r4, r5
   80e6e:	bf08      	it	eq
   80e70:	ea90 0f02 	teqeq	r0, r2
   80e74:	bf1f      	itttt	ne
   80e76:	ea54 0c00 	orrsne.w	ip, r4, r0
   80e7a:	ea55 0c02 	orrsne.w	ip, r5, r2
   80e7e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80e82:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80e86:	f000 80e2 	beq.w	8104e <__adddf3+0x1ee>
   80e8a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80e8e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80e92:	bfb8      	it	lt
   80e94:	426d      	neglt	r5, r5
   80e96:	dd0c      	ble.n	80eb2 <__adddf3+0x52>
   80e98:	442c      	add	r4, r5
   80e9a:	ea80 0202 	eor.w	r2, r0, r2
   80e9e:	ea81 0303 	eor.w	r3, r1, r3
   80ea2:	ea82 0000 	eor.w	r0, r2, r0
   80ea6:	ea83 0101 	eor.w	r1, r3, r1
   80eaa:	ea80 0202 	eor.w	r2, r0, r2
   80eae:	ea81 0303 	eor.w	r3, r1, r3
   80eb2:	2d36      	cmp	r5, #54	; 0x36
   80eb4:	bf88      	it	hi
   80eb6:	bd30      	pophi	{r4, r5, pc}
   80eb8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80ebc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80ec0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80ec4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80ec8:	d002      	beq.n	80ed0 <__adddf3+0x70>
   80eca:	4240      	negs	r0, r0
   80ecc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80ed0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80ed4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80ed8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80edc:	d002      	beq.n	80ee4 <__adddf3+0x84>
   80ede:	4252      	negs	r2, r2
   80ee0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80ee4:	ea94 0f05 	teq	r4, r5
   80ee8:	f000 80a7 	beq.w	8103a <__adddf3+0x1da>
   80eec:	f1a4 0401 	sub.w	r4, r4, #1
   80ef0:	f1d5 0e20 	rsbs	lr, r5, #32
   80ef4:	db0d      	blt.n	80f12 <__adddf3+0xb2>
   80ef6:	fa02 fc0e 	lsl.w	ip, r2, lr
   80efa:	fa22 f205 	lsr.w	r2, r2, r5
   80efe:	1880      	adds	r0, r0, r2
   80f00:	f141 0100 	adc.w	r1, r1, #0
   80f04:	fa03 f20e 	lsl.w	r2, r3, lr
   80f08:	1880      	adds	r0, r0, r2
   80f0a:	fa43 f305 	asr.w	r3, r3, r5
   80f0e:	4159      	adcs	r1, r3
   80f10:	e00e      	b.n	80f30 <__adddf3+0xd0>
   80f12:	f1a5 0520 	sub.w	r5, r5, #32
   80f16:	f10e 0e20 	add.w	lr, lr, #32
   80f1a:	2a01      	cmp	r2, #1
   80f1c:	fa03 fc0e 	lsl.w	ip, r3, lr
   80f20:	bf28      	it	cs
   80f22:	f04c 0c02 	orrcs.w	ip, ip, #2
   80f26:	fa43 f305 	asr.w	r3, r3, r5
   80f2a:	18c0      	adds	r0, r0, r3
   80f2c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80f30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80f34:	d507      	bpl.n	80f46 <__adddf3+0xe6>
   80f36:	f04f 0e00 	mov.w	lr, #0
   80f3a:	f1dc 0c00 	rsbs	ip, ip, #0
   80f3e:	eb7e 0000 	sbcs.w	r0, lr, r0
   80f42:	eb6e 0101 	sbc.w	r1, lr, r1
   80f46:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80f4a:	d31b      	bcc.n	80f84 <__adddf3+0x124>
   80f4c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80f50:	d30c      	bcc.n	80f6c <__adddf3+0x10c>
   80f52:	0849      	lsrs	r1, r1, #1
   80f54:	ea5f 0030 	movs.w	r0, r0, rrx
   80f58:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80f5c:	f104 0401 	add.w	r4, r4, #1
   80f60:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80f64:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80f68:	f080 809a 	bcs.w	810a0 <__adddf3+0x240>
   80f6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80f70:	bf08      	it	eq
   80f72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80f76:	f150 0000 	adcs.w	r0, r0, #0
   80f7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80f7e:	ea41 0105 	orr.w	r1, r1, r5
   80f82:	bd30      	pop	{r4, r5, pc}
   80f84:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80f88:	4140      	adcs	r0, r0
   80f8a:	eb41 0101 	adc.w	r1, r1, r1
   80f8e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80f92:	f1a4 0401 	sub.w	r4, r4, #1
   80f96:	d1e9      	bne.n	80f6c <__adddf3+0x10c>
   80f98:	f091 0f00 	teq	r1, #0
   80f9c:	bf04      	itt	eq
   80f9e:	4601      	moveq	r1, r0
   80fa0:	2000      	moveq	r0, #0
   80fa2:	fab1 f381 	clz	r3, r1
   80fa6:	bf08      	it	eq
   80fa8:	3320      	addeq	r3, #32
   80faa:	f1a3 030b 	sub.w	r3, r3, #11
   80fae:	f1b3 0220 	subs.w	r2, r3, #32
   80fb2:	da0c      	bge.n	80fce <__adddf3+0x16e>
   80fb4:	320c      	adds	r2, #12
   80fb6:	dd08      	ble.n	80fca <__adddf3+0x16a>
   80fb8:	f102 0c14 	add.w	ip, r2, #20
   80fbc:	f1c2 020c 	rsb	r2, r2, #12
   80fc0:	fa01 f00c 	lsl.w	r0, r1, ip
   80fc4:	fa21 f102 	lsr.w	r1, r1, r2
   80fc8:	e00c      	b.n	80fe4 <__adddf3+0x184>
   80fca:	f102 0214 	add.w	r2, r2, #20
   80fce:	bfd8      	it	le
   80fd0:	f1c2 0c20 	rsble	ip, r2, #32
   80fd4:	fa01 f102 	lsl.w	r1, r1, r2
   80fd8:	fa20 fc0c 	lsr.w	ip, r0, ip
   80fdc:	bfdc      	itt	le
   80fde:	ea41 010c 	orrle.w	r1, r1, ip
   80fe2:	4090      	lslle	r0, r2
   80fe4:	1ae4      	subs	r4, r4, r3
   80fe6:	bfa2      	ittt	ge
   80fe8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   80fec:	4329      	orrge	r1, r5
   80fee:	bd30      	popge	{r4, r5, pc}
   80ff0:	ea6f 0404 	mvn.w	r4, r4
   80ff4:	3c1f      	subs	r4, #31
   80ff6:	da1c      	bge.n	81032 <__adddf3+0x1d2>
   80ff8:	340c      	adds	r4, #12
   80ffa:	dc0e      	bgt.n	8101a <__adddf3+0x1ba>
   80ffc:	f104 0414 	add.w	r4, r4, #20
   81000:	f1c4 0220 	rsb	r2, r4, #32
   81004:	fa20 f004 	lsr.w	r0, r0, r4
   81008:	fa01 f302 	lsl.w	r3, r1, r2
   8100c:	ea40 0003 	orr.w	r0, r0, r3
   81010:	fa21 f304 	lsr.w	r3, r1, r4
   81014:	ea45 0103 	orr.w	r1, r5, r3
   81018:	bd30      	pop	{r4, r5, pc}
   8101a:	f1c4 040c 	rsb	r4, r4, #12
   8101e:	f1c4 0220 	rsb	r2, r4, #32
   81022:	fa20 f002 	lsr.w	r0, r0, r2
   81026:	fa01 f304 	lsl.w	r3, r1, r4
   8102a:	ea40 0003 	orr.w	r0, r0, r3
   8102e:	4629      	mov	r1, r5
   81030:	bd30      	pop	{r4, r5, pc}
   81032:	fa21 f004 	lsr.w	r0, r1, r4
   81036:	4629      	mov	r1, r5
   81038:	bd30      	pop	{r4, r5, pc}
   8103a:	f094 0f00 	teq	r4, #0
   8103e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   81042:	bf06      	itte	eq
   81044:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81048:	3401      	addeq	r4, #1
   8104a:	3d01      	subne	r5, #1
   8104c:	e74e      	b.n	80eec <__adddf3+0x8c>
   8104e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81052:	bf18      	it	ne
   81054:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81058:	d029      	beq.n	810ae <__adddf3+0x24e>
   8105a:	ea94 0f05 	teq	r4, r5
   8105e:	bf08      	it	eq
   81060:	ea90 0f02 	teqeq	r0, r2
   81064:	d005      	beq.n	81072 <__adddf3+0x212>
   81066:	ea54 0c00 	orrs.w	ip, r4, r0
   8106a:	bf04      	itt	eq
   8106c:	4619      	moveq	r1, r3
   8106e:	4610      	moveq	r0, r2
   81070:	bd30      	pop	{r4, r5, pc}
   81072:	ea91 0f03 	teq	r1, r3
   81076:	bf1e      	ittt	ne
   81078:	2100      	movne	r1, #0
   8107a:	2000      	movne	r0, #0
   8107c:	bd30      	popne	{r4, r5, pc}
   8107e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   81082:	d105      	bne.n	81090 <__adddf3+0x230>
   81084:	0040      	lsls	r0, r0, #1
   81086:	4149      	adcs	r1, r1
   81088:	bf28      	it	cs
   8108a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8108e:	bd30      	pop	{r4, r5, pc}
   81090:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   81094:	bf3c      	itt	cc
   81096:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8109a:	bd30      	popcc	{r4, r5, pc}
   8109c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   810a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   810a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   810a8:	f04f 0000 	mov.w	r0, #0
   810ac:	bd30      	pop	{r4, r5, pc}
   810ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   810b2:	bf1a      	itte	ne
   810b4:	4619      	movne	r1, r3
   810b6:	4610      	movne	r0, r2
   810b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   810bc:	bf1c      	itt	ne
   810be:	460b      	movne	r3, r1
   810c0:	4602      	movne	r2, r0
   810c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   810c6:	bf06      	itte	eq
   810c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   810cc:	ea91 0f03 	teqeq	r1, r3
   810d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   810d4:	bd30      	pop	{r4, r5, pc}
   810d6:	bf00      	nop

000810d8 <__aeabi_ui2d>:
   810d8:	f090 0f00 	teq	r0, #0
   810dc:	bf04      	itt	eq
   810de:	2100      	moveq	r1, #0
   810e0:	4770      	bxeq	lr
   810e2:	b530      	push	{r4, r5, lr}
   810e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   810e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   810ec:	f04f 0500 	mov.w	r5, #0
   810f0:	f04f 0100 	mov.w	r1, #0
   810f4:	e750      	b.n	80f98 <__adddf3+0x138>
   810f6:	bf00      	nop

000810f8 <__aeabi_i2d>:
   810f8:	f090 0f00 	teq	r0, #0
   810fc:	bf04      	itt	eq
   810fe:	2100      	moveq	r1, #0
   81100:	4770      	bxeq	lr
   81102:	b530      	push	{r4, r5, lr}
   81104:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81108:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8110c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81110:	bf48      	it	mi
   81112:	4240      	negmi	r0, r0
   81114:	f04f 0100 	mov.w	r1, #0
   81118:	e73e      	b.n	80f98 <__adddf3+0x138>
   8111a:	bf00      	nop

0008111c <__aeabi_f2d>:
   8111c:	0042      	lsls	r2, r0, #1
   8111e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   81122:	ea4f 0131 	mov.w	r1, r1, rrx
   81126:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8112a:	bf1f      	itttt	ne
   8112c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81130:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81134:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81138:	4770      	bxne	lr
   8113a:	f092 0f00 	teq	r2, #0
   8113e:	bf14      	ite	ne
   81140:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81144:	4770      	bxeq	lr
   81146:	b530      	push	{r4, r5, lr}
   81148:	f44f 7460 	mov.w	r4, #896	; 0x380
   8114c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81150:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81154:	e720      	b.n	80f98 <__adddf3+0x138>
   81156:	bf00      	nop

00081158 <__aeabi_ul2d>:
   81158:	ea50 0201 	orrs.w	r2, r0, r1
   8115c:	bf08      	it	eq
   8115e:	4770      	bxeq	lr
   81160:	b530      	push	{r4, r5, lr}
   81162:	f04f 0500 	mov.w	r5, #0
   81166:	e00a      	b.n	8117e <__aeabi_l2d+0x16>

00081168 <__aeabi_l2d>:
   81168:	ea50 0201 	orrs.w	r2, r0, r1
   8116c:	bf08      	it	eq
   8116e:	4770      	bxeq	lr
   81170:	b530      	push	{r4, r5, lr}
   81172:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   81176:	d502      	bpl.n	8117e <__aeabi_l2d+0x16>
   81178:	4240      	negs	r0, r0
   8117a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8117e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81182:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81186:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8118a:	f43f aedc 	beq.w	80f46 <__adddf3+0xe6>
   8118e:	f04f 0203 	mov.w	r2, #3
   81192:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81196:	bf18      	it	ne
   81198:	3203      	addne	r2, #3
   8119a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8119e:	bf18      	it	ne
   811a0:	3203      	addne	r2, #3
   811a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   811a6:	f1c2 0320 	rsb	r3, r2, #32
   811aa:	fa00 fc03 	lsl.w	ip, r0, r3
   811ae:	fa20 f002 	lsr.w	r0, r0, r2
   811b2:	fa01 fe03 	lsl.w	lr, r1, r3
   811b6:	ea40 000e 	orr.w	r0, r0, lr
   811ba:	fa21 f102 	lsr.w	r1, r1, r2
   811be:	4414      	add	r4, r2
   811c0:	e6c1      	b.n	80f46 <__adddf3+0xe6>
   811c2:	bf00      	nop

000811c4 <__aeabi_dmul>:
   811c4:	b570      	push	{r4, r5, r6, lr}
   811c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   811ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   811ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   811d2:	bf1d      	ittte	ne
   811d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   811d8:	ea94 0f0c 	teqne	r4, ip
   811dc:	ea95 0f0c 	teqne	r5, ip
   811e0:	f000 f8de 	bleq	813a0 <__aeabi_dmul+0x1dc>
   811e4:	442c      	add	r4, r5
   811e6:	ea81 0603 	eor.w	r6, r1, r3
   811ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   811ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   811f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   811f6:	bf18      	it	ne
   811f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   811fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81200:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81204:	d038      	beq.n	81278 <__aeabi_dmul+0xb4>
   81206:	fba0 ce02 	umull	ip, lr, r0, r2
   8120a:	f04f 0500 	mov.w	r5, #0
   8120e:	fbe1 e502 	umlal	lr, r5, r1, r2
   81212:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   81216:	fbe0 e503 	umlal	lr, r5, r0, r3
   8121a:	f04f 0600 	mov.w	r6, #0
   8121e:	fbe1 5603 	umlal	r5, r6, r1, r3
   81222:	f09c 0f00 	teq	ip, #0
   81226:	bf18      	it	ne
   81228:	f04e 0e01 	orrne.w	lr, lr, #1
   8122c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81230:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81234:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81238:	d204      	bcs.n	81244 <__aeabi_dmul+0x80>
   8123a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8123e:	416d      	adcs	r5, r5
   81240:	eb46 0606 	adc.w	r6, r6, r6
   81244:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81248:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8124c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81250:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81254:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81258:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8125c:	bf88      	it	hi
   8125e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81262:	d81e      	bhi.n	812a2 <__aeabi_dmul+0xde>
   81264:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81268:	bf08      	it	eq
   8126a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8126e:	f150 0000 	adcs.w	r0, r0, #0
   81272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81276:	bd70      	pop	{r4, r5, r6, pc}
   81278:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8127c:	ea46 0101 	orr.w	r1, r6, r1
   81280:	ea40 0002 	orr.w	r0, r0, r2
   81284:	ea81 0103 	eor.w	r1, r1, r3
   81288:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8128c:	bfc2      	ittt	gt
   8128e:	ebd4 050c 	rsbsgt	r5, r4, ip
   81292:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81296:	bd70      	popgt	{r4, r5, r6, pc}
   81298:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8129c:	f04f 0e00 	mov.w	lr, #0
   812a0:	3c01      	subs	r4, #1
   812a2:	f300 80ab 	bgt.w	813fc <__aeabi_dmul+0x238>
   812a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   812aa:	bfde      	ittt	le
   812ac:	2000      	movle	r0, #0
   812ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   812b2:	bd70      	pople	{r4, r5, r6, pc}
   812b4:	f1c4 0400 	rsb	r4, r4, #0
   812b8:	3c20      	subs	r4, #32
   812ba:	da35      	bge.n	81328 <__aeabi_dmul+0x164>
   812bc:	340c      	adds	r4, #12
   812be:	dc1b      	bgt.n	812f8 <__aeabi_dmul+0x134>
   812c0:	f104 0414 	add.w	r4, r4, #20
   812c4:	f1c4 0520 	rsb	r5, r4, #32
   812c8:	fa00 f305 	lsl.w	r3, r0, r5
   812cc:	fa20 f004 	lsr.w	r0, r0, r4
   812d0:	fa01 f205 	lsl.w	r2, r1, r5
   812d4:	ea40 0002 	orr.w	r0, r0, r2
   812d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   812dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   812e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   812e4:	fa21 f604 	lsr.w	r6, r1, r4
   812e8:	eb42 0106 	adc.w	r1, r2, r6
   812ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   812f0:	bf08      	it	eq
   812f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   812f6:	bd70      	pop	{r4, r5, r6, pc}
   812f8:	f1c4 040c 	rsb	r4, r4, #12
   812fc:	f1c4 0520 	rsb	r5, r4, #32
   81300:	fa00 f304 	lsl.w	r3, r0, r4
   81304:	fa20 f005 	lsr.w	r0, r0, r5
   81308:	fa01 f204 	lsl.w	r2, r1, r4
   8130c:	ea40 0002 	orr.w	r0, r0, r2
   81310:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81314:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81318:	f141 0100 	adc.w	r1, r1, #0
   8131c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81320:	bf08      	it	eq
   81322:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81326:	bd70      	pop	{r4, r5, r6, pc}
   81328:	f1c4 0520 	rsb	r5, r4, #32
   8132c:	fa00 f205 	lsl.w	r2, r0, r5
   81330:	ea4e 0e02 	orr.w	lr, lr, r2
   81334:	fa20 f304 	lsr.w	r3, r0, r4
   81338:	fa01 f205 	lsl.w	r2, r1, r5
   8133c:	ea43 0302 	orr.w	r3, r3, r2
   81340:	fa21 f004 	lsr.w	r0, r1, r4
   81344:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81348:	fa21 f204 	lsr.w	r2, r1, r4
   8134c:	ea20 0002 	bic.w	r0, r0, r2
   81350:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81354:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81358:	bf08      	it	eq
   8135a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8135e:	bd70      	pop	{r4, r5, r6, pc}
   81360:	f094 0f00 	teq	r4, #0
   81364:	d10f      	bne.n	81386 <__aeabi_dmul+0x1c2>
   81366:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8136a:	0040      	lsls	r0, r0, #1
   8136c:	eb41 0101 	adc.w	r1, r1, r1
   81370:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81374:	bf08      	it	eq
   81376:	3c01      	subeq	r4, #1
   81378:	d0f7      	beq.n	8136a <__aeabi_dmul+0x1a6>
   8137a:	ea41 0106 	orr.w	r1, r1, r6
   8137e:	f095 0f00 	teq	r5, #0
   81382:	bf18      	it	ne
   81384:	4770      	bxne	lr
   81386:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8138a:	0052      	lsls	r2, r2, #1
   8138c:	eb43 0303 	adc.w	r3, r3, r3
   81390:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81394:	bf08      	it	eq
   81396:	3d01      	subeq	r5, #1
   81398:	d0f7      	beq.n	8138a <__aeabi_dmul+0x1c6>
   8139a:	ea43 0306 	orr.w	r3, r3, r6
   8139e:	4770      	bx	lr
   813a0:	ea94 0f0c 	teq	r4, ip
   813a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   813a8:	bf18      	it	ne
   813aa:	ea95 0f0c 	teqne	r5, ip
   813ae:	d00c      	beq.n	813ca <__aeabi_dmul+0x206>
   813b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   813b4:	bf18      	it	ne
   813b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   813ba:	d1d1      	bne.n	81360 <__aeabi_dmul+0x19c>
   813bc:	ea81 0103 	eor.w	r1, r1, r3
   813c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   813c4:	f04f 0000 	mov.w	r0, #0
   813c8:	bd70      	pop	{r4, r5, r6, pc}
   813ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   813ce:	bf06      	itte	eq
   813d0:	4610      	moveq	r0, r2
   813d2:	4619      	moveq	r1, r3
   813d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   813d8:	d019      	beq.n	8140e <__aeabi_dmul+0x24a>
   813da:	ea94 0f0c 	teq	r4, ip
   813de:	d102      	bne.n	813e6 <__aeabi_dmul+0x222>
   813e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   813e4:	d113      	bne.n	8140e <__aeabi_dmul+0x24a>
   813e6:	ea95 0f0c 	teq	r5, ip
   813ea:	d105      	bne.n	813f8 <__aeabi_dmul+0x234>
   813ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   813f0:	bf1c      	itt	ne
   813f2:	4610      	movne	r0, r2
   813f4:	4619      	movne	r1, r3
   813f6:	d10a      	bne.n	8140e <__aeabi_dmul+0x24a>
   813f8:	ea81 0103 	eor.w	r1, r1, r3
   813fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81400:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81404:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81408:	f04f 0000 	mov.w	r0, #0
   8140c:	bd70      	pop	{r4, r5, r6, pc}
   8140e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81412:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   81416:	bd70      	pop	{r4, r5, r6, pc}

00081418 <__aeabi_ddiv>:
   81418:	b570      	push	{r4, r5, r6, lr}
   8141a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8141e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81422:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81426:	bf1d      	ittte	ne
   81428:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8142c:	ea94 0f0c 	teqne	r4, ip
   81430:	ea95 0f0c 	teqne	r5, ip
   81434:	f000 f8a7 	bleq	81586 <__aeabi_ddiv+0x16e>
   81438:	eba4 0405 	sub.w	r4, r4, r5
   8143c:	ea81 0e03 	eor.w	lr, r1, r3
   81440:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81444:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81448:	f000 8088 	beq.w	8155c <__aeabi_ddiv+0x144>
   8144c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81450:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81454:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81458:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8145c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81460:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81464:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81468:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8146c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81470:	429d      	cmp	r5, r3
   81472:	bf08      	it	eq
   81474:	4296      	cmpeq	r6, r2
   81476:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8147a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8147e:	d202      	bcs.n	81486 <__aeabi_ddiv+0x6e>
   81480:	085b      	lsrs	r3, r3, #1
   81482:	ea4f 0232 	mov.w	r2, r2, rrx
   81486:	1ab6      	subs	r6, r6, r2
   81488:	eb65 0503 	sbc.w	r5, r5, r3
   8148c:	085b      	lsrs	r3, r3, #1
   8148e:	ea4f 0232 	mov.w	r2, r2, rrx
   81492:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   81496:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8149a:	ebb6 0e02 	subs.w	lr, r6, r2
   8149e:	eb75 0e03 	sbcs.w	lr, r5, r3
   814a2:	bf22      	ittt	cs
   814a4:	1ab6      	subcs	r6, r6, r2
   814a6:	4675      	movcs	r5, lr
   814a8:	ea40 000c 	orrcs.w	r0, r0, ip
   814ac:	085b      	lsrs	r3, r3, #1
   814ae:	ea4f 0232 	mov.w	r2, r2, rrx
   814b2:	ebb6 0e02 	subs.w	lr, r6, r2
   814b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   814ba:	bf22      	ittt	cs
   814bc:	1ab6      	subcs	r6, r6, r2
   814be:	4675      	movcs	r5, lr
   814c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   814c4:	085b      	lsrs	r3, r3, #1
   814c6:	ea4f 0232 	mov.w	r2, r2, rrx
   814ca:	ebb6 0e02 	subs.w	lr, r6, r2
   814ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   814d2:	bf22      	ittt	cs
   814d4:	1ab6      	subcs	r6, r6, r2
   814d6:	4675      	movcs	r5, lr
   814d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   814dc:	085b      	lsrs	r3, r3, #1
   814de:	ea4f 0232 	mov.w	r2, r2, rrx
   814e2:	ebb6 0e02 	subs.w	lr, r6, r2
   814e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   814ea:	bf22      	ittt	cs
   814ec:	1ab6      	subcs	r6, r6, r2
   814ee:	4675      	movcs	r5, lr
   814f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   814f4:	ea55 0e06 	orrs.w	lr, r5, r6
   814f8:	d018      	beq.n	8152c <__aeabi_ddiv+0x114>
   814fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   814fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   81502:	ea4f 1606 	mov.w	r6, r6, lsl #4
   81506:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8150a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8150e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   81512:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   81516:	d1c0      	bne.n	8149a <__aeabi_ddiv+0x82>
   81518:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8151c:	d10b      	bne.n	81536 <__aeabi_ddiv+0x11e>
   8151e:	ea41 0100 	orr.w	r1, r1, r0
   81522:	f04f 0000 	mov.w	r0, #0
   81526:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8152a:	e7b6      	b.n	8149a <__aeabi_ddiv+0x82>
   8152c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81530:	bf04      	itt	eq
   81532:	4301      	orreq	r1, r0
   81534:	2000      	moveq	r0, #0
   81536:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8153a:	bf88      	it	hi
   8153c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81540:	f63f aeaf 	bhi.w	812a2 <__aeabi_dmul+0xde>
   81544:	ebb5 0c03 	subs.w	ip, r5, r3
   81548:	bf04      	itt	eq
   8154a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8154e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81552:	f150 0000 	adcs.w	r0, r0, #0
   81556:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8155a:	bd70      	pop	{r4, r5, r6, pc}
   8155c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81560:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   81564:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81568:	bfc2      	ittt	gt
   8156a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8156e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81572:	bd70      	popgt	{r4, r5, r6, pc}
   81574:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81578:	f04f 0e00 	mov.w	lr, #0
   8157c:	3c01      	subs	r4, #1
   8157e:	e690      	b.n	812a2 <__aeabi_dmul+0xde>
   81580:	ea45 0e06 	orr.w	lr, r5, r6
   81584:	e68d      	b.n	812a2 <__aeabi_dmul+0xde>
   81586:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8158a:	ea94 0f0c 	teq	r4, ip
   8158e:	bf08      	it	eq
   81590:	ea95 0f0c 	teqeq	r5, ip
   81594:	f43f af3b 	beq.w	8140e <__aeabi_dmul+0x24a>
   81598:	ea94 0f0c 	teq	r4, ip
   8159c:	d10a      	bne.n	815b4 <__aeabi_ddiv+0x19c>
   8159e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   815a2:	f47f af34 	bne.w	8140e <__aeabi_dmul+0x24a>
   815a6:	ea95 0f0c 	teq	r5, ip
   815aa:	f47f af25 	bne.w	813f8 <__aeabi_dmul+0x234>
   815ae:	4610      	mov	r0, r2
   815b0:	4619      	mov	r1, r3
   815b2:	e72c      	b.n	8140e <__aeabi_dmul+0x24a>
   815b4:	ea95 0f0c 	teq	r5, ip
   815b8:	d106      	bne.n	815c8 <__aeabi_ddiv+0x1b0>
   815ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   815be:	f43f aefd 	beq.w	813bc <__aeabi_dmul+0x1f8>
   815c2:	4610      	mov	r0, r2
   815c4:	4619      	mov	r1, r3
   815c6:	e722      	b.n	8140e <__aeabi_dmul+0x24a>
   815c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   815cc:	bf18      	it	ne
   815ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   815d2:	f47f aec5 	bne.w	81360 <__aeabi_dmul+0x19c>
   815d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   815da:	f47f af0d 	bne.w	813f8 <__aeabi_dmul+0x234>
   815de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   815e2:	f47f aeeb 	bne.w	813bc <__aeabi_dmul+0x1f8>
   815e6:	e712      	b.n	8140e <__aeabi_dmul+0x24a>

000815e8 <__aeabi_d2uiz>:
   815e8:	004a      	lsls	r2, r1, #1
   815ea:	d211      	bcs.n	81610 <__aeabi_d2uiz+0x28>
   815ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   815f0:	d211      	bcs.n	81616 <__aeabi_d2uiz+0x2e>
   815f2:	d50d      	bpl.n	81610 <__aeabi_d2uiz+0x28>
   815f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   815f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   815fc:	d40e      	bmi.n	8161c <__aeabi_d2uiz+0x34>
   815fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8160a:	fa23 f002 	lsr.w	r0, r3, r2
   8160e:	4770      	bx	lr
   81610:	f04f 0000 	mov.w	r0, #0
   81614:	4770      	bx	lr
   81616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8161a:	d102      	bne.n	81622 <__aeabi_d2uiz+0x3a>
   8161c:	f04f 30ff 	mov.w	r0, #4294967295
   81620:	4770      	bx	lr
   81622:	f04f 0000 	mov.w	r0, #0
   81626:	4770      	bx	lr

00081628 <__libc_init_array>:
   81628:	b570      	push	{r4, r5, r6, lr}
   8162a:	4e0f      	ldr	r6, [pc, #60]	; (81668 <__libc_init_array+0x40>)
   8162c:	4d0f      	ldr	r5, [pc, #60]	; (8166c <__libc_init_array+0x44>)
   8162e:	1b76      	subs	r6, r6, r5
   81630:	10b6      	asrs	r6, r6, #2
   81632:	bf18      	it	ne
   81634:	2400      	movne	r4, #0
   81636:	d005      	beq.n	81644 <__libc_init_array+0x1c>
   81638:	3401      	adds	r4, #1
   8163a:	f855 3b04 	ldr.w	r3, [r5], #4
   8163e:	4798      	blx	r3
   81640:	42a6      	cmp	r6, r4
   81642:	d1f9      	bne.n	81638 <__libc_init_array+0x10>
   81644:	4e0a      	ldr	r6, [pc, #40]	; (81670 <__libc_init_array+0x48>)
   81646:	4d0b      	ldr	r5, [pc, #44]	; (81674 <__libc_init_array+0x4c>)
   81648:	f000 f8fc 	bl	81844 <_init>
   8164c:	1b76      	subs	r6, r6, r5
   8164e:	10b6      	asrs	r6, r6, #2
   81650:	bf18      	it	ne
   81652:	2400      	movne	r4, #0
   81654:	d006      	beq.n	81664 <__libc_init_array+0x3c>
   81656:	3401      	adds	r4, #1
   81658:	f855 3b04 	ldr.w	r3, [r5], #4
   8165c:	4798      	blx	r3
   8165e:	42a6      	cmp	r6, r4
   81660:	d1f9      	bne.n	81656 <__libc_init_array+0x2e>
   81662:	bd70      	pop	{r4, r5, r6, pc}
   81664:	bd70      	pop	{r4, r5, r6, pc}
   81666:	bf00      	nop
   81668:	00081850 	.word	0x00081850
   8166c:	00081850 	.word	0x00081850
   81670:	00081858 	.word	0x00081858
   81674:	00081850 	.word	0x00081850

00081678 <register_fini>:
   81678:	4b02      	ldr	r3, [pc, #8]	; (81684 <register_fini+0xc>)
   8167a:	b113      	cbz	r3, 81682 <register_fini+0xa>
   8167c:	4802      	ldr	r0, [pc, #8]	; (81688 <register_fini+0x10>)
   8167e:	f000 b805 	b.w	8168c <atexit>
   81682:	4770      	bx	lr
   81684:	00000000 	.word	0x00000000
   81688:	00081699 	.word	0x00081699

0008168c <atexit>:
   8168c:	2300      	movs	r3, #0
   8168e:	4601      	mov	r1, r0
   81690:	461a      	mov	r2, r3
   81692:	4618      	mov	r0, r3
   81694:	f000 b81e 	b.w	816d4 <__register_exitproc>

00081698 <__libc_fini_array>:
   81698:	b538      	push	{r3, r4, r5, lr}
   8169a:	4c0a      	ldr	r4, [pc, #40]	; (816c4 <__libc_fini_array+0x2c>)
   8169c:	4d0a      	ldr	r5, [pc, #40]	; (816c8 <__libc_fini_array+0x30>)
   8169e:	1b64      	subs	r4, r4, r5
   816a0:	10a4      	asrs	r4, r4, #2
   816a2:	d00a      	beq.n	816ba <__libc_fini_array+0x22>
   816a4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   816a8:	3b01      	subs	r3, #1
   816aa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   816ae:	3c01      	subs	r4, #1
   816b0:	f855 3904 	ldr.w	r3, [r5], #-4
   816b4:	4798      	blx	r3
   816b6:	2c00      	cmp	r4, #0
   816b8:	d1f9      	bne.n	816ae <__libc_fini_array+0x16>
   816ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   816be:	f000 b8cb 	b.w	81858 <_fini>
   816c2:	bf00      	nop
   816c4:	00081868 	.word	0x00081868
   816c8:	00081864 	.word	0x00081864

000816cc <__retarget_lock_acquire_recursive>:
   816cc:	4770      	bx	lr
   816ce:	bf00      	nop

000816d0 <__retarget_lock_release_recursive>:
   816d0:	4770      	bx	lr
   816d2:	bf00      	nop

000816d4 <__register_exitproc>:
   816d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   816d8:	4d2c      	ldr	r5, [pc, #176]	; (8178c <__register_exitproc+0xb8>)
   816da:	4606      	mov	r6, r0
   816dc:	6828      	ldr	r0, [r5, #0]
   816de:	4698      	mov	r8, r3
   816e0:	460f      	mov	r7, r1
   816e2:	4691      	mov	r9, r2
   816e4:	f7ff fff2 	bl	816cc <__retarget_lock_acquire_recursive>
   816e8:	4b29      	ldr	r3, [pc, #164]	; (81790 <__register_exitproc+0xbc>)
   816ea:	681c      	ldr	r4, [r3, #0]
   816ec:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   816f0:	2b00      	cmp	r3, #0
   816f2:	d03e      	beq.n	81772 <__register_exitproc+0x9e>
   816f4:	685a      	ldr	r2, [r3, #4]
   816f6:	2a1f      	cmp	r2, #31
   816f8:	dc1c      	bgt.n	81734 <__register_exitproc+0x60>
   816fa:	f102 0e01 	add.w	lr, r2, #1
   816fe:	b176      	cbz	r6, 8171e <__register_exitproc+0x4a>
   81700:	2101      	movs	r1, #1
   81702:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81706:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8170a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8170e:	4091      	lsls	r1, r2
   81710:	4308      	orrs	r0, r1
   81712:	2e02      	cmp	r6, #2
   81714:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81718:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   8171c:	d023      	beq.n	81766 <__register_exitproc+0x92>
   8171e:	3202      	adds	r2, #2
   81720:	f8c3 e004 	str.w	lr, [r3, #4]
   81724:	6828      	ldr	r0, [r5, #0]
   81726:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8172a:	f7ff ffd1 	bl	816d0 <__retarget_lock_release_recursive>
   8172e:	2000      	movs	r0, #0
   81730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81734:	4b17      	ldr	r3, [pc, #92]	; (81794 <__register_exitproc+0xc0>)
   81736:	b30b      	cbz	r3, 8177c <__register_exitproc+0xa8>
   81738:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8173c:	f3af 8000 	nop.w
   81740:	4603      	mov	r3, r0
   81742:	b1d8      	cbz	r0, 8177c <__register_exitproc+0xa8>
   81744:	2000      	movs	r0, #0
   81746:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8174a:	f04f 0e01 	mov.w	lr, #1
   8174e:	6058      	str	r0, [r3, #4]
   81750:	6019      	str	r1, [r3, #0]
   81752:	4602      	mov	r2, r0
   81754:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81758:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8175c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81760:	2e00      	cmp	r6, #0
   81762:	d0dc      	beq.n	8171e <__register_exitproc+0x4a>
   81764:	e7cc      	b.n	81700 <__register_exitproc+0x2c>
   81766:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8176a:	4301      	orrs	r1, r0
   8176c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81770:	e7d5      	b.n	8171e <__register_exitproc+0x4a>
   81772:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   81776:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8177a:	e7bb      	b.n	816f4 <__register_exitproc+0x20>
   8177c:	6828      	ldr	r0, [r5, #0]
   8177e:	f7ff ffa7 	bl	816d0 <__retarget_lock_release_recursive>
   81782:	f04f 30ff 	mov.w	r0, #4294967295
   81786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8178a:	bf00      	nop
   8178c:	20000438 	.word	0x20000438
   81790:	00081840 	.word	0x00081840
   81794:	00000000 	.word	0x00000000
   81798:	304e4143 	.word	0x304e4143
   8179c:	73656d20 	.word	0x73656d20
   817a0:	65676173 	.word	0x65676173
   817a4:	72726120 	.word	0x72726120
   817a8:	64657669 	.word	0x64657669
   817ac:	206e6920 	.word	0x206e6920
   817b0:	2d6e6f6e 	.word	0x2d6e6f6e
   817b4:	64657375 	.word	0x64657375
   817b8:	69616d20 	.word	0x69616d20
   817bc:	786f626c 	.word	0x786f626c
   817c0:	00000d0a 	.word	0x00000d0a
   817c4:	68206559 	.word	0x68206559
   817c8:	74657661 	.word	0x74657661
   817cc:	64252068 	.word	0x64252068
   817d0:	76696c20 	.word	0x76696c20
   817d4:	6c207365 	.word	0x6c207365
   817d8:	20746665 	.word	0x20746665
   817dc:	79206e69 	.word	0x79206e69
   817e0:	73207265 	.word	0x73207265
   817e4:	206c756f 	.word	0x206c756f
   817e8:	0a0d0a0d 	.word	0x0a0d0a0d
   817ec:	00000000 	.word	0x00000000
   817f0:	6576694c 	.word	0x6576694c
   817f4:	656c2073 	.word	0x656c2073
   817f8:	203a7466 	.word	0x203a7466
   817fc:	0d206425 	.word	0x0d206425
   81800:	0000000a 	.word	0x0000000a
   81804:	61470a0d 	.word	0x61470a0d
   81808:	4f20656d 	.word	0x4f20656d
   8180c:	20726576 	.word	0x20726576
   81810:	216b656b 	.word	0x216b656b
   81814:	00000000 	.word	0x00000000
   81818:	6c756e28 	.word	0x6c756e28
   8181c:	0000296c 	.word	0x0000296c
   81820:	3a525245 	.word	0x3a525245
   81824:	52415520 	.word	0x52415520
   81828:	58522054 	.word	0x58522054
   8182c:	66756220 	.word	0x66756220
   81830:	20726566 	.word	0x20726566
   81834:	66207369 	.word	0x66207369
   81838:	0a6c6c75 	.word	0x0a6c6c75
   8183c:	0000000d 	.word	0x0000000d

00081840 <_global_impure_ptr>:
   81840:	20000010                                ... 

00081844 <_init>:
   81844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81846:	bf00      	nop
   81848:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8184a:	bc08      	pop	{r3}
   8184c:	469e      	mov	lr, r3
   8184e:	4770      	bx	lr

00081850 <__init_array_start>:
   81850:	00081679 	.word	0x00081679

00081854 <__frame_dummy_init_array_entry>:
   81854:	00080119                                ....

00081858 <_fini>:
   81858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8185a:	bf00      	nop
   8185c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8185e:	bc08      	pop	{r3}
   81860:	469e      	mov	lr, r3
   81862:	4770      	bx	lr

00081864 <__fini_array_start>:
   81864:	000800f5 	.word	0x000800f5
